
build/mvps1D.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	200003b7 	.word	0x200003b7
20000098:	200003e3 	.word	0x200003e3
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "mvps1D.hpp"

static MVPS1D mvps1D;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000a6:	b570      	push	{r4, r5, r6, lr}
	// Local copy of the state objects.
	MVPS1D::State &s = mvps1D.state;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000a8:	8884      	ldrh	r4, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000aa:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 200001a0 <_hook_cycle+0xfa>
200000ae:	1223      	asrs	r3, r4, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000b0:	2b96      	cmp	r3, #150	; 0x96
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000b2:	460d      	mov	r5, r1
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000b4:	b2e1      	uxtb	r1, r4
200000b6:	bfd8      	it	le
200000b8:	461c      	movle	r4, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000ba:	f103 0301 	add.w	r3, r3, #1
200000be:	b2db      	uxtb	r3, r3
200000c0:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000c4:	bfc8      	it	gt
200000c6:	2497      	movgt	r4, #151	; 0x97
200000c8:	4936      	ldr	r1, [pc, #216]	; (200001a4 <_hook_cycle+0xfe>)
200000ca:	2b96      	cmp	r3, #150	; 0x96
200000cc:	bf88      	it	hi
200000ce:	2397      	movhi	r3, #151	; 0x97
200000d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
200000d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000dc:	ed2d 8b08 	vpush	{d8-d11}
200000e0:	ee67 7a87 	vmul.f32	s15, s15, s14
200000e4:	edd4 8a00 	vldr	s17, [r4]
200000e8:	ed93 7a00 	vldr	s14, [r3]
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Get LFO value
	float lfo = s.lfo = q31_to_f32(params->shape_lfo);
200000ec:	ed90 9a00 	vldr	s18, [r0]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000f0:	4b2d      	ldr	r3, [pc, #180]	; (200001a8 <_hook_cycle+0x102>)
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000f2:	eddf aa2e 	vldr	s21, [pc, #184]	; 200001ac <_hook_cycle+0x106>
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
	
	// Local copies of the state object fields.
	float phi = s.phi;
200000f6:	ed93 8a00 	vldr	s16, [r3]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000fa:	ed9f aa2d 	vldr	s20, [pc, #180]	; 200001b0 <_hook_cycle+0x10a>
200000fe:	ee37 7a68 	vsub.f32	s14, s14, s17
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Get LFO value
	float lfo = s.lfo = q31_to_f32(params->shape_lfo);
20000102:	eeba 9ae0 	vcvt.f32.s32	s18, s18, #31
20000106:	eee7 8a87 	vfma.f32	s17, s15, s14
	
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer
2000010a:	eb05 0682 	add.w	r6, r5, r2, lsl #2
2000010e:	461c      	mov	r4, r3

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000110:	eddf 7a28 	vldr	s15, [pc, #160]	; 200001b4 <_hook_cycle+0x10e>
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Get LFO value
	float lfo = s.lfo = q31_to_f32(params->shape_lfo);
20000114:	ed83 9a02 	vstr	s18, [r3, #8]
20000118:	eef4 8ae7 	vcmpe.f32	s17, s15
2000011c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000120:	bfb8      	it	lt
20000122:	eef0 7a68 	vmovlt.f32	s15, s17
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000126:	eddf 8a24 	vldr	s17, [pc, #144]	; 200001b8 <_hook_cycle+0x112>
2000012a:	ee67 8aa8 	vmul.f32	s17, s15, s17
2000012e:	eebf ba00 	vmov.f32	s22, #240	; 0xbf800000 -1.0
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
20000132:	edc3 8a01 	vstr	s17, [r3, #4]
20000136:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000013a:	42b5      	cmp	r5, r6
2000013c:	d02a      	beq.n	20000194 <_hook_cycle+0xee>
		float sig = 0.f;
		
		sig = mvps1D.MultiPhaseShaper(phi, lfo);
2000013e:	eeb0 0a48 	vmov.f32	s0, s16
20000142:	eef0 0a49 	vmov.f32	s1, s18
		
		return -osc_cosf(ps);
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000146:	ee38 8a28 	vadd.f32	s16, s16, s17
2000014a:	4817      	ldr	r0, [pc, #92]	; (200001a8 <_hook_cycle+0x102>)
2000014c:	f000 f892 	bl	20000274 <_ZN6MVPS1D16MultiPhaseShaperEff>
		*phi -= (uint32_t)*phi;
20000150:	eefc 7ac8 	vcvt.u32.f32	s15, s16
20000154:	eeb4 0acb 	vcmpe.f32	s0, s22
20000158:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000160:	ee38 8a67 	vsub.f32	s16, s16, s15
20000164:	db07      	blt.n	20000176 <_hook_cycle+0xd0>
20000166:	eeb4 0ae9 	vcmpe.f32	s0, s19
2000016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000016e:	bfa8      	it	ge
20000170:	eeb0 0a69 	vmovge.f32	s0, s19
20000174:	e001      	b.n	2000017a <_hook_cycle+0xd4>
20000176:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
2000017a:	ee60 7a00 	vmul.f32	s15, s0, s0
2000017e:	ee60 7a67 	vnmul.f32	s15, s0, s15
20000182:	eea7 0aaa 	vfma.f32	s0, s15, s21
20000186:	ee20 0a0a 	vmul.f32	s0, s0, s20
2000018a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2000018e:	eca5 0a01 	vstmia	r5!, {s0}
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000192:	e7d2      	b.n	2000013a <_hook_cycle+0x94>
		*(y++) = f32_to_q31(sig); 
	
	}
	
	// Update global osc phase
	s.phi = phi;
20000194:	ed84 8a00 	vstr	s16, [r4]
	
}
20000198:	ecbd 8b08 	vpop	{d8-d11}
2000019c:	bd70      	pop	{r4, r5, r6, pc}
2000019e:	bf00      	nop
200001a0:	3b808081 	.word	0x3b808081
200001a4:	0800f100 	.word	0x0800f100
200001a8:	200003b8 	.word	0x200003b8
200001ac:	3d4ccccd 	.word	0x3d4ccccd
200001b0:	4f000000 	.word	0x4f000000
200001b4:	46b8ff49 	.word	0x46b8ff49
200001b8:	37aec33e 	.word	0x37aec33e

200001bc <_hook_on>:
200001bc:	4770      	bx	lr

200001be <_hook_off>:
void OSC_NOTEON(const user_osc_param_t *const params) {
	// Not used	
	(void)params;
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
200001be:	4770      	bx	lr

200001c0 <_hook_param>:

void OSC_PARAM(uint16_t index, uint16_t value) { 

	MVPS1D::Params &p = mvps1D.params;
	
	const float valf = param_val_to_f32(value);
200001c0:	ee07 1a90 	vmov	s15, r1
200001c4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 20000258 <_hook_param+0x98>
200001c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200001cc:	ee27 7a87 	vmul.f32	s14, s15, s14
	switch (index) {
200001d0:	2807      	cmp	r0, #7
200001d2:	d840      	bhi.n	20000256 <_hook_param+0x96>
200001d4:	e8df f000 	tbb	[pc, r0]
200001d8:	1e140c04 	.word	0x1e140c04
200001dc:	3c383026 	.word	0x3c383026
		case k_user_osc_param_id1:  				// User parameter 1
			// Set Values for Inflection Point 1: d0
			p.d0 = value * 0.003f; 					// scale in [0-0.3]
200001e0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2000025c <_hook_param+0x9c>
200001e4:	4b1e      	ldr	r3, [pc, #120]	; (20000260 <_hook_param+0xa0>)
200001e6:	ee67 7a87 	vmul.f32	s15, s15, s14
200001ea:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
200001ee:	4770      	bx	lr
			
		case k_user_osc_param_id2:					// User parameter 2
			// Set Values for Inflection Point 1: v0
			p.v0 = value * 0.01f;
200001f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 20000264 <_hook_param+0xa4>
200001f4:	4b1a      	ldr	r3, [pc, #104]	; (20000260 <_hook_param+0xa0>)
200001f6:	ee67 7a87 	vmul.f32	s15, s15, s14
200001fa:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
200001fe:	4770      	bx	lr
			
		case k_user_osc_param_id3:  				// User parameter 3
			// Set Values for Inflection Point 2: d1
			p.d1 = 0.3f + (value * 0.003f); 		// scale in [0.3-0.6]
20000200:	ed9f 7a19 	vldr	s14, [pc, #100]	; 20000268 <_hook_param+0xa8>
20000204:	eddf 6a15 	vldr	s13, [pc, #84]	; 2000025c <_hook_param+0x9c>
20000208:	4b15      	ldr	r3, [pc, #84]	; (20000260 <_hook_param+0xa0>)
2000020a:	eea7 7aa6 	vfma.f32	s14, s15, s13
2000020e:	ed83 7a06 	vstr	s14, [r3, #24]
			break;
20000212:	4770      	bx	lr
			
		case k_user_osc_param_id4:					// User parameter 4
			// Set Values for Inflection Point 2: v1
			p.v1 = value * 0.01f;
20000214:	ed9f 7a13 	vldr	s14, [pc, #76]	; 20000264 <_hook_param+0xa4>
20000218:	4b11      	ldr	r3, [pc, #68]	; (20000260 <_hook_param+0xa0>)
2000021a:	ee67 7a87 	vmul.f32	s15, s15, s14
2000021e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			break;
20000222:	4770      	bx	lr
			
		case k_user_osc_param_id5:  				// User parameter 5
			// Set Values for Inflection Point 3: x2
			p.d2 = 0.6f + (value * 0.004f);			// scale in [0.6-1.0]
20000224:	ed9f 7a11 	vldr	s14, [pc, #68]	; 2000026c <_hook_param+0xac>
20000228:	eddf 6a11 	vldr	s13, [pc, #68]	; 20000270 <_hook_param+0xb0>
2000022c:	4b0c      	ldr	r3, [pc, #48]	; (20000260 <_hook_param+0xa0>)
2000022e:	eea7 7aa6 	vfma.f32	s14, s15, s13
20000232:	ed83 7a07 	vstr	s14, [r3, #28]
			break;
20000236:	4770      	bx	lr
			
		case k_user_osc_param_id6:					// User parameter 6
			// Set Values for Inflection Point 3: v2
			p.v2 = value * 0.01f;
20000238:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 20000264 <_hook_param+0xa4>
2000023c:	4b08      	ldr	r3, [pc, #32]	; (20000260 <_hook_param+0xa0>)
2000023e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000242:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			break;
20000246:	4770      	bx	lr
			
		case k_user_osc_param_shape: 				// A knob
			// Scaling for d values
			p.shape = valf; 
20000248:	4b05      	ldr	r3, [pc, #20]	; (20000260 <_hook_param+0xa0>)
2000024a:	ed83 7a03 	vstr	s14, [r3, #12]
			break;
2000024e:	4770      	bx	lr
			
		case k_user_osc_param_shiftshape:			// B knob	
			// Scaling for v values
			p.shiftshape = valf; 
20000250:	4b03      	ldr	r3, [pc, #12]	; (20000260 <_hook_param+0xa0>)
20000252:	ed83 7a04 	vstr	s14, [r3, #16]
20000256:	4770      	bx	lr
20000258:	3a802008 	.word	0x3a802008
2000025c:	3b449ba6 	.word	0x3b449ba6
20000260:	200003b8 	.word	0x200003b8
20000264:	3c23d70a 	.word	0x3c23d70a
20000268:	3e99999a 	.word	0x3e99999a
2000026c:	3f19999a 	.word	0x3f19999a
20000270:	3b83126f 	.word	0x3b83126f

20000274 <_ZN6MVPS1D16MultiPhaseShaperEff>:
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 * params.shape + lfo;
20000274:	edd0 7a05 	vldr	s15, [r0, #20]
20000278:	ed90 5a03 	vldr	s10, [r0, #12]
		float v0 = params.v0 * params.shiftshape;
2000027c:	ed90 7a08 	vldr	s14, [r0, #32]
		float d1 = params.d1 * params.shape + lfo;
20000280:	ed90 6a06 	vldr	s12, [r0, #24]
		float v1 = params.v1 * params.shiftshape;
20000284:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
		float d2 = params.d2 * params.shape + lfo;
20000288:	ed90 4a07 	vldr	s8, [r0, #28]
		float v2 = params.v2 * params.shiftshape;
2000028c:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 * params.shape + lfo;
20000290:	eef0 5a60 	vmov.f32	s11, s1
20000294:	eee7 5a85 	vfma.f32	s11, s15, s10
		float v0 = params.v0 * params.shiftshape;
20000298:	edd0 7a04 	vldr	s15, [r0, #16]
		float v1 = params.v1 * params.shiftshape;
		float d2 = params.d2 * params.shape + lfo;
		float v2 = params.v2 * params.shiftshape;
		
		float ps;
		if(phi < d0) {
2000029c:	eef4 5ac0 	vcmpe.f32	s11, s0
200002a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 * params.shape + lfo;
		float v0 = params.v0 * params.shiftshape;
200002a4:	ee27 7a87 	vmul.f32	s14, s15, s14
		float v1 = params.v1 * params.shiftshape;
		float d2 = params.d2 * params.shape + lfo;
		float v2 = params.v2 * params.shiftshape;
		
		float ps;
		if(phi < d0) {
200002a8:	dd04      	ble.n	200002b4 <_ZN6MVPS1D16MultiPhaseShaperEff+0x40>
			float fraction = phi / d0;
			ps = v0 * fraction;
200002aa:	eec0 7a25 	vdiv.f32	s15, s0, s11
200002ae:	ee67 7a87 	vmul.f32	s15, s15, s14
200002b2:	e039      	b.n	20000328 <_ZN6MVPS1D16MultiPhaseShaperEff+0xb4>
	}
  
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 * params.shape + lfo;
		float v0 = params.v0 * params.shiftshape;
		float d1 = params.d1 * params.shape + lfo;
200002b4:	eef0 3a60 	vmov.f32	s7, s1
200002b8:	eee5 3a06 	vfma.f32	s7, s10, s12
		float v1 = params.v1 * params.shiftshape;
200002bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
		
		float ps;
		if(phi < d0) {
			float fraction = phi / d0;
			ps = v0 * fraction;
		} else if(phi < d1){
200002c0:	eef4 3ac0 	vcmpe.f32	s7, s0
200002c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002c8:	dd0c      	ble.n	200002e4 <_ZN6MVPS1D16MultiPhaseShaperEff+0x70>
			float factor = v1 - v0;
			float numerator = phi - d0;
			float denominator = d1 - d0;
			float fraction = numerator / denominator;
			ps = factor * fraction + v0;
200002ca:	ee30 0a65 	vsub.f32	s0, s0, s11
200002ce:	ee73 0ae5 	vsub.f32	s1, s7, s11
200002d2:	ee76 7ac7 	vsub.f32	s15, s13, s14
200002d6:	eec0 6a20 	vdiv.f32	s13, s0, s1
200002da:	eea7 7aa6 	vfma.f32	s14, s15, s13
200002de:	eef0 7a47 	vmov.f32	s15, s14
200002e2:	e021      	b.n	20000328 <_ZN6MVPS1D16MultiPhaseShaperEff+0xb4>
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 * params.shape + lfo;
		float v0 = params.v0 * params.shiftshape;
		float d1 = params.d1 * params.shape + lfo;
		float v1 = params.v1 * params.shiftshape;
		float d2 = params.d2 * params.shape + lfo;
200002e4:	eee5 0a04 	vfma.f32	s1, s10, s8
		float v2 = params.v2 * params.shiftshape;
200002e8:	ee67 7aa4 	vmul.f32	s15, s15, s9
			float factor = v1 - v0;
			float numerator = phi - d0;
			float denominator = d1 - d0;
			float fraction = numerator / denominator;
			ps = factor * fraction + v0;
		} else if(phi < d2) {
200002ec:	eef4 0ac0 	vcmpe.f32	s1, s0
200002f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002f4:	dd0c      	ble.n	20000310 <_ZN6MVPS1D16MultiPhaseShaperEff+0x9c>
			float factor = v2 - v1;
			float numerator = phi - d1;
			float denominator = d2 - d1;
			float fraction = numerator / denominator;
			ps = factor * fraction + v1;
200002f6:	ee30 0a63 	vsub.f32	s0, s0, s7
200002fa:	ee70 0ae3 	vsub.f32	s1, s1, s7
200002fe:	ee37 7ae6 	vsub.f32	s14, s15, s13
20000302:	eec0 7a20 	vdiv.f32	s15, s0, s1
20000306:	eee7 6a27 	vfma.f32	s13, s14, s15
2000030a:	eef0 7a66 	vmov.f32	s15, s13
2000030e:	e00b      	b.n	20000328 <_ZN6MVPS1D16MultiPhaseShaperEff+0xb4>
		} else {
			float factor = 1.f - v2;
			float numerator = phi - d2;
			float denominator = 1.f - d2;
			float fraction = numerator / denominator;
			ps = factor * fraction + v2;
20000310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000314:	ee30 0a60 	vsub.f32	s0, s0, s1
20000318:	ee77 0a60 	vsub.f32	s1, s14, s1
2000031c:	ee77 6a67 	vsub.f32	s13, s14, s15
20000320:	ee80 7a20 	vdiv.f32	s14, s0, s1
20000324:	eee6 7a87 	vfma.f32	s15, s13, s14
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000328:	4a17      	ldr	r2, [pc, #92]	; (20000388 <_ZN6MVPS1D16MultiPhaseShaperEff+0x114>)
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000032a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
2000032e:	ee77 7a87 	vadd.f32	s15, s15, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000332:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000336:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000033a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2000033e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 2000038c <_ZN6MVPS1D16MultiPhaseShaperEff+0x118>
20000342:	ee67 7a87 	vmul.f32	s15, s15, s14
    const uint32_t x0p = (uint32_t)x0f;
20000346:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000034a:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000034e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000352:	eb02 0083 	add.w	r0, r2, r3, lsl #2
20000356:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000358:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000035c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
20000364:	ed90 0a00 	vldr	s0, [r0]
20000368:	ee77 7ac7 	vsub.f32	s15, s15, s14
2000036c:	ed93 7a00 	vldr	s14, [r3]
20000370:	ee37 7a40 	vsub.f32	s14, s14, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
20000374:	297f      	cmp	r1, #127	; 0x7f
20000376:	eea7 0a87 	vfma.f32	s0, s15, s14
2000037a:	bf88      	it	hi
2000037c:	eeb1 0a40 	vneghi.f32	s0, s0
		}
		
		return -osc_cosf(ps);
	}
20000380:	eeb1 0a40 	vneg.f32	s0, s0
20000384:	4770      	bx	lr
20000386:	bf00      	nop
20000388:	08012bdc 	.word	0x08012bdc
2000038c:	43800000 	.word	0x43800000

20000390 <_GLOBAL__sub_I__hook_init>:
		float   w0;			// Oscillator pitch
		float 	lfo;
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			lfo(ZEROF)
20000390:	4b07      	ldr	r3, [pc, #28]	; (200003b0 <_GLOBAL__sub_I__hook_init+0x20>)
20000392:	2200      	movs	r2, #0
20000394:	601a      	str	r2, [r3, #0]
20000396:	605a      	str	r2, [r3, #4]
20000398:	609a      	str	r2, [r3, #8]
		{}
	};

	MVPS1D(void) {
		state = State();
		params = Params();
2000039a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
2000039e:	60da      	str	r2, [r3, #12]
200003a0:	611a      	str	r2, [r3, #16]
200003a2:	615a      	str	r2, [r3, #20]
200003a4:	619a      	str	r2, [r3, #24]
200003a6:	61da      	str	r2, [r3, #28]
200003a8:	621a      	str	r2, [r3, #32]
200003aa:	625a      	str	r2, [r3, #36]	; 0x24
200003ac:	629a      	str	r2, [r3, #40]	; 0x28
200003ae:	4770      	bx	lr
200003b0:	200003b8 	.word	0x200003b8
