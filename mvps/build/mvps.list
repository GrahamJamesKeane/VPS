
build/mvps.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	2000038f 	.word	0x2000038f
20000098:	200003b3 	.word	0x200003b3
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "mvps.hpp"

static VPS vps;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	
	// Local copy of the state object.
	VPS::State &s = vps.state;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000a6:	8880      	ldrh	r0, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000a8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 20000190 <_hook_cycle+0xea>
200000ac:	1203      	asrs	r3, r0, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000ae:	2b96      	cmp	r3, #150	; 0x96
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000b0:	b570      	push	{r4, r5, r6, lr}
200000b2:	460d      	mov	r5, r1
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000b4:	b2c1      	uxtb	r1, r0
200000b6:	bfd8      	it	le
200000b8:	4618      	movle	r0, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000ba:	f103 0301 	add.w	r3, r3, #1
200000be:	b2db      	uxtb	r3, r3
200000c0:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000c4:	bfc8      	it	gt
200000c6:	2097      	movgt	r0, #151	; 0x97
200000c8:	4932      	ldr	r1, [pc, #200]	; (20000194 <_hook_cycle+0xee>)
200000ca:	2b96      	cmp	r3, #150	; 0x96
200000cc:	bf88      	it	hi
200000ce:	2397      	movhi	r3, #151	; 0x97
200000d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
200000d8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000dc:	ed2d 8b06 	vpush	{d8-d10}
200000e0:	ee67 7a87 	vmul.f32	s15, s15, s14
200000e4:	edd0 8a00 	vldr	s17, [r0]
200000e8:	ed93 7a00 	vldr	s14, [r3]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ec:	4b2a      	ldr	r3, [pc, #168]	; (20000198 <_hook_cycle+0xf2>)
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000ee:	ed9f aa2b 	vldr	s20, [pc, #172]	; 2000019c <_hook_cycle+0xf6>
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
	
	// Local copies of the state object fields.
	float phi = s.phi;
200000f2:	ed93 8a00 	vldr	s16, [r3]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000f6:	eddf 9a2a 	vldr	s19, [pc, #168]	; 200001a0 <_hook_cycle+0xfa>
200000fa:	ee37 7a68 	vsub.f32	s14, s14, s17
	float phi = s.phi;
	float *Phi = &phi;
	
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer
200000fe:	eb05 0682 	add.w	r6, r5, r2, lsl #2
20000102:	eee7 8a87 	vfma.f32	s17, s15, s14
20000106:	461c      	mov	r4, r3

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000108:	eddf 7a26 	vldr	s15, [pc, #152]	; 200001a4 <_hook_cycle+0xfe>
2000010c:	eef4 8ae7 	vcmpe.f32	s17, s15
20000110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000114:	bfb8      	it	lt
20000116:	eef0 7a68 	vmovlt.f32	s15, s17
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000011a:	eddf 8a23 	vldr	s17, [pc, #140]	; 200001a8 <_hook_cycle+0x102>
2000011e:	ee67 8aa8 	vmul.f32	s17, s15, s17
20000122:	eeff aa00 	vmov.f32	s21, #240	; 0xbf800000 -1.0
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
20000126:	edc3 8a01 	vstr	s17, [r3, #4]
2000012a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000012e:	42b5      	cmp	r5, r6
20000130:	d028      	beq.n	20000184 <_hook_cycle+0xde>
		float sig = 0.f;
		
		sig = vps.MultiPhaseShaper(phi);
20000132:	eeb0 0a48 	vmov.f32	s0, s16
20000136:	4818      	ldr	r0, [pc, #96]	; (20000198 <_hook_cycle+0xf2>)
		
		return -osc_cosf(ps);
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000138:	ee38 8a28 	vadd.f32	s16, s16, s17
2000013c:	f000 f88e 	bl	2000025c <_ZN3VPS16MultiPhaseShaperEf>
		*phi -= (uint32_t)*phi;
20000140:	eefc 7ac8 	vcvt.u32.f32	s15, s16
20000144:	eeb4 0aea 	vcmpe.f32	s0, s21
20000148:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000014c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000150:	ee38 8a67 	vsub.f32	s16, s16, s15
20000154:	db07      	blt.n	20000166 <_hook_cycle+0xc0>
20000156:	eeb4 0ac9 	vcmpe.f32	s0, s18
2000015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000015e:	bfa8      	it	ge
20000160:	eeb0 0a49 	vmovge.f32	s0, s18
20000164:	e001      	b.n	2000016a <_hook_cycle+0xc4>
20000166:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
2000016a:	ee60 7a00 	vmul.f32	s15, s0, s0
2000016e:	ee60 7a67 	vnmul.f32	s15, s0, s15
20000172:	eea7 0a8a 	vfma.f32	s0, s15, s20
20000176:	ee20 0a29 	vmul.f32	s0, s0, s19
2000017a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2000017e:	eca5 0a01 	vstmia	r5!, {s0}
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000182:	e7d4      	b.n	2000012e <_hook_cycle+0x88>
		*(y++) = f32_to_q31(sig); 
	
	}
	
	// Update global osc phase
	s.phi = phi;
20000184:	ed84 8a00 	vstr	s16, [r4]
	
}
20000188:	ecbd 8b06 	vpop	{d8-d10}
2000018c:	bd70      	pop	{r4, r5, r6, pc}
2000018e:	bf00      	nop
20000190:	3b808081 	.word	0x3b808081
20000194:	0800f100 	.word	0x0800f100
20000198:	20000390 	.word	0x20000390
2000019c:	3d4ccccd 	.word	0x3d4ccccd
200001a0:	4f000000 	.word	0x4f000000
200001a4:	46b8ff49 	.word	0x46b8ff49
200001a8:	37aec33e 	.word	0x37aec33e

200001ac <_hook_on>:
200001ac:	4770      	bx	lr

200001ae <_hook_off>:
void OSC_NOTEON(const user_osc_param_t *const params) {
	// Not used
	(void)params;
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
200001ae:	4770      	bx	lr

200001b0 <_hook_param>:

void OSC_PARAM(uint16_t index, uint16_t value) { 

	VPS::Params &p = vps.params;
	
	const float valf = param_val_to_f32(value);
200001b0:	ee07 1a90 	vmov	s15, r1
200001b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float step = 0.5f;
	switch (index) {
200001b8:	2806      	cmp	r0, #6
200001ba:	d840      	bhi.n	2000023e <_hook_param+0x8e>
200001bc:	e8df f000 	tbb	[pc, r0]
200001c0:	1e140c04 	.word	0x1e140c04
200001c4:	3026      	.short	0x3026
200001c6:	38          	.byte	0x38
200001c7:	00          	.byte	0x00
		case k_user_osc_param_id1:  				// User parameter 1
			// Set Values for Inflection Point 1: x-axis
			p.x0 = value * 0.003f; 					// scale in [0-0.3]
200001c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 20000240 <_hook_param+0x90>
200001cc:	4b1d      	ldr	r3, [pc, #116]	; (20000244 <_hook_param+0x94>)
200001ce:	ee67 7a87 	vmul.f32	s15, s15, s14
200001d2:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
200001d6:	4770      	bx	lr
			
		case k_user_osc_param_id2:					// User parameter 2
			// Set Values for Inflection Point 1: y-axis
			p.y0 = value * 0.01f;
200001d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 20000248 <_hook_param+0x98>
200001dc:	4b19      	ldr	r3, [pc, #100]	; (20000244 <_hook_param+0x94>)
200001de:	ee67 7a87 	vmul.f32	s15, s15, s14
200001e2:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
200001e6:	4770      	bx	lr
			
		case k_user_osc_param_id3:  				// User parameter 3
			// Set Values for Inflection Point 2: x-axis
			p.x1 = 0.3f + (value * 0.003f); 		// scale in [0.3-0.6]
200001e8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 2000024c <_hook_param+0x9c>
200001ec:	eddf 6a14 	vldr	s13, [pc, #80]	; 20000240 <_hook_param+0x90>
200001f0:	4b14      	ldr	r3, [pc, #80]	; (20000244 <_hook_param+0x94>)
200001f2:	eea7 7aa6 	vfma.f32	s14, s15, s13
200001f6:	ed83 7a04 	vstr	s14, [r3, #16]
			break;
200001fa:	4770      	bx	lr
			
		case k_user_osc_param_id4:					// User parameter 4
			// Set Values for Inflection Point 2: y-axis
			p.y1 = value * 0.01f;
200001fc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 20000248 <_hook_param+0x98>
20000200:	4b10      	ldr	r3, [pc, #64]	; (20000244 <_hook_param+0x94>)
20000202:	ee67 7a87 	vmul.f32	s15, s15, s14
20000206:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
2000020a:	4770      	bx	lr
			
		case k_user_osc_param_id5:  				// User parameter 5
			// Set Values for Inflection Point 3: x-axis
			p.x2 = 0.6f + (value * 0.004f);			// scale in [0.6-1.0]
2000020c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 20000250 <_hook_param+0xa0>
20000210:	eddf 6a10 	vldr	s13, [pc, #64]	; 20000254 <_hook_param+0xa4>
20000214:	4b0b      	ldr	r3, [pc, #44]	; (20000244 <_hook_param+0x94>)
20000216:	eea7 7aa6 	vfma.f32	s14, s15, s13
2000021a:	ed83 7a05 	vstr	s14, [r3, #20]
			break;
2000021e:	4770      	bx	lr
			
		case k_user_osc_param_id6:					// User parameter 6
			// Set Values for Inflection Point 3: y-axis
			p.y2 = value * 0.01f;
20000220:	ed9f 7a09 	vldr	s14, [pc, #36]	; 20000248 <_hook_param+0x98>
20000224:	4b07      	ldr	r3, [pc, #28]	; (20000244 <_hook_param+0x94>)
20000226:	ee67 7a87 	vmul.f32	s15, s15, s14
2000022a:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
2000022e:	4770      	bx	lr
			
		case k_user_osc_param_shape: 				// A knob
			// 10bit parameter
			p.shape = valf; 
20000230:	ed9f 7a09 	vldr	s14, [pc, #36]	; 20000258 <_hook_param+0xa8>
20000234:	4b03      	ldr	r3, [pc, #12]	; (20000244 <_hook_param+0x94>)
20000236:	ee67 7a87 	vmul.f32	s15, s15, s14
2000023a:	edc3 7a02 	vstr	s15, [r3, #8]
2000023e:	4770      	bx	lr
20000240:	3b449ba6 	.word	0x3b449ba6
20000244:	20000390 	.word	0x20000390
20000248:	3c23d70a 	.word	0x3c23d70a
2000024c:	3e99999a 	.word	0x3e99999a
20000250:	3f19999a 	.word	0x3f19999a
20000254:	3b83126f 	.word	0x3b83126f
20000258:	3a802008 	.word	0x3a802008

2000025c <_ZN3VPS16MultiPhaseShaperEf>:
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi) {
		float x0 = params.x0 * params.shape;
2000025c:	edd0 7a02 	vldr	s15, [r0, #8]
20000260:	edd0 6a03 	vldr	s13, [r0, #12]
		float y0 = params.y0 * params.shape;
20000264:	ed90 7a06 	vldr	s14, [r0, #24]
		float x1 = params.x1 * params.shape;
		float y1 = params.y1 * params.shape;
20000268:	ed90 5a07 	vldr	s10, [r0, #28]
		float x2 = params.x2 * params.shape;
2000026c:	ed90 6a05 	vldr	s12, [r0, #20]
		float y2 = params.y2 * params.shape;
20000270:	ed90 4a08 	vldr	s8, [r0, #32]
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi) {
		float x0 = params.x0 * params.shape;
20000274:	ee67 4aa6 	vmul.f32	s9, s15, s13
		float y0 = params.y0 * params.shape;
20000278:	ee27 7a87 	vmul.f32	s14, s15, s14
		float y1 = params.y1 * params.shape;
		float x2 = params.x2 * params.shape;
		float y2 = params.y2 * params.shape;
		
		float ps;
		if(phi < x0) {
2000027c:	eef4 4ac0 	vcmpe.f32	s9, s0
20000280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
  
	inline float MultiPhaseShaper(float phi) {
		float x0 = params.x0 * params.shape;
		float y0 = params.y0 * params.shape;
		float x1 = params.x1 * params.shape;
20000284:	edd0 6a04 	vldr	s13, [r0, #16]
		float y1 = params.y1 * params.shape;
		float x2 = params.x2 * params.shape;
		float y2 = params.y2 * params.shape;
		
		float ps;
		if(phi < x0) {
20000288:	dd04      	ble.n	20000294 <_ZN3VPS16MultiPhaseShaperEf+0x38>
			float fraction = phi / x0;
			ps = y0 * fraction;
2000028a:	eec0 7a24 	vdiv.f32	s15, s0, s9
2000028e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000292:	e037      	b.n	20000304 <_ZN3VPS16MultiPhaseShaperEf+0xa8>
	}
  
	inline float MultiPhaseShaper(float phi) {
		float x0 = params.x0 * params.shape;
		float y0 = params.y0 * params.shape;
		float x1 = params.x1 * params.shape;
20000294:	ee67 5aa6 	vmul.f32	s11, s15, s13
		float y1 = params.y1 * params.shape;
20000298:	ee27 5a85 	vmul.f32	s10, s15, s10
		
		float ps;
		if(phi < x0) {
			float fraction = phi / x0;
			ps = y0 * fraction;
		} else if(phi < x1){
2000029c:	eef4 5ac0 	vcmpe.f32	s11, s0
200002a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002a4:	dd0c      	ble.n	200002c0 <_ZN3VPS16MultiPhaseShaperEf+0x64>
			float factor = y1 - y0;
			float numerator = phi - x0;
			float denominator = x1 - x0;
			float fraction = numerator / denominator;
			ps = factor * fraction + y0;
200002a6:	ee30 0a64 	vsub.f32	s0, s0, s9
200002aa:	ee75 6ae4 	vsub.f32	s13, s11, s9
200002ae:	ee75 7a47 	vsub.f32	s15, s10, s14
200002b2:	ee80 6a26 	vdiv.f32	s12, s0, s13
200002b6:	eea7 7a86 	vfma.f32	s14, s15, s12
200002ba:	eef0 7a47 	vmov.f32	s15, s14
200002be:	e021      	b.n	20000304 <_ZN3VPS16MultiPhaseShaperEf+0xa8>
	inline float MultiPhaseShaper(float phi) {
		float x0 = params.x0 * params.shape;
		float y0 = params.y0 * params.shape;
		float x1 = params.x1 * params.shape;
		float y1 = params.y1 * params.shape;
		float x2 = params.x2 * params.shape;
200002c0:	ee67 6a86 	vmul.f32	s13, s15, s12
		float y2 = params.y2 * params.shape;
200002c4:	ee67 7a84 	vmul.f32	s15, s15, s8
			float factor = y1 - y0;
			float numerator = phi - x0;
			float denominator = x1 - x0;
			float fraction = numerator / denominator;
			ps = factor * fraction + y0;
		} else if(phi < x2) {
200002c8:	eef4 6ac0 	vcmpe.f32	s13, s0
200002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002d0:	dd0c      	ble.n	200002ec <_ZN3VPS16MultiPhaseShaperEf+0x90>
			float factor = y2 - y1;
			float numerator = phi - x1;
			float denominator = x2 - x1;
			float fraction = numerator / denominator;
			ps = factor * fraction + y1;
200002d2:	ee30 0a65 	vsub.f32	s0, s0, s11
200002d6:	ee76 6ae5 	vsub.f32	s13, s13, s11
200002da:	ee37 7ac5 	vsub.f32	s14, s15, s10
200002de:	eec0 7a26 	vdiv.f32	s15, s0, s13
200002e2:	eea7 5a27 	vfma.f32	s10, s14, s15
200002e6:	eef0 7a45 	vmov.f32	s15, s10
200002ea:	e00b      	b.n	20000304 <_ZN3VPS16MultiPhaseShaperEf+0xa8>
		} else {
			float factor = 1.f - y2;
			float numerator = phi - x2;
			float denominator = 1.f - x2;
			float fraction = numerator / denominator;
			ps = factor * fraction + y2;
200002ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200002f0:	ee30 0a66 	vsub.f32	s0, s0, s13
200002f4:	ee77 6a66 	vsub.f32	s13, s14, s13
200002f8:	ee37 6a67 	vsub.f32	s12, s14, s15
200002fc:	ee80 7a26 	vdiv.f32	s14, s0, s13
20000300:	eee6 7a07 	vfma.f32	s15, s12, s14
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000304:	4a17      	ldr	r2, [pc, #92]	; (20000364 <_ZN3VPS16MultiPhaseShaperEf+0x108>)
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000306:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
2000030a:	ee77 7a87 	vadd.f32	s15, s15, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000030e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000312:	eeb8 7a47 	vcvt.f32.u32	s14, s14
20000316:	ee77 7ac7 	vsub.f32	s15, s15, s14
2000031a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 20000368 <_ZN3VPS16MultiPhaseShaperEf+0x10c>
2000031e:	ee67 7a87 	vmul.f32	s15, s15, s14
    const uint32_t x0p = (uint32_t)x0f;
20000322:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000326:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000032a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000032e:	eb02 0083 	add.w	r0, r2, r3, lsl #2
20000332:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000334:	eeb8 7a47 	vcvt.f32.u32	s14, s14
20000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000033c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
20000340:	ed90 0a00 	vldr	s0, [r0]
20000344:	ee77 7ac7 	vsub.f32	s15, s15, s14
20000348:	ed93 7a00 	vldr	s14, [r3]
2000034c:	ee37 7a40 	vsub.f32	s14, s14, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
20000350:	297f      	cmp	r1, #127	; 0x7f
20000352:	eea7 0a87 	vfma.f32	s0, s15, s14
20000356:	bf88      	it	hi
20000358:	eeb1 0a40 	vneghi.f32	s0, s0
		}
		
		return -osc_cosf(ps);
	}
2000035c:	eeb1 0a40 	vneg.f32	s0, s0
20000360:	4770      	bx	lr
20000362:	bf00      	nop
20000364:	08012bdc 	.word	0x08012bdc
20000368:	43800000 	.word	0x43800000

2000036c <_GLOBAL__sub_I__hook_init>:
	struct State {
		float   phi; 		// Oscillator phase
		float   w0;			// Oscillator pitch
		State(void) :
			phi(ZEROF),
			w0(ZEROF)
2000036c:	4b06      	ldr	r3, [pc, #24]	; (20000388 <_GLOBAL__sub_I__hook_init+0x1c>)
2000036e:	2200      	movs	r2, #0
20000370:	601a      	str	r2, [r3, #0]
20000372:	605a      	str	r2, [r3, #4]
		{}
	};

	VPS(void) {
		state = State();
		params = Params();
20000374:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
20000378:	609a      	str	r2, [r3, #8]
2000037a:	60da      	str	r2, [r3, #12]
2000037c:	611a      	str	r2, [r3, #16]
2000037e:	615a      	str	r2, [r3, #20]
20000380:	619a      	str	r2, [r3, #24]
20000382:	61da      	str	r2, [r3, #28]
20000384:	621a      	str	r2, [r3, #32]
20000386:	4770      	bx	lr
20000388:	20000390 	.word	0x20000390
