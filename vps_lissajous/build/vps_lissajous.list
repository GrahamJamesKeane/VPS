
build/vps_lissajous.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	200003f7 	.word	0x200003f7
20000098:	20000423 	.word	0x20000423
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "vps_lissajous.hpp"

static VPSLJ vpsLJ;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000a6:	b570      	push	{r4, r5, r6, lr}
	// Create local copies of the state and params objects.
	VPSLJ::State &s = vpsLJ.state;
	const VPSLJ::Params &p = vpsLJ.params;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000a8:	8884      	ldrh	r4, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000aa:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 200001e4 <_hook_cycle+0x13e>
200000ae:	1223      	asrs	r3, r4, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000b0:	2b96      	cmp	r3, #150	; 0x96
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000b2:	460d      	mov	r5, r1
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000b4:	b2e1      	uxtb	r1, r4
200000b6:	bfd8      	it	le
200000b8:	461c      	movle	r4, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000ba:	f103 0301 	add.w	r3, r3, #1
200000be:	b2db      	uxtb	r3, r3
200000c0:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000c4:	bfc8      	it	gt
200000c6:	2497      	movgt	r4, #151	; 0x97
200000c8:	4947      	ldr	r1, [pc, #284]	; (200001e8 <_hook_cycle+0x142>)
200000ca:	2b96      	cmp	r3, #150	; 0x96
200000cc:	bf88      	it	hi
200000ce:	2397      	movhi	r3, #151	; 0x97
200000d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
200000d8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000dc:	ed2d 8b08 	vpush	{d8-d11}
200000e0:	ee67 7a87 	vmul.f32	s15, s15, s14
200000e4:	edd4 8a00 	vldr	s17, [r4]
200000e8:	ed93 7a00 	vldr	s14, [r3]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ec:	4b3f      	ldr	r3, [pc, #252]	; (200001ec <_hook_cycle+0x146>)
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000ee:	eddf aa40 	vldr	s21, [pc, #256]	; 200001f0 <_hook_cycle+0x14a>
	float *Phi = &phi;
	
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
	float lfo1_last = s.lfo1_last;
200000f2:	ed93 9a04 	vldr	s18, [r3, #16]
	float lfo2_last = s.lfo2_last;
200000f6:	edd3 9a05 	vldr	s19, [r3, #20]
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
	
	// Local copies of the state object fields.
	float phi = s.phi;
200000fa:	ed93 8a00 	vldr	s16, [r3]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000fe:	ed9f aa3d 	vldr	s20, [pc, #244]	; 200001f4 <_hook_cycle+0x14e>
20000102:	ee37 7a68 	vsub.f32	s14, s14, s17
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
	float lfo1_last = s.lfo1_last;
	float lfo2_last = s.lfo2_last;
	const float lfo_inc_1 = (lfo1 - lfo1_last) / frames;
20000106:	ee06 2a90 	vmov	s13, r2
2000010a:	eee7 8a87 	vfma.f32	s17, s15, s14
	const float lfo_inc_2 = (lfo2 - lfo2_last) / frames;
	
	
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer
2000010e:	eb05 0682 	add.w	r6, r5, r2, lsl #2
20000112:	461c      	mov	r4, r3

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000114:	eddf 7a38 	vldr	s15, [pc, #224]	; 200001f8 <_hook_cycle+0x152>
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
20000118:	ed90 7a00 	vldr	s14, [r0]
2000011c:	eef4 8ae7 	vcmpe.f32	s17, s15
20000120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000124:	bfb8      	it	lt
20000126:	eef0 7a68 	vmovlt.f32	s15, s17
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000012a:	eddf 8a34 	vldr	s17, [pc, #208]	; 200001fc <_hook_cycle+0x156>
2000012e:	ee67 8aa8 	vmul.f32	s17, s15, s17
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
20000132:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
20000136:	edc3 8a01 	vstr	s17, [r3, #4]
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
2000013a:	eeba 7ae0 	vcvt.f32.s32	s14, s14, #31
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
2000013e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float lfo1_last = s.lfo1_last;
	float lfo2_last = s.lfo2_last;
	const float lfo_inc_1 = (lfo1 - lfo1_last) / frames;
20000142:	eef8 6a66 	vcvt.f32.u32	s13, s13
	float phi = s.phi;
	float *Phi = &phi;
	
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
20000146:	ee67 7a87 	vmul.f32	s15, s15, s14
	// Local copies of the state object fields.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
2000014a:	ed83 7a02 	vstr	s14, [r3, #8]
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
2000014e:	edc3 7a03 	vstr	s15, [r3, #12]
	float lfo1_last = s.lfo1_last;
	float lfo2_last = s.lfo2_last;
	const float lfo_inc_1 = (lfo1 - lfo1_last) / frames;
20000152:	ee37 7a49 	vsub.f32	s14, s14, s18
	const float lfo_inc_2 = (lfo2 - lfo2_last) / frames;
20000156:	ee77 7ae9 	vsub.f32	s15, s15, s19
	// Local copies of LFO states
	float lfo1 = s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo2 = s.lfo2 = lfo1 * p.freq_shift;
	float lfo1_last = s.lfo1_last;
	float lfo2_last = s.lfo2_last;
	const float lfo_inc_1 = (lfo1 - lfo1_last) / frames;
2000015a:	ee87 ba26 	vdiv.f32	s22, s14, s13
	const float lfo_inc_2 = (lfo2 - lfo2_last) / frames;
2000015e:	eec7 baa6 	vdiv.f32	s23, s15, s13
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000162:	42b5      	cmp	r5, r6
20000164:	d034      	beq.n	200001d0 <_hook_cycle+0x12a>
		float sig = 0.f;
		
		sig = vpsLJ.PhaseShaper(phi, lfo1_last, lfo2_last);
20000166:	4821      	ldr	r0, [pc, #132]	; (200001ec <_hook_cycle+0x146>)
20000168:	eeb0 1a69 	vmov.f32	s2, s19
2000016c:	eef0 0a49 	vmov.f32	s1, s18
20000170:	eeb0 0a48 	vmov.f32	s0, s16
20000174:	f000 f86a 	bl	2000024c <_ZN5VPSLJ11PhaseShaperEfff>
		
		return -osc_cosf(ps);
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000178:	ee38 8a28 	vadd.f32	s16, s16, s17
		
		// Update local LFO phases
		lfo1_last += lfo_inc_1;
2000017c:	ee39 9a0b 	vadd.f32	s18, s18, s22
		*phi -= (uint32_t)*phi;
20000180:	eefc 7ac8 	vcvt.u32.f32	s15, s16
		lfo2_last += lfo_inc_2;
20000184:	ee79 9aab 	vadd.f32	s19, s19, s23
20000188:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000018c:	ee38 8a67 	vsub.f32	s16, s16, s15
20000190:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
20000194:	eeb4 0ae7 	vcmpe.f32	s0, s15
20000198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000019c:	db09      	blt.n	200001b2 <_hook_cycle+0x10c>
2000019e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200001a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
200001a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001aa:	bfa8      	it	ge
200001ac:	eeb0 0a67 	vmovge.f32	s0, s15
200001b0:	e001      	b.n	200001b6 <_hook_cycle+0x110>
200001b2:	eeb0 0a67 	vmov.f32	s0, s15
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200001b6:	ee60 7a00 	vmul.f32	s15, s0, s0
200001ba:	ee60 7a67 	vnmul.f32	s15, s0, s15
200001be:	eea7 0aaa 	vfma.f32	s0, s15, s21
200001c2:	ee20 0a0a 	vmul.f32	s0, s0, s20
200001c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
200001ca:	eca5 0a01 	vstmia	r5!, {s0}
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
200001ce:	e7c8      	b.n	20000162 <_hook_cycle+0xbc>
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
	}
	
	// Update global osc phase
	s.phi = phi;
200001d0:	ed84 8a00 	vstr	s16, [r4]
	
	// Update local LFO phases
	s.lfo1_last = lfo1_last;
200001d4:	ed84 9a04 	vstr	s18, [r4, #16]
	s.lfo2_last = lfo1_last;
200001d8:	ed84 9a05 	vstr	s18, [r4, #20]
	
}
200001dc:	ecbd 8b08 	vpop	{d8-d11}
200001e0:	bd70      	pop	{r4, r5, r6, pc}
200001e2:	bf00      	nop
200001e4:	3b808081 	.word	0x3b808081
200001e8:	0800f100 	.word	0x0800f100
200001ec:	200003f8 	.word	0x200003f8
200001f0:	3d4ccccd 	.word	0x3d4ccccd
200001f4:	4f000000 	.word	0x4f000000
200001f8:	46b8ff49 	.word	0x46b8ff49
200001fc:	37aec33e 	.word	0x37aec33e

20000200 <_hook_on>:
20000200:	4770      	bx	lr

20000202 <_hook_off>:
void OSC_NOTEON(const user_osc_param_t *const params) {
	// Not used
	(void)params;
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
20000202:	4770      	bx	lr

20000204 <_hook_param>:

void OSC_PARAM(uint16_t index, uint16_t value) { 

	VPSLJ::Params &p = vpsLJ.params;

	const float valf = param_val_to_f32(value);
20000204:	ee07 1a90 	vmov	s15, r1
	switch (index) {
20000208:	2801      	cmp	r0, #1

void OSC_PARAM(uint16_t index, uint16_t value) { 

	VPSLJ::Params &p = vpsLJ.params;

	const float valf = param_val_to_f32(value);
2000020a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	switch (index) {
2000020e:	d00b      	beq.n	20000228 <_hook_param+0x24>
20000210:	d302      	bcc.n	20000218 <_hook_param+0x14>
20000212:	2802      	cmp	r0, #2
20000214:	d010      	beq.n	20000238 <_hook_param+0x34>
20000216:	4770      	bx	lr
		case k_user_osc_param_id1:  		// User parameter 1
			// Set values for d amplitude
			p.Amp_d = value * 0.01f;
20000218:	ed9f 7a09 	vldr	s14, [pc, #36]	; 20000240 <_hook_param+0x3c>
2000021c:	4b09      	ldr	r3, [pc, #36]	; (20000244 <_hook_param+0x40>)
2000021e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000222:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
20000226:	4770      	bx	lr
			
		case k_user_osc_param_id2:			// User parameter 2
			// Set values for v amplitude
			p.Amp_v = value * 0.05f;
20000228:	ed9f 7a07 	vldr	s14, [pc, #28]	; 20000248 <_hook_param+0x44>
2000022c:	4b05      	ldr	r3, [pc, #20]	; (20000244 <_hook_param+0x40>)
2000022e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000232:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			break;
20000236:	4770      	bx	lr
			
		case k_user_osc_param_id3:  		// User parameter 3
			// Set frequency scaling for LFO 2
			p.freq_shift = value;
20000238:	4b02      	ldr	r3, [pc, #8]	; (20000244 <_hook_param+0x40>)
2000023a:	6299      	str	r1, [r3, #40]	; 0x28
2000023c:	4770      	bx	lr
2000023e:	bf00      	nop
20000240:	3c23d70a 	.word	0x3c23d70a
20000244:	200003f8 	.word	0x200003f8
20000248:	3d4ccccd 	.word	0x3d4ccccd

2000024c <_ZN5VPSLJ11PhaseShaperEfff>:
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000024c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
20000250:	ee70 0a87 	vadd.f32	s1, s1, s14
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000254:	4b5b      	ldr	r3, [pc, #364]	; (200003c4 <_ZN5VPSLJ11PhaseShaperEfff+0x178>)
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000256:	ee70 0a87 	vadd.f32	s1, s1, s14
	VPSLJ(void) {
		state = State();
		params = Params();
	}
	
	inline float PhaseShaper(float phi, float lfo1_last, float lfo2_last) {
2000025a:	b510      	push	{r4, lr}
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000025c:	eefc 7ae0 	vcvt.u32.f32	s15, s1
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000260:	ee31 1a07 	vadd.f32	s2, s2, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000264:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000268:	ee70 0ae7 	vsub.f32	s1, s1, s15
2000026c:	eddf 7a56 	vldr	s15, [pc, #344]	; 200003c8 <_ZN5VPSLJ11PhaseShaperEfff+0x17c>
20000270:	ee60 0aa7 	vmul.f32	s1, s1, s15
20000274:	eeb0 5a67 	vmov.f32	s10, s15
    const uint32_t x0p = (uint32_t)x0f;
20000278:	eefc 6ae0 	vcvt.u32.f32	s13, s1
2000027c:	ee16 1a90 	vmov	r1, s13

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000280:	f001 027f 	and.w	r2, r1, #127	; 0x7f

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000284:	ee06 1a10 	vmov	s12, r1
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000288:	eb03 0482 	add.w	r4, r3, r2, lsl #2
2000028c:	3201      	adds	r2, #1
2000028e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
20000292:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20000296:	eb03 0282 	add.w	r2, r3, r2, lsl #2
2000029a:	edd4 6a00 	vldr	s13, [r4]
2000029e:	ee70 0ac6 	vsub.f32	s1, s1, s12
200002a2:	ed92 6a00 	vldr	s12, [r2]
200002a6:	ee36 6a66 	vsub.f32	s12, s12, s13
    return (x0p < k_wt_sine_size)?y0:-y0;
200002aa:	297f      	cmp	r1, #127	; 0x7f
200002ac:	eee0 6a86 	vfma.f32	s13, s1, s12
		
		float w0_D = lfo1_last + 0.25f; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
200002b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
200002b4:	bf88      	it	hi
200002b6:	eef1 6a66 	vneghi.f32	s13, s13
200002ba:	eef0 7a46 	vmov.f32	s15, s12
200002be:	eee6 7a86 	vfma.f32	s15, s13, s12
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
200002c2:	edd0 6a06 	vldr	s13, [r0, #24]
		state.sigD_last = Osc_d;
200002c6:	edc0 7a06 	vstr	s15, [r0, #24]
	
	inline float PhaseShaper(float phi, float lfo1_last, float lfo2_last) {
		
		float w0_D = lfo1_last + 0.25f; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
200002ca:	ee77 5ae6 	vsub.f32	s11, s15, s13
200002ce:	eee0 6a25 	vfma.f32	s13, s0, s11
200002d2:	edd0 5a08 	vldr	s11, [r0, #32]
200002d6:	ee66 6aa5 	vmul.f32	s13, s13, s11
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200002da:	eefc 5ac1 	vcvt.u32.f32	s11, s2
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
		state.sigV_last = Osc_v;
		
		float ps;
		if(phi < d) {
200002de:	eeb4 0ae6 	vcmpe.f32	s0, s13
200002e2:	eef8 5a65 	vcvt.f32.u32	s11, s11
200002e6:	ee31 1a65 	vsub.f32	s2, s2, s11
200002ea:	ee21 1a05 	vmul.f32	s2, s2, s10
    const uint32_t x0p = (uint32_t)x0f;
200002ee:	eefc 7ac1 	vcvt.u32.f32	s15, s2
200002f2:	ee17 1a90 	vmov	r1, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
200002f6:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200002fa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
200002fe:	3201      	adds	r2, #1
20000300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20000304:	eb03 0282 	add.w	r2, r3, r2, lsl #2
20000308:	edd4 5a00 	vldr	s11, [r4]
2000030c:	edd2 4a00 	vldr	s9, [r2]
20000310:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000314:	ee74 4ae5 	vsub.f32	s9, s9, s11
20000318:	ee31 1a67 	vsub.f32	s2, s2, s15
    return (x0p < k_wt_sine_size)?y0:-y0;
2000031c:	297f      	cmp	r1, #127	; 0x7f
2000031e:	eee1 5a24 	vfma.f32	s11, s2, s9
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
20000322:	edd0 7a07 	vldr	s15, [r0, #28]
20000326:	bf88      	it	hi
20000328:	eef1 5a65 	vneghi.f32	s11, s11
		float w0_D = lfo1_last + 0.25f; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
2000032c:	eea5 6a86 	vfma.f32	s12, s11, s12
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
		state.sigV_last = Osc_v;
		
		float ps;
		if(phi < d) {
20000330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
20000334:	ee76 5a67 	vsub.f32	s11, s12, s15
		state.sigV_last = Osc_v;
20000338:	ed80 6a07 	vstr	s12, [r0, #28]
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
2000033c:	eee0 7a25 	vfma.f32	s15, s0, s11
			ps = v * fraction;
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction + v;
20000340:	bf58      	it	pl
20000342:	eeb7 6a00 	vmovpl.f32	s12, #112	; 0x3f800000  1.0
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
20000346:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
			ps = v * fraction;
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction + v;
2000034a:	bf5c      	itt	pl
2000034c:	ee30 0a66 	vsubpl.f32	s0, s0, s13
20000350:	ee76 6a66 	vsubpl.f32	s13, s12, s13
		float Osc_d = 0.5f + 0.5f * osc_cosf(w0_D);
		float d = params.Amp_d * linintf(phi, state.sigD_last, Osc_d);
		state.sigD_last = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(lfo2_last);
		float v = params.Amp_v * linintf(phi, state.sigV_last, Osc_v);
20000354:	ee67 7aa5 	vmul.f32	s15, s15, s11
			ps = v * fraction;
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction + v;
20000358:	bf55      	itete	pl
2000035a:	eec0 5a26 	vdivpl.f32	s11, s0, s13
		state.sigV_last = Osc_v;
		
		float ps;
		if(phi < d) {
			float fraction = phi / d;
			ps = v * fraction;
2000035e:	ee80 6a26 	vdivmi.f32	s12, s0, s13
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction + v;
20000362:	ee36 6a67 	vsubpl.f32	s12, s12, s15
		state.sigV_last = Osc_v;
		
		float ps;
		if(phi < d) {
			float fraction = phi / d;
			ps = v * fraction;
20000366:	ee66 7a27 	vmulmi.f32	s15, s12, s15
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction + v;
2000036a:	bf58      	it	pl
2000036c:	eee5 7a86 	vfmapl.f32	s15, s11, s12
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000370:	ee37 7a87 	vadd.f32	s14, s15, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000374:	eefc 7ac7 	vcvt.u32.f32	s15, s14
20000378:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000037c:	ee37 7a67 	vsub.f32	s14, s14, s15
20000380:	ee67 7a05 	vmul.f32	s15, s14, s10
    const uint32_t x0p = (uint32_t)x0f;
20000384:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000388:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000038c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000390:	eb03 0082 	add.w	r0, r3, r2, lsl #2
20000394:	3201      	adds	r2, #1
20000396:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000039a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2000039e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
200003a2:	ed90 0a00 	vldr	s0, [r0]
200003a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
200003aa:	ed93 7a00 	vldr	s14, [r3]
200003ae:	ee37 7a40 	vsub.f32	s14, s14, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
200003b2:	297f      	cmp	r1, #127	; 0x7f
200003b4:	eea7 0a87 	vfma.f32	s0, s15, s14
200003b8:	bf88      	it	hi
200003ba:	eeb1 0a40 	vneghi.f32	s0, s0
		}
		
		return -osc_cosf(ps);
	}
200003be:	eeb1 0a40 	vneg.f32	s0, s0
200003c2:	bd10      	pop	{r4, pc}
200003c4:	08012bdc 	.word	0x08012bdc
200003c8:	43800000 	.word	0x43800000

200003cc <_GLOBAL__sub_I__hook_init>:
		uint32_t 	freq_shift;	// Frequency shift of LFO 2
		
		Params(void) :
			Amp_d(ONEF),
			Amp_v(ONEF),
			freq_shift(ONEF)
200003cc:	4b08      	ldr	r3, [pc, #32]	; (200003f0 <_GLOBAL__sub_I__hook_init+0x24>)
200003ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
200003d2:	621a      	str	r2, [r3, #32]
200003d4:	625a      	str	r2, [r3, #36]	; 0x24
200003d6:	2201      	movs	r2, #1
200003d8:	629a      	str	r2, [r3, #40]	; 0x28
			sigV_last(ZEROF)
		{}
	};

	VPSLJ(void) {
		state = State();
200003da:	2200      	movs	r2, #0
200003dc:	601a      	str	r2, [r3, #0]
200003de:	605a      	str	r2, [r3, #4]
200003e0:	609a      	str	r2, [r3, #8]
200003e2:	60da      	str	r2, [r3, #12]
200003e4:	611a      	str	r2, [r3, #16]
200003e6:	615a      	str	r2, [r3, #20]
200003e8:	619a      	str	r2, [r3, #24]
200003ea:	61da      	str	r2, [r3, #28]
200003ec:	4770      	bx	lr
200003ee:	bf00      	nop
200003f0:	200003f8 	.word	0x200003f8
