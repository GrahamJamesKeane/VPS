
build/mvps2D.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	20000487 	.word	0x20000487
20000098:	200004bf 	.word	0x200004bf
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "mvps2D.hpp"

static MVPS2D mvps2D;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200000a8:	460d      	mov	r5, r1
	// Local copy of the state object.
	MVPS2D::State &s = mvps2D.state;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000aa:	8881      	ldrh	r1, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000ac:	ed9f 7a60 	vldr	s14, [pc, #384]	; 20000230 <_hook_cycle+0x18a>
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200000b0:	4e60      	ldr	r6, [pc, #384]	; (20000234 <_hook_cycle+0x18e>)
200000b2:	120b      	asrs	r3, r1, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000b4:	2b96      	cmp	r3, #150	; 0x96
200000b6:	bfd8      	it	le
200000b8:	461c      	movle	r4, r3
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ba:	b2c9      	uxtb	r1, r1
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000bc:	f103 0301 	add.w	r3, r3, #1
200000c0:	b2db      	uxtb	r3, r3
200000c2:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000c6:	bfc8      	it	gt
200000c8:	2497      	movgt	r4, #151	; 0x97
200000ca:	495b      	ldr	r1, [pc, #364]	; (20000238 <_hook_cycle+0x192>)
200000cc:	2b96      	cmp	r3, #150	; 0x96
200000ce:	bf88      	it	hi
200000d0:	2397      	movhi	r3, #151	; 0x97
200000d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000d6:	eb01 0484 	add.w	r4, r1, r4, lsl #2
200000da:	eb01 0383 	add.w	r3, r1, r3, lsl #2
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000de:	ed2d 8b0c 	vpush	{d8-d13}
200000e2:	ee67 7a87 	vmul.f32	s15, s15, s14
200000e6:	ed94 9a00 	vldr	s18, [r4]
200000ea:	ed93 7a00 	vldr	s14, [r3]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ee:	4b53      	ldr	r3, [pc, #332]	; (2000023c <_hook_cycle+0x196>)
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200000f0:	ed9f da53 	vldr	s26, [pc, #332]	; 20000240 <_hook_cycle+0x19a>
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo1_last = s.lfo1_last;
200000f4:	edd3 9a03 	vldr	s19, [r3, #12]
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
	
	// Local copies of the state object fields.
	float phi 	= s.phi;
200000f8:	edd3 8a00 	vldr	s17, [r3]
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
	
	// LFO2
	float w0_lfo2 	= s.w0_lfo2;
200000fc:	ed93 ca04 	vldr	s24, [r3, #16]
	float phi_lfo2 	= s.phi_lfo2;
20000100:	ed93 8a05 	vldr	s16, [r3, #20]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000104:	ed9f ba4f 	vldr	s22, [pc, #316]	; 20000244 <_hook_cycle+0x19e>
20000108:	eddf aa4f 	vldr	s21, [pc, #316]	; 20000248 <_hook_cycle+0x1a2>
2000010c:	ee37 7a49 	vsub.f32	s14, s14, s18
	float phi_lfo2 	= s.phi_lfo2;
	float *ptrLFO2 	= &phi_lfo2;
	
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer
20000110:	eb05 0782 	add.w	r7, r5, r2, lsl #2
20000114:	eea7 9a87 	vfma.f32	s18, s15, s14
20000118:	461c      	mov	r4, r3

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
2000011a:	eddf 7a4c 	vldr	s15, [pc, #304]	; 2000024c <_hook_cycle+0x1a6>
2000011e:	eeb4 9ae7 	vcmpe.f32	s18, s15
20000122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000126:	bfa8      	it	ge
20000128:	eeb0 9a67 	vmovge.f32	s18, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000012c:	eddf 7a48 	vldr	s15, [pc, #288]	; 20000250 <_hook_cycle+0x1aa>
20000130:	ee29 9a27 	vmul.f32	s18, s18, s15
	// Local copies of the state object fields.
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
20000134:	edd0 7a00 	vldr	s15, [r0]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
20000138:	ed83 9a01 	vstr	s18, [r3, #4]
	// Local copies of the state object fields.
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
2000013c:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
20000140:	ee07 2a10 	vmov	s14, r2
	// Local copies of the state object fields.
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
20000144:	edc3 7a02 	vstr	s15, [r3, #8]
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
20000148:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000014c:	ee77 7ae9 	vsub.f32	s15, s15, s19
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000150:	eef5 ca00 	vmov.f32	s25, #80	; 0x3e800000  0.250
20000154:	eec7 ba87 	vdiv.f32	s23, s15, s14
20000158:	eeff da00 	vmov.f32	s27, #240	; 0xbf800000 -1.0
2000015c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000160:	42bd      	cmp	r5, r7
20000162:	d05b      	beq.n	2000021c <_hook_cycle+0x176>
20000164:	ee38 7a2c 	vadd.f32	s14, s16, s25
		float sig = 0.f;
		
		float lfo2 = osc_cosf(phi_lfo2);
		
		sig = mvps2D.MultiPhaseShaper(phi, lfo1_last, lfo2);
20000168:	eeb0 0a68 	vmov.f32	s0, s17
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000016c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
		
		return -osc_cosf(ps);
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000170:	ee78 8a89 	vadd.f32	s17, s17, s18
20000174:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000178:	eef0 0a69 	vmov.f32	s1, s19
2000017c:	ee77 7a67 	vsub.f32	s15, s14, s15
20000180:	482e      	ldr	r0, [pc, #184]	; (2000023c <_hook_cycle+0x196>)
20000182:	ee67 7a8d 	vmul.f32	s15, s15, s26
20000186:	ee3c 8a08 	vadd.f32	s16, s24, s16
    const uint32_t x0p = (uint32_t)x0f;
2000018a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
		// Update local phases
		mvps2D.updatePhase(Phi, w0);
		mvps2D.updatePhase(ptrLFO2, w0_lfo2);
		
		// Update LFO1
		lfo1_last += lfo1_inc;
2000018e:	ee79 9aab 	vadd.f32	s19, s19, s23
20000192:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000196:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000019a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
2000019e:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200001a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200001a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
200001ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
200001b0:	ed92 1a00 	vldr	s2, [r2]
200001b4:	ed93 7a00 	vldr	s14, [r3]
200001b8:	ee37 7a41 	vsub.f32	s14, s14, s2
    return (x0p < k_wt_sine_size)?y0:-y0;
200001bc:	297f      	cmp	r1, #127	; 0x7f
200001be:	eea7 1a87 	vfma.f32	s2, s15, s14
200001c2:	bf88      	it	hi
200001c4:	eeb1 1a41 	vneghi.f32	s2, s2
	for (; y != y_e; ) { 
		float sig = 0.f;
		
		float lfo2 = osc_cosf(phi_lfo2);
		
		sig = mvps2D.MultiPhaseShaper(phi, lfo1_last, lfo2);
200001c8:	f000 f8c0 	bl	2000034c <_ZN6MVPS2D16MultiPhaseShaperEfff>
		*phi -= (uint32_t)*phi;
200001cc:	eefc 7ae8 	vcvt.u32.f32	s15, s17

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200001d0:	eeb4 0aed 	vcmpe.f32	s0, s27
200001d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001dc:	ee78 8ae7 	vsub.f32	s17, s17, s15
200001e0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
200001e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001e8:	ee38 8a67 	vsub.f32	s16, s16, s15
200001ec:	db07      	blt.n	200001fe <_hook_cycle+0x158>
200001ee:	eeb4 0aca 	vcmpe.f32	s0, s20
200001f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001f6:	bfa8      	it	ge
200001f8:	eeb0 0a4a 	vmovge.f32	s0, s20
200001fc:	e001      	b.n	20000202 <_hook_cycle+0x15c>
200001fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000202:	ee60 7a00 	vmul.f32	s15, s0, s0
20000206:	ee60 7a67 	vnmul.f32	s15, s0, s15
2000020a:	eea7 0a8b 	vfma.f32	s0, s15, s22
2000020e:	ee20 0a2a 	vmul.f32	s0, s0, s21
20000212:	eebd 0ac0 	vcvt.s32.f32	s0, s0
20000216:	eca5 0a01 	vstmia	r5!, {s0}
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000021a:	e7a1      	b.n	20000160 <_hook_cycle+0xba>
		*(y++) = f32_to_q31(sig); 
	
	}
	
	// Update global values
	s.phi 		= phi;
2000021c:	edc4 8a00 	vstr	s17, [r4]
	s.phi_lfo2 	= phi_lfo2;
20000220:	ed84 8a05 	vstr	s16, [r4, #20]
	s.lfo1_last = lfo1_last;
20000224:	edc4 9a03 	vstr	s19, [r4, #12]
}
20000228:	ecbd 8b0c 	vpop	{d8-d13}
2000022c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000022e:	bf00      	nop
20000230:	3b808081 	.word	0x3b808081
20000234:	08012bdc 	.word	0x08012bdc
20000238:	0800f100 	.word	0x0800f100
2000023c:	20000488 	.word	0x20000488
20000240:	43800000 	.word	0x43800000
20000244:	3d4ccccd 	.word	0x3d4ccccd
20000248:	4f000000 	.word	0x4f000000
2000024c:	46b8ff49 	.word	0x46b8ff49
20000250:	37aec33e 	.word	0x37aec33e

20000254 <_hook_on>:
20000254:	4770      	bx	lr

20000256 <_hook_off>:
void OSC_NOTEON(const user_osc_param_t *const params) {
	// Not used	
	(void)params;
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
20000256:	4770      	bx	lr

20000258 <_hook_param>:
void OSC_PARAM(uint16_t index, uint16_t value) { 

	MVPS2D::Params &p = mvps2D.params;
	MVPS2D::State &s = mvps2D.state;
	
	const float valf = param_val_to_f32(value);
20000258:	ee07 1a90 	vmov	s15, r1
2000025c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 20000304 <_hook_param+0xac>
20000260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000264:	ee27 7a87 	vmul.f32	s14, s15, s14
	switch (index) {
20000268:	2807      	cmp	r0, #7
2000026a:	d84a      	bhi.n	20000302 <_hook_param+0xaa>
2000026c:	e8df f000 	tbb	[pc, r0]
20000270:	1e140c04 	.word	0x1e140c04
20000274:	3c383026 	.word	0x3c383026
		case k_user_osc_param_id1:  				// User parameter 1
			// Set Values for Inflection Point 1: d0
			p.d0 = value * 0.003f; 					// scale in [0-0.3]
20000278:	ed9f 7a23 	vldr	s14, [pc, #140]	; 20000308 <_hook_param+0xb0>
2000027c:	4b23      	ldr	r3, [pc, #140]	; (2000030c <_hook_param+0xb4>)
2000027e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000282:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
20000286:	4770      	bx	lr
			
		case k_user_osc_param_id2:					// User parameter 2
			// Set Values for Inflection Point 1: v0
			p.v0 = value * 0.01f;
20000288:	ed9f 7a21 	vldr	s14, [pc, #132]	; 20000310 <_hook_param+0xb8>
2000028c:	4b1f      	ldr	r3, [pc, #124]	; (2000030c <_hook_param+0xb4>)
2000028e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000292:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			break;
20000296:	4770      	bx	lr
			
		case k_user_osc_param_id3:  				// User parameter 3
			// Set Values for Inflection Point 2: d1
			p.d1 = 0.3f + (value * 0.003f); 		// scale in [0.3-0.6]
20000298:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 20000314 <_hook_param+0xbc>
2000029c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 20000308 <_hook_param+0xb0>
200002a0:	4b1a      	ldr	r3, [pc, #104]	; (2000030c <_hook_param+0xb4>)
200002a2:	eea7 7aa6 	vfma.f32	s14, s15, s13
200002a6:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
			break;
200002aa:	4770      	bx	lr
			
		case k_user_osc_param_id4:					// User parameter 4
			// Set Values for Inflection Point 2: v1
			p.v1 = value * 0.01f;
200002ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 20000310 <_hook_param+0xb8>
200002b0:	4b16      	ldr	r3, [pc, #88]	; (2000030c <_hook_param+0xb4>)
200002b2:	ee67 7a87 	vmul.f32	s15, s15, s14
200002b6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			break;
200002ba:	4770      	bx	lr
			
		case k_user_osc_param_id5:  				// User parameter 5
			// Set Values for Inflection Point 3: x2
			p.d2 = 0.6f + (value * 0.004f);			// scale in [0.6-1.0]
200002bc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 20000318 <_hook_param+0xc0>
200002c0:	eddf 6a16 	vldr	s13, [pc, #88]	; 2000031c <_hook_param+0xc4>
200002c4:	4b11      	ldr	r3, [pc, #68]	; (2000030c <_hook_param+0xb4>)
200002c6:	eea7 7aa6 	vfma.f32	s14, s15, s13
200002ca:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
			break;
200002ce:	4770      	bx	lr
			
		case k_user_osc_param_id6:					// User parameter 6
			// Set Values for Inflection Point 3: v2
			p.v2 = value * 0.01f;
200002d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 20000310 <_hook_param+0xb8>
200002d4:	4b0d      	ldr	r3, [pc, #52]	; (2000030c <_hook_param+0xb4>)
200002d6:	ee67 7a87 	vmul.f32	s15, s15, s14
200002da:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			break;
200002de:	4770      	bx	lr
			
		case k_user_osc_param_shape: 				// A knob
			// Scaling for d values
			p.shape = valf; 
200002e0:	4b0a      	ldr	r3, [pc, #40]	; (2000030c <_hook_param+0xb4>)
200002e2:	ed83 7a06 	vstr	s14, [r3, #24]
			break;
200002e6:	4770      	bx	lr
			
		case k_user_osc_param_shiftshape:			// B knob	
			// Scaling for v values
			p.shiftshape = valf; 
200002e8:	4b08      	ldr	r3, [pc, #32]	; (2000030c <_hook_param+0xb4>)
200002ea:	ed83 7a07 	vstr	s14, [r3, #28]
			s.w0_lfo2 = value * 0.03f * k_samplerate_recipf;
200002ee:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 20000320 <_hook_param+0xc8>
200002f2:	ee67 7a87 	vmul.f32	s15, s15, s14
200002f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 20000324 <_hook_param+0xcc>
200002fa:	ee67 7a87 	vmul.f32	s15, s15, s14
200002fe:	edc3 7a04 	vstr	s15, [r3, #16]
20000302:	4770      	bx	lr
20000304:	3a802008 	.word	0x3a802008
20000308:	3b449ba6 	.word	0x3b449ba6
2000030c:	20000488 	.word	0x20000488
20000310:	3c23d70a 	.word	0x3c23d70a
20000314:	3e99999a 	.word	0x3e99999a
20000318:	3f19999a 	.word	0x3f19999a
2000031c:	3b83126f 	.word	0x3b83126f
20000320:	3cf5c28f 	.word	0x3cf5c28f
20000324:	37aec33e 	.word	0x37aec33e

20000328 <_ZN6MVPS2DC1Ev>:
			phi_lfo2(ZEROF)
		{}
	};

	MVPS2D(void) {
		state = State();
20000328:	2200      	movs	r2, #0
2000032a:	6002      	str	r2, [r0, #0]
2000032c:	6042      	str	r2, [r0, #4]
2000032e:	6082      	str	r2, [r0, #8]
20000330:	60c2      	str	r2, [r0, #12]
20000332:	6102      	str	r2, [r0, #16]
20000334:	6142      	str	r2, [r0, #20]
		params = Params();
20000336:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
2000033a:	6182      	str	r2, [r0, #24]
2000033c:	61c2      	str	r2, [r0, #28]
2000033e:	6202      	str	r2, [r0, #32]
20000340:	6242      	str	r2, [r0, #36]	; 0x24
20000342:	6282      	str	r2, [r0, #40]	; 0x28
20000344:	62c2      	str	r2, [r0, #44]	; 0x2c
20000346:	6302      	str	r2, [r0, #48]	; 0x30
20000348:	6342      	str	r2, [r0, #52]	; 0x34
	}
2000034a:	4770      	bx	lr

2000034c <_ZN6MVPS2D16MultiPhaseShaperEfff>:
  
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
2000034c:	ed90 7a06 	vldr	s14, [r0, #24]
20000350:	ed90 5a08 	vldr	s10, [r0, #32]
		float v0 = params.v0 * params.shiftshape * lfo2;
20000354:	edd0 4a07 	vldr	s9, [r0, #28]
20000358:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
		float d1 = params.d1 * params.shape * lfo1;
2000035c:	ed90 6a09 	vldr	s12, [r0, #36]	; 0x24
		float v1 = params.v1 * params.shiftshape * lfo2;
20000360:	edd0 5a0c 	vldr	s11, [r0, #48]	; 0x30
		float d2 = params.d2 * params.shape * lfo1;
20000364:	edd0 3a0a 	vldr	s7, [r0, #40]	; 0x28
		float v2 = params.v2 * params.shiftshape * lfo2;
20000368:	ed90 4a0d 	vldr	s8, [r0, #52]	; 0x34
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
2000036c:	ee27 5a05 	vmul.f32	s10, s14, s10
		float v0 = params.v0 * params.shiftshape * lfo2;
20000370:	ee64 7aa7 	vmul.f32	s15, s9, s15
		state = State();
		params = Params();
	}
  
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
20000374:	ee25 5a20 	vmul.f32	s10, s10, s1
		float v0 = params.v0 * params.shiftshape * lfo2;
20000378:	ee67 7a81 	vmul.f32	s15, s15, s2
		float v1 = params.v1 * params.shiftshape * lfo2;
		float d2 = params.d2 * params.shape * lfo1;
		float v2 = params.v2 * params.shiftshape * lfo2;
		
		float ps;
		if(phi < d0) {
2000037c:	eeb4 5ac0 	vcmpe.f32	s10, s0
20000380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000384:	dd04      	ble.n	20000390 <_ZN6MVPS2D16MultiPhaseShaperEfff+0x44>
			float fraction = phi / d0;
			ps = v0 * fraction;
20000386:	ee80 1a05 	vdiv.f32	s2, s0, s10
2000038a:	ee21 1a27 	vmul.f32	s2, s2, s15
2000038e:	e03f      	b.n	20000410 <_ZN6MVPS2D16MultiPhaseShaperEfff+0xc4>
	}
  
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
		float v0 = params.v0 * params.shiftshape * lfo2;
		float d1 = params.d1 * params.shape * lfo1;
20000390:	ee27 6a06 	vmul.f32	s12, s14, s12
20000394:	ee66 6a20 	vmul.f32	s13, s12, s1
		float v1 = params.v1 * params.shiftshape * lfo2;
20000398:	ee24 6aa5 	vmul.f32	s12, s9, s11
		
		float ps;
		if(phi < d0) {
			float fraction = phi / d0;
			ps = v0 * fraction;
		} else if(phi < d1){
2000039c:	eef4 6ac0 	vcmpe.f32	s13, s0
200003a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
		float v0 = params.v0 * params.shiftshape * lfo2;
		float d1 = params.d1 * params.shape * lfo1;
		float v1 = params.v1 * params.shiftshape * lfo2;
200003a4:	ee26 6a01 	vmul.f32	s12, s12, s2
		
		float ps;
		if(phi < d0) {
			float fraction = phi / d0;
			ps = v0 * fraction;
		} else if(phi < d1){
200003a8:	dd0c      	ble.n	200003c4 <_ZN6MVPS2D16MultiPhaseShaperEfff+0x78>
			float factor = v1 - v0;
			float numerator = phi - d0;
			float denominator = d1 - d0;
			float fraction = numerator / denominator;
			ps = factor * fraction + v0;
200003aa:	ee30 0a45 	vsub.f32	s0, s0, s10
200003ae:	ee76 0ac5 	vsub.f32	s1, s13, s10
200003b2:	ee36 1a67 	vsub.f32	s2, s12, s15
200003b6:	ee80 7a20 	vdiv.f32	s14, s0, s1
200003ba:	eee1 7a07 	vfma.f32	s15, s2, s14
200003be:	eeb0 1a67 	vmov.f32	s2, s15
200003c2:	e025      	b.n	20000410 <_ZN6MVPS2D16MultiPhaseShaperEfff+0xc4>
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
		float v0 = params.v0 * params.shiftshape * lfo2;
		float d1 = params.d1 * params.shape * lfo1;
		float v1 = params.v1 * params.shiftshape * lfo2;
		float d2 = params.d2 * params.shape * lfo1;
200003c4:	ee27 7a23 	vmul.f32	s14, s14, s7
		float v2 = params.v2 * params.shiftshape * lfo2;
200003c8:	ee64 4a84 	vmul.f32	s9, s9, s8
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 * params.shape * lfo1;
		float v0 = params.v0 * params.shiftshape * lfo2;
		float d1 = params.d1 * params.shape * lfo1;
		float v1 = params.v1 * params.shiftshape * lfo2;
		float d2 = params.d2 * params.shape * lfo1;
200003cc:	ee67 0a20 	vmul.f32	s1, s14, s1
		float v2 = params.v2 * params.shiftshape * lfo2;
200003d0:	ee24 1a81 	vmul.f32	s2, s9, s2
			float factor = v1 - v0;
			float numerator = phi - d0;
			float denominator = d1 - d0;
			float fraction = numerator / denominator;
			ps = factor * fraction + v0;
		} else if(phi < d2) {
200003d4:	eef4 0ac0 	vcmpe.f32	s1, s0
200003d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003dc:	dd0c      	ble.n	200003f8 <_ZN6MVPS2D16MultiPhaseShaperEfff+0xac>
			float factor = v2 - v1;
			float numerator = phi - d1;
			float denominator = d2 - d1;
			float fraction = numerator / denominator;
			ps = factor * fraction + v1;
200003de:	ee30 0a66 	vsub.f32	s0, s0, s13
200003e2:	ee70 0ae6 	vsub.f32	s1, s1, s13
200003e6:	ee71 7a46 	vsub.f32	s15, s2, s12
200003ea:	ee80 7a20 	vdiv.f32	s14, s0, s1
200003ee:	eea7 6a87 	vfma.f32	s12, s15, s14
200003f2:	eeb0 1a46 	vmov.f32	s2, s12
200003f6:	e00b      	b.n	20000410 <_ZN6MVPS2D16MultiPhaseShaperEfff+0xc4>
		} else {
			float factor = 1.f - v2;
			float numerator = phi - d2;
			float denominator = 1.f - d2;
			float fraction = numerator / denominator;
			ps = factor * fraction + v2;
200003f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200003fc:	ee30 0a60 	vsub.f32	s0, s0, s1
20000400:	ee77 0ae0 	vsub.f32	s1, s15, s1
20000404:	ee37 7ac1 	vsub.f32	s14, s15, s2
20000408:	eec0 7a20 	vdiv.f32	s15, s0, s1
2000040c:	eea7 1a27 	vfma.f32	s2, s14, s15
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000410:	4a17      	ldr	r2, [pc, #92]	; (20000470 <_ZN6MVPS2D16MultiPhaseShaperEfff+0x124>)
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000412:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
20000416:	ee31 1a27 	vadd.f32	s2, s2, s15
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000041a:	eefc 7ac1 	vcvt.u32.f32	s15, s2
2000041e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000422:	ee31 1a67 	vsub.f32	s2, s2, s15
20000426:	eddf 7a13 	vldr	s15, [pc, #76]	; 20000474 <_ZN6MVPS2D16MultiPhaseShaperEfff+0x128>
2000042a:	ee21 1a27 	vmul.f32	s2, s2, s15
    const uint32_t x0p = (uint32_t)x0f;
2000042e:	eefc 7ac1 	vcvt.u32.f32	s15, s2
20000432:	ee17 1a90 	vmov	r1, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000436:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000043a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
2000043e:	3301      	adds	r3, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000440:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2000044c:	ed90 0a00 	vldr	s0, [r0]
20000450:	ee31 1a67 	vsub.f32	s2, s2, s15
20000454:	edd3 7a00 	vldr	s15, [r3]
20000458:	ee77 7ac0 	vsub.f32	s15, s15, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
2000045c:	297f      	cmp	r1, #127	; 0x7f
2000045e:	eea1 0a27 	vfma.f32	s0, s2, s15
20000462:	bf88      	it	hi
20000464:	eeb1 0a40 	vneghi.f32	s0, s0
		}
		
		return -osc_cosf(ps);
	}
20000468:	eeb1 0a40 	vneg.f32	s0, s0
2000046c:	4770      	bx	lr
2000046e:	bf00      	nop
20000470:	08012bdc 	.word	0x08012bdc
20000474:	43800000 	.word	0x43800000

20000478 <_GLOBAL__sub_I__hook_init>:
			break;
			
		default: break;
	}
}
20000478:	b508      	push	{r3, lr}
 */

#include "userosc.h"
#include "mvps2D.hpp"

static MVPS2D mvps2D;
2000047a:	4802      	ldr	r0, [pc, #8]	; (20000484 <_GLOBAL__sub_I__hook_init+0xc>)
2000047c:	f7ff ff54 	bl	20000328 <_ZN6MVPS2DC1Ev>
20000480:	bd08      	pop	{r3, pc}
20000482:	bf00      	nop
20000484:	20000488 	.word	0x20000488
