
build/vps_lissajousmod.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	20000637 	.word	0x20000637
20000098:	20000677 	.word	0x20000677
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
# include "userosc.h"
# include "vps_lissajousmod.hpp"

static VPSLJ2D vpslj2d;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000a6:	b570      	push	{r4, r5, r6, lr}
	// Local copies of the state and params objects.
	VPSLJ2D::State &s = vpslj2d.state;
	const VPSLJ2D::Params &p = vpslj2d.params;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000a8:	4c60      	ldr	r4, [pc, #384]	; (2000022c <_hook_cycle+0x186>)
	// Reset s.flags
    s.flags = VPSLJ2D::flags_none; 
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000aa:	8880      	ldrh	r0, [r0, #4]
	// Local copies of the state and params objects.
	VPSLJ2D::State &s = vpslj2d.state;
	const VPSLJ2D::Params &p = vpslj2d.params;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000ac:	f894 3020 	ldrb.w	r3, [r4, #32]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000b0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 20000230 <_hook_cycle+0x18a>
200000b4:	f003 0607 	and.w	r6, r3, #7
	// Reset s.flags
    s.flags = VPSLJ2D::flags_none; 
200000b8:	f36f 0302 	bfc	r3, #0, #3
200000bc:	f884 3020 	strb.w	r3, [r4, #32]
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000c0:	1203      	asrs	r3, r0, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000c2:	2b96      	cmp	r3, #150	; 0x96
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000c4:	460d      	mov	r5, r1
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000c6:	b2c1      	uxtb	r1, r0
200000c8:	bfd8      	it	le
200000ca:	4618      	movle	r0, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000cc:	f103 0301 	add.w	r3, r3, #1
200000d0:	b2db      	uxtb	r3, r3
200000d2:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000d6:	bfc8      	it	gt
200000d8:	2097      	movgt	r0, #151	; 0x97
200000da:	4956      	ldr	r1, [pc, #344]	; (20000234 <_hook_cycle+0x18e>)
200000dc:	2b96      	cmp	r3, #150	; 0x96
200000de:	bf88      	it	hi
200000e0:	2397      	movhi	r3, #151	; 0x97
200000e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000e6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
200000ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
200000ee:	ee67 7a87 	vmul.f32	s15, s15, s14
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000f2:	ed2d 8b08 	vpush	{d8-d11}
200000f6:	ed93 7a00 	vldr	s14, [r3]
200000fa:	edd0 9a00 	vldr	s19, [r0]
200000fe:	ee37 7a69 	vsub.f32	s14, s14, s19
20000102:	eee7 9a87 	vfma.f32	s19, s15, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000106:	eddf 7a4c 	vldr	s15, [pc, #304]	; 20000238 <_hook_cycle+0x192>
2000010a:	eef4 9ae7 	vcmpe.f32	s19, s15
2000010e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000112:	bfa8      	it	ge
20000114:	eef0 9a67 	vmovge.f32	s19, s15
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
	
	// Update LFO frequency
	if(flags & VPSLJ2D::flag_LFO) {
20000118:	07f0      	lsls	r0, r6, #31
		s.w0LFO1 = p.w0LFO * k_samplerate_recipf;
2000011a:	bf48      	it	mi
2000011c:	ed94 7a09 	vldrmi	s14, [r4, #36]	; 0x24
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000120:	eddf 7a46 	vldr	s15, [pc, #280]	; 2000023c <_hook_cycle+0x196>
20000124:	bf48      	it	mi
20000126:	ee27 7a27 	vmulmi.f32	s14, s14, s15
2000012a:	ee69 9aa7 	vmul.f32	s19, s19, s15
2000012e:	bf44      	itt	mi
20000130:	ed84 7a02 	vstrmi	s14, [r4, #8]
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
20000134:	ed84 7a03 	vstrmi	s14, [r4, #12]
	}
	// Update LFO1 frequency ratio
	if(flags & VPSLJ2D::flag_LFO1) {
20000138:	07b1      	lsls	r1, r6, #30
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
2000013a:	edc4 9a01 	vstr	s19, [r4, #4]
	if(flags & VPSLJ2D::flag_LFO) {
		s.w0LFO1 = p.w0LFO * k_samplerate_recipf;
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
	}
	// Update LFO1 frequency ratio
	if(flags & VPSLJ2D::flag_LFO1) {
2000013e:	d50b      	bpl.n	20000158 <_hook_cycle+0xb2>
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
20000140:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
		s.w0LFO1 = p.freq_shift_1 * s.w0LFO2;
20000144:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
		s.w0LFO1 = p.w0LFO * k_samplerate_recipf;
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
	}
	// Update LFO1 frequency ratio
	if(flags & VPSLJ2D::flag_LFO1) {
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
20000148:	ee27 7a27 	vmul.f32	s14, s14, s15
2000014c:	ed84 7a03 	vstr	s14, [r4, #12]
		s.w0LFO1 = p.freq_shift_1 * s.w0LFO2;
20000150:	ee26 7a87 	vmul.f32	s14, s13, s14
20000154:	ed84 7a02 	vstr	s14, [r4, #8]
	}
	// Update LFO2 frequency ratio
	if(flags & VPSLJ2D::flag_LFO2) {
20000158:	0773      	lsls	r3, r6, #29
2000015a:	d50b      	bpl.n	20000174 <_hook_cycle+0xce>
		s.w0LFO1 = p.w0LFO * k_samplerate_recipf;
2000015c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
20000160:	ee67 7a27 	vmul.f32	s15, s14, s15
		s.w0LFO2 = p.freq_shift_2 * s.w0LFO1;
20000164:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
		s.w0LFO2 = p.w0LFO * k_samplerate_recipf;
		s.w0LFO1 = p.freq_shift_1 * s.w0LFO2;
	}
	// Update LFO2 frequency ratio
	if(flags & VPSLJ2D::flag_LFO2) {
		s.w0LFO1 = p.w0LFO * k_samplerate_recipf;
20000168:	edc4 7a02 	vstr	s15, [r4, #8]
		s.w0LFO2 = p.freq_shift_2 * s.w0LFO1;
2000016c:	ee67 7a27 	vmul.f32	s15, s14, s15
20000170:	edc4 7a03 	vstr	s15, [r4, #12]
	}
	
	// Local copies of the state object fields.
	float phi 		= s.phi;
20000174:	ed94 9a00 	vldr	s18, [r4]
	float *Phi 		= &phi;
	float phiLFO1 	= s.phiLFO1;
20000178:	edd4 8a04 	vldr	s17, [r4, #16]
	float *ptrLFO1 	= &phiLFO1;
	float phiLFO2 	= s.phiLFO2;
2000017c:	ed94 8a05 	vldr	s16, [r4, #20]
	float *ptrLFO2 	= &phiLFO2;
	float w0LFO1 	= s.w0LFO1;
20000180:	ed94 ba02 	vldr	s22, [r4, #8]
	float w0LFO2 	= s.w0LFO2;
20000184:	edd4 ba03 	vldr	s23, [r4, #12]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000188:	eddf aa2d 	vldr	s21, [pc, #180]	; 20000240 <_hook_cycle+0x19a>
2000018c:	ed9f aa2d 	vldr	s20, [pc, #180]	; 20000244 <_hook_cycle+0x19e>
	float w0LFO1 	= s.w0LFO1;
	float w0LFO2 	= s.w0LFO2;
  
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer
20000190:	eb05 0682 	add.w	r6, r5, r2, lsl #2

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000194:	42b5      	cmp	r5, r6
20000196:	d040      	beq.n	2000021a <_hook_cycle+0x174>
		float sig = 0.f;
		
		sig = vpslj2d.PhaseShaper(phi, phiLFO1, phiLFO2);
20000198:	eeb0 1a48 	vmov.f32	s2, s16
2000019c:	eef0 0a68 	vmov.f32	s1, s17
200001a0:	eeb0 0a49 	vmov.f32	s0, s18
200001a4:	4821      	ldr	r0, [pc, #132]	; (2000022c <_hook_cycle+0x186>)
200001a6:	f000 f8e7 	bl	20000378 <_ZN7VPSLJ2D11PhaseShaperEfff>
			case 4: return -osc_sawf(ps);
		}
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
200001aa:	ee39 9a29 	vadd.f32	s18, s18, s19
200001ae:	ee7b 8a28 	vadd.f32	s17, s22, s17
		*phi -= (uint32_t)*phi;
200001b2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			case 4: return -osc_sawf(ps);
		}
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
200001b6:	ee3b 8a88 	vadd.f32	s16, s23, s16
		*phi -= (uint32_t)*phi;
200001ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001be:	ee39 9a67 	vsub.f32	s18, s18, s15
200001c2:	eefc 7ae8 	vcvt.u32.f32	s15, s17
200001c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001ca:	ee78 8ae7 	vsub.f32	s17, s17, s15
200001ce:	eefc 7ac8 	vcvt.u32.f32	s15, s16
200001d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
200001d6:	ee38 8a67 	vsub.f32	s16, s16, s15
200001da:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
200001de:	eeb4 0ae7 	vcmpe.f32	s0, s15
200001e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001e6:	db09      	blt.n	200001fc <_hook_cycle+0x156>
200001e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200001ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
200001f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001f4:	bfa8      	it	ge
200001f6:	eeb0 0a67 	vmovge.f32	s0, s15
200001fa:	e001      	b.n	20000200 <_hook_cycle+0x15a>
200001fc:	eeb0 0a67 	vmov.f32	s0, s15
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000200:	ee60 7a00 	vmul.f32	s15, s0, s0
20000204:	ee60 7a67 	vnmul.f32	s15, s0, s15
20000208:	eea7 0aaa 	vfma.f32	s0, s15, s21
2000020c:	ee20 0a0a 	vmul.f32	s0, s0, s20
20000210:	eebd 0ac0 	vcvt.s32.f32	s0, s0
20000214:	eca5 0a01 	vstmia	r5!, {s0}
	// Prepare to fill buffer
	q31_t *__restrict y = (q31_t*)yn; // Pointer to start of buffer
	const q31_t *y_e = y + frames; // Pointer to end of buffer

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000218:	e7bc      	b.n	20000194 <_hook_cycle+0xee>
		*(y++) = f32_to_q31(sig); 
	
	}
	
	// Update global phases:
	s.phi 		= phi;
2000021a:	ed84 9a00 	vstr	s18, [r4]
	s.phiLFO1 	= phiLFO1;
2000021e:	edc4 8a04 	vstr	s17, [r4, #16]
	s.phiLFO2 	= phiLFO2;
20000222:	ed84 8a05 	vstr	s16, [r4, #20]
	
}
20000226:	ecbd 8b08 	vpop	{d8-d11}
2000022a:	bd70      	pop	{r4, r5, r6, pc}
2000022c:	20000638 	.word	0x20000638
20000230:	3b808081 	.word	0x3b808081
20000234:	0800f100 	.word	0x0800f100
20000238:	46b8ff49 	.word	0x46b8ff49
2000023c:	37aec33e 	.word	0x37aec33e
20000240:	3d4ccccd 	.word	0x3d4ccccd
20000244:	4f000000 	.word	0x4f000000

20000248 <_hook_on>:
20000248:	4770      	bx	lr

2000024a <_hook_off>:
void OSC_NOTEON(const user_osc_param_t *const params) {
	// Not used	
	(void)params;
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
2000024a:	4770      	bx	lr

2000024c <_hook_param>:
	// Not used	
	(void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value) { 
2000024c:	b082      	sub	sp, #8
2000024e:	9101      	str	r1, [sp, #4]
	
	// Create local copies of the state and params objects.
	VPSLJ2D::Params &p = vpslj2d.params;
	VPSLJ2D::State &s = vpslj2d.state;
	
	switch (index) {
20000250:	2806      	cmp	r0, #6
20000252:	d867      	bhi.n	20000324 <_hook_param+0xd8>
20000254:	e8df f000 	tbb	[pc, r0]
20000258:	311d0904 	.word	0x311d0904
2000025c:	493d      	.short	0x493d
2000025e:	55          	.byte	0x55
2000025f:	00          	.byte	0x00
		case k_user_osc_param_id1:  		// User parameter 1
			// Select Wave type
			p.type = value;
20000260:	4b31      	ldr	r3, [pc, #196]	; (20000328 <_hook_param+0xdc>)
20000262:	f8bd 2004 	ldrh.w	r2, [sp, #4]
20000266:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
20000268:	e05c      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_id2:			// User parameter 2
			// Set frequency scaling of LFO 1
			{
				p.freq_shift_1 = 1.f + (value * 0.05f);
2000026a:	eddd 7a01 	vldr	s15, [sp, #4]
2000026e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 2000032c <_hook_param+0xe0>
20000272:	4b2d      	ldr	r3, [pc, #180]	; (20000328 <_hook_param+0xdc>)
20000274:	eef8 6ae7 	vcvt.f32.s32	s13, s15
20000278:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2000027c:	eee6 7a87 	vfma.f32	s15, s13, s14
				s.flags |= VPSLJ2D::flag_LFO1;
20000280:	f893 2020 	ldrb.w	r2, [r3, #32]
20000284:	f042 0202 	orr.w	r2, r2, #2
			break;
			
		case k_user_osc_param_id2:			// User parameter 2
			// Set frequency scaling of LFO 1
			{
				p.freq_shift_1 = 1.f + (value * 0.05f);
20000288:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
				s.flags |= VPSLJ2D::flag_LFO1;
2000028c:	f883 2020 	strb.w	r2, [r3, #32]
			} break;
20000290:	e048      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_id3:  		// User parameter 3
			// Set frequency scaling of LFO 2
			{
				p.freq_shift_2 = 1.f + (value * 0.05f);
20000292:	eddd 7a01 	vldr	s15, [sp, #4]
20000296:	ed9f 7a25 	vldr	s14, [pc, #148]	; 2000032c <_hook_param+0xe0>
2000029a:	4b23      	ldr	r3, [pc, #140]	; (20000328 <_hook_param+0xdc>)
2000029c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
200002a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200002a4:	eee6 7a87 	vfma.f32	s15, s13, s14
				s.flags |= VPSLJ2D::flag_LFO2;
200002a8:	f893 2020 	ldrb.w	r2, [r3, #32]
200002ac:	f042 0204 	orr.w	r2, r2, #4
			} break;
			
		case k_user_osc_param_id3:  		// User parameter 3
			// Set frequency scaling of LFO 2
			{
				p.freq_shift_2 = 1.f + (value * 0.05f);
200002b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
				s.flags |= VPSLJ2D::flag_LFO2;
200002b4:	f883 2020 	strb.w	r2, [r3, #32]
			} break;
200002b8:	e034      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_id4:			// User parameter 4
			// Set values for d amplitude
			p.Amp_d = value * 0.01f;
200002ba:	eddd 7a01 	vldr	s15, [sp, #4]
200002be:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 20000330 <_hook_param+0xe4>
200002c2:	4b19      	ldr	r3, [pc, #100]	; (20000328 <_hook_param+0xdc>)
200002c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200002c8:	ee67 7a87 	vmul.f32	s15, s15, s14
200002cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			break;
200002d0:	e028      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_id5:  		// User parameter 5
			// Set values for v amplitude
			p.Amp_v = value * 0.05f;
200002d2:	eddd 7a01 	vldr	s15, [sp, #4]
200002d6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2000032c <_hook_param+0xe0>
200002da:	4b13      	ldr	r3, [pc, #76]	; (20000328 <_hook_param+0xdc>)
200002dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200002e0:	ee67 7a87 	vmul.f32	s15, s15, s14
200002e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			break;
200002e8:	e01c      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_id6:			// User parameter 6
			// Set offset value
			p.offset = value * 0.01f;
200002ea:	eddd 7a01 	vldr	s15, [sp, #4]
200002ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 20000330 <_hook_param+0xe4>
200002f2:	4b0d      	ldr	r3, [pc, #52]	; (20000328 <_hook_param+0xdc>)
200002f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200002f8:	ee67 7a87 	vmul.f32	s15, s15, s14
200002fc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			break;
20000300:	e010      	b.n	20000324 <_hook_param+0xd8>
			
		case k_user_osc_param_shape: 		// A knob
			// Set Frequency of LFO 1
			p.w0LFO = value * 0.3f; 
20000302:	eddd 7a01 	vldr	s15, [sp, #4]
20000306:	4b08      	ldr	r3, [pc, #32]	; (20000328 <_hook_param+0xdc>)
20000308:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 20000334 <_hook_param+0xe8>
			s.flags |= VPSLJ2D::flag_LFO;
2000030c:	f893 2020 	ldrb.w	r2, [r3, #32]
			p.offset = value * 0.01f;
			break;
			
		case k_user_osc_param_shape: 		// A knob
			// Set Frequency of LFO 1
			p.w0LFO = value * 0.3f; 
20000310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			s.flags |= VPSLJ2D::flag_LFO;
20000314:	f042 0201 	orr.w	r2, r2, #1
			p.offset = value * 0.01f;
			break;
			
		case k_user_osc_param_shape: 		// A knob
			// Set Frequency of LFO 1
			p.w0LFO = value * 0.3f; 
20000318:	ee67 7a87 	vmul.f32	s15, s15, s14
			s.flags |= VPSLJ2D::flag_LFO;
2000031c:	f883 2020 	strb.w	r2, [r3, #32]
			p.offset = value * 0.01f;
			break;
			
		case k_user_osc_param_shape: 		// A knob
			// Set Frequency of LFO 1
			p.w0LFO = value * 0.3f; 
20000320:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		case k_user_osc_param_shiftshape:	// B knob	
			break;
			
		default: break;
	}
}
20000324:	b002      	add	sp, #8
20000326:	4770      	bx	lr
20000328:	20000638 	.word	0x20000638
2000032c:	3d4ccccd 	.word	0x3d4ccccd
20000330:	3c23d70a 	.word	0x3c23d70a
20000334:	3e99999a 	.word	0x3e99999a

20000338 <_ZN7VPSLJ2DC1Ev>:
			flags(flags_none)
		{}
	};

	VPSLJ2D(void) {
		state = State();
20000338:	f890 1020 	ldrb.w	r1, [r0, #32]
2000033c:	2200      	movs	r2, #0
2000033e:	f362 0102 	bfi	r1, r2, #0, #3
20000342:	f880 1020 	strb.w	r1, [r0, #32]
		params = Params();
20000346:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
2000034a:	6241      	str	r1, [r0, #36]	; 0x24
2000034c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
20000350:	6281      	str	r1, [r0, #40]	; 0x28
20000352:	62c1      	str	r1, [r0, #44]	; 0x2c
20000354:	6301      	str	r1, [r0, #48]	; 0x30
20000356:	6341      	str	r1, [r0, #52]	; 0x34
20000358:	2101      	movs	r1, #1
			flags(flags_none)
		{}
	};

	VPSLJ2D(void) {
		state = State();
2000035a:	6002      	str	r2, [r0, #0]
2000035c:	6042      	str	r2, [r0, #4]
2000035e:	6082      	str	r2, [r0, #8]
20000360:	60c2      	str	r2, [r0, #12]
20000362:	6102      	str	r2, [r0, #16]
20000364:	6142      	str	r2, [r0, #20]
20000366:	6182      	str	r2, [r0, #24]
20000368:	61c2      	str	r2, [r0, #28]
		params = Params();
2000036a:	6382      	str	r2, [r0, #56]	; 0x38
2000036c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
20000370:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
	}
20000374:	4770      	bx	lr
	...

20000378 <_ZN7VPSLJ2D11PhaseShaperEfff>:
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000378:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000037c:	4ba5      	ldr	r3, [pc, #660]	; (20000614 <_ZN7VPSLJ2D11PhaseShaperEfff+0x29c>)
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000037e:	ee70 0aa7 	vadd.f32	s1, s1, s15
20000382:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
20000386:	ee70 0a87 	vadd.f32	s1, s1, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000038a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 20000618 <_ZN7VPSLJ2D11PhaseShaperEfff+0x2a0>
2000038e:	eefc 6ae0 	vcvt.u32.f32	s13, s1
	
	inline float PhaseShaper(float phi, float phiLFO1, float phiLFO2) {
20000392:	b510      	push	{r4, lr}
20000394:	eef8 6a66 	vcvt.f32.u32	s13, s13
20000398:	eeb0 5a67 	vmov.f32	s10, s15
2000039c:	ee70 0ae6 	vsub.f32	s1, s1, s13
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
200003a0:	ee31 1a07 	vadd.f32	s2, s2, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200003a4:	ee60 0aa7 	vmul.f32	s1, s1, s15
    const uint32_t x0p = (uint32_t)x0f;
200003a8:	eefc 6ae0 	vcvt.u32.f32	s13, s1
200003ac:	ee16 1a90 	vmov	r1, s13

    const uint32_t x0 = x0p & k_wt_sine_mask;
200003b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200003b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
200003b8:	3201      	adds	r2, #1

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200003ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
200003be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
200003c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
200003c6:	ed94 6a00 	vldr	s12, [r4]
200003ca:	ee70 0ae6 	vsub.f32	s1, s1, s13
200003ce:	edd2 6a00 	vldr	s13, [r2]
200003d2:	ee76 6ac6 	vsub.f32	s13, s13, s12
    return (x0p < k_wt_sine_size)?y0:-y0;
200003d6:	297f      	cmp	r1, #127	; 0x7f
200003d8:	eea0 6aa6 	vfma.f32	s12, s1, s13
		
		float phase_d = phiLFO1 + params.offset; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(phase_d);
200003dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
200003e0:	bf88      	it	hi
200003e2:	eeb1 6a46 	vneghi.f32	s12, s12
200003e6:	eef0 7a66 	vmov.f32	s15, s13
200003ea:	eee6 7a26 	vfma.f32	s15, s12, s13
		float d = params.Amp_d * linintf(phi, state.sigD, Osc_d);
200003ee:	ed90 6a06 	vldr	s12, [r0, #24]
		state.sigD = Osc_d;
200003f2:	edc0 7a06 	vstr	s15, [r0, #24]
	
	inline float PhaseShaper(float phi, float phiLFO1, float phiLFO2) {
		
		float phase_d = phiLFO1 + params.offset; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(phase_d);
		float d = params.Amp_d * linintf(phi, state.sigD, Osc_d);
200003f6:	ee77 5ac6 	vsub.f32	s11, s15, s12
200003fa:	eea0 6a25 	vfma.f32	s12, s0, s11
200003fe:	edd0 5a0a 	vldr	s11, [r0, #40]	; 0x28
20000402:	ee26 6a25 	vmul.f32	s12, s12, s11
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000406:	eefc 5ac1 	vcvt.u32.f32	s11, s2
		float Osc_v = 0.5f + 0.5f * osc_cosf(phiLFO2);
		float v = params.Amp_v * linintf(phi, state.sigV, Osc_v);
		state.sigV = Osc_v;
		
		float ps;
		if(phi < d) {
2000040a:	eeb4 0ac6 	vcmpe.f32	s0, s12
2000040e:	eef8 5a65 	vcvt.f32.u32	s11, s11
20000412:	ee31 1a65 	vsub.f32	s2, s2, s11
20000416:	ee21 1a05 	vmul.f32	s2, s2, s10
    const uint32_t x0p = (uint32_t)x0f;
2000041a:	eefc 7ac1 	vcvt.u32.f32	s15, s2
2000041e:	ee17 1a90 	vmov	r1, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000422:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000426:	eb03 0482 	add.w	r4, r3, r2, lsl #2
2000042a:	3201      	adds	r2, #1
2000042c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20000430:	eb03 0282 	add.w	r2, r3, r2, lsl #2
20000434:	edd4 5a00 	vldr	s11, [r4]
20000438:	edd2 4a00 	vldr	s9, [r2]
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction;
			ps += v;
		}
		
		switch(params.type) {
2000043c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
2000043e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000442:	ee74 4ae5 	vsub.f32	s9, s9, s11
20000446:	ee31 1a67 	vsub.f32	s2, s2, s15
    return (x0p < k_wt_sine_size)?y0:-y0;
2000044a:	297f      	cmp	r1, #127	; 0x7f
2000044c:	eee1 5a24 	vfma.f32	s11, s2, s9
20000450:	f102 32ff 	add.w	r2, r2, #4294967295
20000454:	bf88      	it	hi
20000456:	eef1 5a65 	vneghi.f32	s11, s11
		float phase_d = phiLFO1 + params.offset; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(phase_d);
		float d = params.Amp_d * linintf(phi, state.sigD, Osc_d);
		state.sigD = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(phiLFO2);
2000045a:	eee5 6aa6 	vfma.f32	s13, s11, s13
		float v = params.Amp_v * linintf(phi, state.sigV, Osc_v);
		state.sigV = Osc_v;
		
		float ps;
		if(phi < d) {
2000045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float phase_d = phiLFO1 + params.offset; // 0.25f to represent pi/2 as 1/4 cycle
		float Osc_d = 0.5f + 0.5f * osc_cosf(phase_d);
		float d = params.Amp_d * linintf(phi, state.sigD, Osc_d);
		state.sigD = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(phiLFO2);
20000462:	eef0 5a66 	vmov.f32	s11, s13
		float v = params.Amp_v * linintf(phi, state.sigV, Osc_v);
20000466:	edd0 6a07 	vldr	s13, [r0, #28]
		state.sigV = Osc_v;
2000046a:	edc0 5a07 	vstr	s11, [r0, #28]
		float Osc_d = 0.5f + 0.5f * osc_cosf(phase_d);
		float d = params.Amp_d * linintf(phi, state.sigD, Osc_d);
		state.sigD = Osc_d;
		
		float Osc_v = 0.5f + 0.5f * osc_cosf(phiLFO2);
		float v = params.Amp_v * linintf(phi, state.sigV, Osc_v);
2000046e:	ee75 7ae6 	vsub.f32	s15, s11, s13
20000472:	eee0 6a27 	vfma.f32	s13, s0, s15
20000476:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
2000047a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction;
			ps += v;
2000047e:	bf5d      	ittte	pl
20000480:	eef7 6a00 	vmovpl.f32	s13, #112	; 0x3f800000  1.0
20000484:	ee30 0a46 	vsubpl.f32	s0, s0, s12
20000488:	ee36 6ac6 	vsubpl.f32	s12, s13, s12
		state.sigV = Osc_v;
		
		float ps;
		if(phi < d) {
			float fraction = phi / d;
			ps = v * fraction;
2000048c:	eec0 6a06 	vdivmi.f32	s13, s0, s12
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction;
			ps += v;
20000490:	bf5b      	ittet	pl
20000492:	eec0 5a06 	vdivpl.f32	s11, s0, s12
20000496:	ee76 6ae7 	vsubpl.f32	s13, s13, s15
		state.sigV = Osc_v;
		
		float ps;
		if(phi < d) {
			float fraction = phi / d;
			ps = v * fraction;
2000049a:	ee66 7aa7 	vmulmi.f32	s15, s13, s15
		} else {
			float numerator = phi - d;
			float denominator = 1.f - d;
			float fraction = numerator / denominator;
			ps = (1.f - v) * fraction;
			ps += v;
2000049e:	eee5 7aa6 	vfmapl.f32	s15, s11, s13
		}
		
		switch(params.type) {
200004a2:	2a03      	cmp	r2, #3
200004a4:	f200 80b4 	bhi.w	20000610 <_ZN7VPSLJ2D11PhaseShaperEfff+0x298>
200004a8:	e8df f002 	tbb	[pc, r2]
200004ac:	81643a02 	.word	0x81643a02
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_parf(float x) {
    const float p = x - (uint32_t)x;

    const float x0f = 2.f * p * k_wt_par_size;
200004b0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200004b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200004b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
200004bc:	ee67 7a05 	vmul.f32	s15, s14, s10
    const uint32_t x0p = (uint32_t)x0f;
200004c0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200004c4:	ee17 3a10 	vmov	r3, s14
    
    const uint32_t x0 = (x0p<=k_wt_par_size) ? x0p : (k_wt_par_size - (x0p & k_wt_par_mask));
200004c8:	2b80      	cmp	r3, #128	; 0x80
200004ca:	d904      	bls.n	200004d6 <_ZN7VPSLJ2D11PhaseShaperEfff+0x15e>
200004cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
200004d0:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
200004d4:	e009      	b.n	200004ea <_ZN7VPSLJ2D11PhaseShaperEfff+0x172>
    const uint32_t x1 = (x0p<(k_wt_par_size-1)) ? (x0 + 1) & k_wt_par_mask : (x0p >= k_wt_par_size) ? (x0 - 1) & k_wt_par_mask : (x0 + 1);
200004d6:	2b7e      	cmp	r3, #126	; 0x7e
200004d8:	d803      	bhi.n	200004e2 <_ZN7VPSLJ2D11PhaseShaperEfff+0x16a>
200004da:	1c58      	adds	r0, r3, #1
200004dc:	ee17 2a10 	vmov	r2, s14
200004e0:	e008      	b.n	200004f4 <_ZN7VPSLJ2D11PhaseShaperEfff+0x17c>
200004e2:	2b7f      	cmp	r3, #127	; 0x7f
200004e4:	d003      	beq.n	200004ee <_ZN7VPSLJ2D11PhaseShaperEfff+0x176>
200004e6:	ee17 2a10 	vmov	r2, s14
200004ea:	1e50      	subs	r0, r2, #1
200004ec:	e002      	b.n	200004f4 <_ZN7VPSLJ2D11PhaseShaperEfff+0x17c>
200004ee:	ee17 2a10 	vmov	r2, s14
200004f2:	2080      	movs	r0, #128	; 0x80
			case 1: return -osc_parf(ps); 
200004f4:	ee07 3a10 	vmov	s14, r3
    const float y0 = linintf(x0f - x0p, wt_par_lut_f[x0], wt_par_lut_f[x1]);
200004f8:	4948      	ldr	r1, [pc, #288]	; (2000061c <_ZN7VPSLJ2D11PhaseShaperEfff+0x2a4>)
200004fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200004fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20000502:	eb01 0180 	add.w	r1, r1, r0, lsl #2
20000506:	ed92 0a00 	vldr	s0, [r2]
2000050a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2000050e:	ed91 7a00 	vldr	s14, [r1]
20000512:	ee37 7a40 	vsub.f32	s14, s14, s0
20000516:	eea7 0a87 	vfma.f32	s0, s15, s14
2000051a:	eeb1 0a40 	vneg.f32	s0, s0
2000051e:	bd10      	pop	{r4, pc}
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000520:	ee37 7a87 	vadd.f32	s14, s15, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000524:	eefc 7ac7 	vcvt.u32.f32	s15, s14
20000528:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000052c:	ee37 7a67 	vsub.f32	s14, s14, s15
20000530:	ee67 7a05 	vmul.f32	s15, s14, s10
    const uint32_t x0p = (uint32_t)x0f;
20000534:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000538:	ee17 1a10 	vmov	r1, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000053c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000540:	eb03 0082 	add.w	r0, r3, r2, lsl #2
20000544:	3201      	adds	r2, #1
20000546:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000054a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2000054e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
20000552:	ed90 0a00 	vldr	s0, [r0]
20000556:	ee77 7ac7 	vsub.f32	s15, s15, s14
2000055a:	ed93 7a00 	vldr	s14, [r3]
2000055e:	ee37 7a40 	vsub.f32	s14, s14, s0
    return (x0p < k_wt_sine_size)?y0:-y0;
20000562:	297f      	cmp	r1, #127	; 0x7f
20000564:	eea7 0a87 	vfma.f32	s0, s15, s14
20000568:	bf88      	it	hi
2000056a:	eeb1 0a40 	vneghi.f32	s0, s0
			case 2: return -osc_cosf(ps);
2000056e:	eeb1 0a40 	vneg.f32	s0, s0
20000572:	bd10      	pop	{r4, pc}
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_sqrf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_sqr_size;
20000574:	eebc 7ae7 	vcvt.u32.f32	s14, s15
      x0 = k_wt_sqr_size - (x0p & k_wt_sqr_mask);
      x1 = x0 - 1;
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_sqr_lut_f[x0], wt_sqr_lut_f[x1]);
20000578:	4929      	ldr	r1, [pc, #164]	; (20000620 <_ZN7VPSLJ2D11PhaseShaperEfff+0x2a8>)
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_sqrf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_sqr_size;
2000057a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000057e:	ee37 7ac7 	vsub.f32	s14, s15, s14
20000582:	ee67 7a05 	vmul.f32	s15, s14, s10
    const uint32_t x0p = (uint32_t)x0f;
20000586:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000058a:	ee17 3a10 	vmov	r3, s14
    
    uint32_t x0 = x0p, x1 = x0p+1;
    float sign = 1.f;
    if (x0p >= k_wt_sqr_size) {
2000058e:	2b7f      	cmp	r3, #127	; 0x7f
      x0 = k_wt_sqr_size - (x0p & k_wt_sqr_mask);
20000590:	bf87      	ittee	hi
20000592:	f003 027f 	andhi.w	r2, r3, #127	; 0x7f
20000596:	f1c2 0080 	rsbhi	r0, r2, #128	; 0x80
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_sqr_size;
    const uint32_t x0p = (uint32_t)x0f;
    
    uint32_t x0 = x0p, x1 = x0p+1;
2000059a:	1c5a      	addls	r2, r3, #1
2000059c:	4618      	movls	r0, r3
    float sign = 1.f;
2000059e:	bf92      	itee	ls
200005a0:	eeb7 7a00 	vmovls.f32	s14, #112	; 0x3f800000  1.0
    if (x0p >= k_wt_sqr_size) {
      x0 = k_wt_sqr_size - (x0p & k_wt_sqr_mask);
      x1 = x0 - 1;
200005a4:	f1c2 027f 	rsbhi	r2, r2, #127	; 0x7f
      sign = -1.f;
200005a8:	eebf 7a00 	vmovhi.f32	s14, #240	; 0xbf800000 -1.0
200005ac:	e01b      	b.n	200005e6 <_ZN7VPSLJ2D11PhaseShaperEfff+0x26e>
   * @return     Wave sample.
   */
  __fast_inline float osc_sawf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
200005ae:	eebc 7ae7 	vcvt.u32.f32	s14, s15
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
      sign = -1.f;
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
200005b2:	491c      	ldr	r1, [pc, #112]	; (20000624 <_ZN7VPSLJ2D11PhaseShaperEfff+0x2ac>)
   * @return     Wave sample.
   */
  __fast_inline float osc_sawf(float x) {
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
200005b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200005b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
200005bc:	ee67 7a05 	vmul.f32	s15, s14, s10
    const uint32_t x0p = (uint32_t)x0f;
200005c0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200005c4:	ee17 3a10 	vmov	r3, s14
    
    uint32_t x0 = x0p, x1 = x0p+1;
    float sign = 1.f;
    if (x0p >= k_wt_saw_size) {
200005c8:	2b7f      	cmp	r3, #127	; 0x7f
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
200005ca:	bf87      	ittee	hi
200005cc:	f003 027f 	andhi.w	r2, r3, #127	; 0x7f
200005d0:	f1c2 0080 	rsbhi	r0, r2, #128	; 0x80
    const float p = x - (uint32_t)x;
    
    const float x0f = 2.f * p * k_wt_saw_size;
    const uint32_t x0p = (uint32_t)x0f;
    
    uint32_t x0 = x0p, x1 = x0p+1;
200005d4:	1c5a      	addls	r2, r3, #1
200005d6:	4618      	movls	r0, r3
    float sign = 1.f;
200005d8:	bf92      	itee	ls
200005da:	eeb7 7a00 	vmovls.f32	s14, #112	; 0x3f800000  1.0
    if (x0p >= k_wt_saw_size) {
      x0 = k_wt_saw_size - (x0p & k_wt_saw_mask);
      x1 = x0 - 1;
200005de:	f1c2 027f 	rsbhi	r2, r2, #127	; 0x7f
      sign = -1.f;
200005e2:	eebf 7a00 	vmovhi.f32	s14, #240	; 0xbf800000 -1.0
			case 3: return -osc_sqrf(ps);
			case 4: return -osc_sawf(ps);
200005e6:	ee06 3a90 	vmov	s13, r3
200005ea:	eef8 6a66 	vcvt.f32.u32	s13, s13
    }
    
    const float y0 = linintf(x0f - x0p, wt_saw_lut_f[x0], wt_saw_lut_f[x1]);
200005ee:	eb01 0080 	add.w	r0, r1, r0, lsl #2
200005f2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
200005f6:	ed90 0a00 	vldr	s0, [r0]
200005fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
200005fe:	edd2 6a00 	vldr	s13, [r2]
20000602:	ee76 6ac0 	vsub.f32	s13, s13, s0
20000606:	eea7 0aa6 	vfma.f32	s0, s15, s13
2000060a:	ee27 0a40 	vnmul.f32	s0, s14, s0
2000060e:	bd10      	pop	{r4, pc}
		}
	}
20000610:	bd10      	pop	{r4, pc}
20000612:	bf00      	nop
20000614:	08012bdc 	.word	0x08012bdc
20000618:	43800000 	.word	0x43800000
2000061c:	08010170 	.word	0x08010170
20000620:	08010f94 	.word	0x08010f94
20000624:	08011db8 	.word	0x08011db8

20000628 <_GLOBAL__sub_I__hook_init>:
20000628:	b508      	push	{r3, lr}
 */

# include "userosc.h"
# include "vps_lissajousmod.hpp"

static VPSLJ2D vpslj2d;
2000062a:	4802      	ldr	r0, [pc, #8]	; (20000634 <_GLOBAL__sub_I__hook_init+0xc>)
2000062c:	f7ff fe84 	bl	20000338 <_ZN7VPSLJ2DC1Ev>
20000630:	bd08      	pop	{r3, pc}
20000632:	bf00      	nop
20000634:	20000638 	.word	0x20000638
