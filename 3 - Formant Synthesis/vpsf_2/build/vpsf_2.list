
build/vpsf_2.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	2000057f 	.word	0x2000057f
20000098:	200005df 	.word	0x200005df
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
# include "userosc.h"
# include "vpsf_2.hpp"

static VPSFI vpsfi;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000a6:	b570      	push	{r4, r5, r6, lr}
	// Local copies of the state and params objects.
	VPSFI::State &s = vpsfi.state;
	const VPSFI::Params &p = vpsfi.params;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000a8:	4ca7      	ldr	r4, [pc, #668]	; (20000348 <_hook_cycle+0x2a2>)
200000aa:	ed9f 6aa8 	vldr	s12, [pc, #672]	; 2000034c <_hook_cycle+0x2a6>
200000ae:	7d23      	ldrb	r3, [r4, #20]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000b0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 20000350 <_hook_cycle+0x2aa>
		/*
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
200000b4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200000b8:	ed9f 5aa6 	vldr	s10, [pc, #664]	; 20000354 <_hook_cycle+0x2ae>
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000bc:	460d      	mov	r5, r1
	
	// Current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = VPSFI::flags_none; 
200000be:	4619      	mov	r1, r3
200000c0:	f36f 0100 	bfc	r1, #0, #1
200000c4:	7521      	strb	r1, [r4, #20]
	if(flags & VPSFI::flag_reset) {
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000c6:	8881      	ldrh	r1, [r0, #4]
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
200000c8:	ed84 6a0c 	vstr	s12, [r4, #48]	; 0x30
	
	// Reset s.flags
    s.flags = VPSFI::flags_none; 
	
	// Reset state if note-on trigger
	if(flags & VPSFI::flag_reset) {
200000cc:	f013 0f01 	tst.w	r3, #1
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000d0:	ea4f 2321 	mov.w	r3, r1, asr #8
		{
			reset();
		}
		
		inline void reset(void) {
			phi = ZEROF;
200000d4:	bf18      	it	ne
200000d6:	ed84 6a00 	vstrne	s12, [r4]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000da:	2b96      	cmp	r3, #150	; 0x96
200000dc:	bfd8      	it	le
200000de:	4618      	movle	r0, r3
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000e0:	b2c9      	uxtb	r1, r1
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000e2:	f103 0301 	add.w	r3, r3, #1
200000e6:	b2db      	uxtb	r3, r3
200000e8:	ee07 1a90 	vmov	s15, r1
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000ec:	bfc8      	it	gt
200000ee:	2097      	movgt	r0, #151	; 0x97
200000f0:	4999      	ldr	r1, [pc, #612]	; (20000358 <_hook_cycle+0x2b2>)
200000f2:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
200000f6:	2b96      	cmp	r3, #150	; 0x96
200000f8:	bf88      	it	hi
200000fa:	2397      	movhi	r3, #151	; 0x97
200000fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000100:	eb01 0080 	add.w	r0, r1, r0, lsl #2
20000104:	eb01 0383 	add.w	r3, r1, r3, lsl #2
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
20000108:	ed2d 8b0a 	vpush	{d8-d12}
2000010c:	ee67 7a87 	vmul.f32	s15, s15, s14
20000110:	edd0 9a00 	vldr	s19, [r0]
20000114:	ed93 7a00 	vldr	s14, [r3]
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
20000118:	4b90      	ldr	r3, [pc, #576]	; (2000035c <_hook_cycle+0x2b6>)
	
	// Set pole for filters
	vpsfi.setFilters(w0);
	
	// Local copies of the current phase and its pointer.
	float phi = s.phi;
2000011a:	ed94 9a00 	vldr	s18, [r4]
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
2000011e:	ed9f ba90 	vldr	s22, [pc, #576]	; 20000360 <_hook_cycle+0x2ba>
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000122:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
20000126:	ee37 7a69 	vsub.f32	s14, s14, s19
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
		float lpf = clipmaxf(limit * w0, 0.49f);
		float hpf = clipminf((1.f / limit) * w0, ZEROF);
2000012a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
2000012e:	eee7 9a87 	vfma.f32	s19, s15, s14
	
	// Pointer to start of buffer
	q31_t *__restrict y = (q31_t*)yn; 
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 
20000132:	eb05 0682 	add.w	r6, r5, r2, lsl #2

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000136:	eddf 7a8b 	vldr	s15, [pc, #556]	; 20000364 <_hook_cycle+0x2be>
2000013a:	ed84 6a15 	vstr	s12, [r4, #84]	; 0x54
2000013e:	eef4 9ae7 	vcmpe.f32	s19, s15
20000142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000146:	bfa8      	it	ge
20000148:	eef0 9a67 	vmovge.f32	s19, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000014c:	eddf 7a86 	vldr	s15, [pc, #536]	; 20000368 <_hook_cycle+0x2c2>
20000150:	ee69 9aa7 	vmul.f32	s19, s19, s15
20000154:	eddf 7a85 	vldr	s15, [pc, #532]	; 2000036c <_hook_cycle+0x2c6>
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
20000158:	edc4 9a01 	vstr	s19, [r4, #4]
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
		float lpf = clipmaxf(limit * w0, 0.49f);
2000015c:	ee29 7aa6 	vmul.f32	s14, s19, s13
20000160:	ee77 5a67 	vsub.f32	s11, s14, s15
20000164:	eef5 5ac0 	vcmpe.f32	s11, #0.0
20000168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000016c:	bfb8      	it	lt
2000016e:	eef0 7a47 	vmovlt.f32	s15, s14
		float hpf = clipminf((1.f / limit) * w0, ZEROF);
20000172:	ee8a 7a26 	vdiv.f32	s14, s20, s13
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000176:	ee67 7a85 	vmul.f32	s15, s15, s10
2000017a:	ee67 6a29 	vmul.f32	s13, s14, s19
2000017e:	ee36 7a66 	vsub.f32	s14, s12, s13
20000182:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
20000186:	ed9f 7a71 	vldr	s14, [pc, #452]	; 2000034c <_hook_cycle+0x2a6>
2000018a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000018e:	bfb8      	it	lt
20000190:	eeb0 7a66 	vmovlt.f32	s14, s13
    const uint32_t idx = (uint32_t)idxf;
20000194:	eefc 6ae7 	vcvt.u32.f32	s13, s15
20000198:	ee16 1a90 	vmov	r1, s13

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
2000019c:	ee05 1a90 	vmov	s11, r1
200001a0:	eef8 5a65 	vcvt.f32.u32	s11, s11
    const float y0 = tanpi_lut_f[idx];
200001a4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
200001a8:	edd0 6a00 	vldr	s13, [r0]
200001ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
200001b0:	edd0 5a01 	vldr	s11, [r0, #4]
200001b4:	ee75 5ae6 	vsub.f32	s11, s11, s13
200001b8:	eee7 6aa5 	vfma.f32	s13, s15, s11
       *
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
200001bc:	ee76 7a8a 	vadd.f32	s15, s13, s20
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001c0:	eec6 5aa7 	vdiv.f32	s11, s13, s15
        fb1 = km1 / kp1;
200001c4:	ee76 6aca 	vsub.f32	s13, s13, s20
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001c8:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
200001cc:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
        fb1 = km1 / kp1;
200001d0:	eec6 5aa7 	vdiv.f32	s11, s13, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200001d4:	ee67 7a05 	vmul.f32	s15, s14, s10
200001d8:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    const uint32_t idx = (uint32_t)idxf;
200001dc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200001e0:	ee17 1a10 	vmov	r1, s14
200001e4:	ee06 1a90 	vmov	s13, r1
200001e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
    const float y0 = tanpi_lut_f[idx];
200001ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
200001f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
200001f4:	ed90 7a00 	vldr	s14, [r0]
200001f8:	edd0 6a01 	vldr	s13, [r0, #4]
200001fc:	ee76 6ac7 	vsub.f32	s13, s13, s14
20000200:	eea7 7aa6 	vfma.f32	s14, s15, s13
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
20000204:	ee77 6a0a 	vadd.f32	s13, s14, s20
20000208:	eef0 7a47 	vmov.f32	s15, s14
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
2000020c:	ee8a 7a26 	vdiv.f32	s14, s20, s13
        ff1 = -ff0;
        fb1 = km1 / kp1;
20000210:	ee77 7aca 	vsub.f32	s15, s15, s20
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
20000214:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
        ff1 = -ff0;
20000218:	eeb1 7a47 	vneg.f32	s14, s14
2000021c:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
        fb1 = km1 / kp1;
20000220:	ee87 7aa6 	vdiv.f32	s14, s15, s13
20000224:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000228:	42b5      	cmp	r5, r6
2000022a:	f000 8088 	beq.w	2000033e <_hook_cycle+0x298>
	}

	inline float Formant(float phi) {
		
		float d = params.d;
		float v = params.v;
2000022e:	edd4 ba07 	vldr	s23, [r4, #28]
		return sig;
	}

	inline float Formant(float phi) {
		
		float d = params.d;
20000232:	edd4 ca06 	vldr	s25, [r4, #24]
		float interpolation_gain = formant_freq - (uint32_t)formant_freq;
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
20000236:	494e      	ldr	r1, [pc, #312]	; (20000370 <_hook_cycle+0x2ca>)
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float si_fabsf(float x)
{
  f32_t xs = {x};
  xs.i &= 0x7fffffff;
20000238:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
2000023c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
20000240:	eef0 8a48 	vmov.f32	s17, s16
20000244:	eeeb 8aa7 	vfma.f32	s17, s23, s15
20000248:	f1a1 000c 	sub.w	r0, r1, #12
2000024c:	eeb0 1a6b 	vmov.f32	s2, s23
20000250:	ee18 3a90 	vmov	r3, s17
20000254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20000258:	ee07 3a90 	vmov	s15, r3
		float *last_1 = &state.last_1;
		float *last_2 = &state.last_2;
		
		// Equation 7 in article
		float formant_freq = si_fabsf((2.f * v) - 1.f);
		float interpolation_gain = formant_freq - (uint32_t)formant_freq;
2000025c:	eefc 8ae7 	vcvt.u32.f32	s17, s15
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
20000260:	eef0 0a6c 	vmov.f32	s1, s25
		float *last_1 = &state.last_1;
		float *last_2 = &state.last_2;
		
		// Equation 7 in article
		float formant_freq = si_fabsf((2.f * v) - 1.f);
		float interpolation_gain = formant_freq - (uint32_t)formant_freq;
20000264:	eef8 8a68 	vcvt.f32.u32	s17, s17
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
20000268:	eeb0 0a49 	vmov.f32	s0, s18
		float *last_1 = &state.last_1;
		float *last_2 = &state.last_2;
		
		// Equation 7 in article
		float formant_freq = si_fabsf((2.f * v) - 1.f);
		float interpolation_gain = formant_freq - (uint32_t)formant_freq;
2000026c:	ee77 8ae8 	vsub.f32	s17, s15, s17
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
20000270:	f000 f8ec 	bl	2000044c <_ZN5VPSFI11PhaseShaperEfffPf>
		sig_1 *= (1 - interpolation_gain);
20000274:	ee7a aa68 	vsub.f32	s21, s20, s17
		state.last_1 = sig_1;
		
		float sig_2 = PhaseShaper(phi, d, v2, last_2);
20000278:	493e      	ldr	r1, [pc, #248]	; (20000374 <_hook_cycle+0x2ce>)
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
		sig_1 *= (1 - interpolation_gain);
2000027a:	ee6a aa80 	vmul.f32	s21, s21, s0
		state.last_1 = sig_1;
		
		float sig_2 = PhaseShaper(phi, d, v2, last_2);
2000027e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
20000282:	eeb0 0a49 	vmov.f32	s0, s18
20000286:	ee3b 1a81 	vadd.f32	s2, s23, s2
2000028a:	eef0 0a6c 	vmov.f32	s1, s25
2000028e:	f1a1 0010 	sub.w	r0, r1, #16
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
		sig_1 *= (1 - interpolation_gain);
		state.last_1 = sig_1;
20000292:	edc4 aa03 	vstr	s21, [r4, #12]
		
		float sig_2 = PhaseShaper(phi, d, v2, last_2);
20000296:	f000 f8d9 	bl	2000044c <_ZN5VPSFI11PhaseShaperEfffPf>
		sig_2 *= interpolation_gain;
2000029a:	ee28 0a80 	vmul.f32	s0, s17, s0
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
2000029e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
200002a2:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
		state.last_2 = sig_2;
200002a6:	ed84 0a04 	vstr	s0, [r4, #16]
		
		float sig = sig_1 + sig_2;
200002aa:	ee3a 0a80 	vadd.f32	s0, s21, s0
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002ae:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
200002b2:	edd4 6a14 	vldr	s13, [r4, #80]	; 0x50
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002b6:	eea0 6a27 	vfma.f32	s12, s0, s15
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002ba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
200002be:	ee27 7a46 	vnmul.f32	s14, s14, s12
		
		// Equation 8
		float v2 = v + 0.5f;
		
		float sig_1 = PhaseShaper(phi, d, v, last_1);
		sig_1 *= (1 - interpolation_gain);
200002c2:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
200002c6:	eea0 7a27 	vfma.f32	s14, s0, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002ca:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002ce:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002d2:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
200002d6:	eea6 7a27 	vfma.f32	s14, s12, s15
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002da:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
200002de:	ee66 6ac7 	vnmul.f32	s13, s13, s14
200002e2:	eee6 6a27 	vfma.f32	s13, s12, s15
		state.last_2 = sig_2;
		
		float sig = sig_1 + sig_2;
		sig = LPF.process_fo(sig);
		sig = HPF.process_fo(sig);
		sig = linintf(phi, state.last, sig);
200002e6:	edd4 7a02 	vldr	s15, [r4, #8]
200002ea:	edc4 6a16 	vstr	s13, [r4, #88]	; 0x58

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200002ee:	ee37 7a67 	vsub.f32	s14, s14, s15
200002f2:	eee9 7a07 	vfma.f32	s15, s18, s14
		LPF.mCoeffs.setFOLP(osc_tanpif(lpf));
		HPF.mCoeffs.setFOHP(osc_tanpif(hpf));
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
200002f6:	ee39 9a29 	vadd.f32	s18, s18, s19

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200002fa:	eef4 7ac8 	vcmpe.f32	s15, s16
		*phi -= (uint32_t)*phi;
200002fe:	eebc 7ac9 	vcvt.u32.f32	s14, s18
20000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000306:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		
		float sig = sig_1 + sig_2;
		sig = LPF.process_fo(sig);
		sig = HPF.process_fo(sig);
		sig = linintf(phi, state.last, sig);
		state.last = sig;
2000030a:	edc4 7a02 	vstr	s15, [r4, #8]
		HPF.mCoeffs.setFOHP(osc_tanpif(hpf));
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
		*phi -= (uint32_t)*phi;
2000030e:	ee39 9a47 	vsub.f32	s18, s18, s14
20000312:	db07      	blt.n	20000324 <_hook_cycle+0x27e>
20000314:	eef4 7acc 	vcmpe.f32	s15, s24
20000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000031c:	bfa8      	it	ge
2000031e:	eef0 7a4c 	vmovge.f32	s15, s24
20000322:	e001      	b.n	20000328 <_hook_cycle+0x282>
20000324:	eef0 7a48 	vmov.f32	s15, s16
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000328:	ee27 7aa7 	vmul.f32	s14, s15, s15
2000032c:	ee27 7ac7 	vnmul.f32	s14, s15, s14
20000330:	eee7 7a0b 	vfma.f32	s15, s14, s22
20000334:	eefe 7ae0 	vcvt.s32.f32	s15, s15, #31
20000338:	ece5 7a01 	vstmia	r5!, {s15}
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000033c:	e774      	b.n	20000228 <_hook_cycle+0x182>
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
	}
	
	// Update global osc phase
	s.phi = phi;
2000033e:	ed84 9a00 	vstr	s18, [r4]
	
}
20000342:	ecbd 8b0a 	vpop	{d8-d12}
20000346:	bd70      	pop	{r4, r5, r6, pc}
20000348:	20000580 	.word	0x20000580
2000034c:	00000000 	.word	0x00000000
20000350:	3b808081 	.word	0x3b808081
20000354:	44029cbc 	.word	0x44029cbc
20000358:	0800f100 	.word	0x0800f100
2000035c:	0800f764 	.word	0x0800f764
20000360:	3c4ccccd 	.word	0x3c4ccccd
20000364:	46b8ff49 	.word	0x46b8ff49
20000368:	37aec33e 	.word	0x37aec33e
2000036c:	3efae148 	.word	0x3efae148
20000370:	2000058c 	.word	0x2000058c
20000374:	20000590 	.word	0x20000590

20000378 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t *const params) {
	// Reset oscillator phase for new note
	VPSFI::State &s = vpsfi.state;
	s.flags |= VPSFI::flag_reset;
20000378:	4a02      	ldr	r2, [pc, #8]	; (20000384 <_hook_on+0xc>)
2000037a:	7d13      	ldrb	r3, [r2, #20]
2000037c:	f043 0301 	orr.w	r3, r3, #1
20000380:	7513      	strb	r3, [r2, #20]
20000382:	4770      	bx	lr
20000384:	20000580 	.word	0x20000580

20000388 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
20000388:	4770      	bx	lr

2000038a <_hook_param>:
	// Not used	
	(void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value) { 
2000038a:	ee07 1a90 	vmov	s15, r1
	
	VPSFI::Params &p = vpsfi.params;
	
	switch (index) {
2000038e:	2803      	cmp	r0, #3
20000390:	d852      	bhi.n	20000438 <_hook_param+0xae>
20000392:	e8df f000 	tbb	[pc, r0]
20000396:	1d02      	.short	0x1d02
20000398:	483c      	.short	0x483c
		case k_user_osc_param_id1:  		// User parameter 1
			// Set d values in range [0-1]
			p.d = clip01f(value * 0.005f);
2000039a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000039e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 2000043c <_hook_param+0xb2>
200003a2:	ee67 7a87 	vmul.f32	s15, s15, s14
200003a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003ae:	db09      	blt.n	200003c4 <_hook_param+0x3a>
200003b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003b4:	eef4 7ac7 	vcmpe.f32	s15, s14
200003b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003bc:	bfa8      	it	ge
200003be:	eef0 7a47 	vmovge.f32	s15, s14
200003c2:	e001      	b.n	200003c8 <_hook_param+0x3e>
200003c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 20000440 <_hook_param+0xb6>
200003c8:	4b1e      	ldr	r3, [pc, #120]	; (20000444 <_hook_param+0xba>)
200003ca:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
200003ce:	4770      	bx	lr
			
		case k_user_osc_param_id2:		 	// User parameter 2
			// Set v values
			p.v = clip01f(value * 0.005f) * p.v_range; 
200003d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200003d4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 2000043c <_hook_param+0xb2>
200003d8:	ee67 7a87 	vmul.f32	s15, s15, s14
200003dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003e4:	db09      	blt.n	200003fa <_hook_param+0x70>
200003e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003ea:	eef4 7ac7 	vcmpe.f32	s15, s14
200003ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003f2:	bfa8      	it	ge
200003f4:	eef0 7a47 	vmovge.f32	s15, s14
200003f8:	e001      	b.n	200003fe <_hook_param+0x74>
200003fa:	eddf 7a11 	vldr	s15, [pc, #68]	; 20000440 <_hook_param+0xb6>
200003fe:	4b11      	ldr	r3, [pc, #68]	; (20000444 <_hook_param+0xba>)
20000400:	ed93 7a08 	vldr	s14, [r3, #32]
20000404:	ee67 7a27 	vmul.f32	s15, s14, s15
20000408:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
2000040c:	4770      	bx	lr
			
		case k_user_osc_param_id3: 		 	// User parameter 3
			// Set v range 
			p.v_range = 1.f + value * 0.09f; // Range in [0-10]
2000040e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000412:	eddf 6a0d 	vldr	s13, [pc, #52]	; 20000448 <_hook_param+0xbe>
20000416:	4b0b      	ldr	r3, [pc, #44]	; (20000444 <_hook_param+0xba>)
20000418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000041c:	eea7 7aa6 	vfma.f32	s14, s15, s13
20000420:	ed83 7a08 	vstr	s14, [r3, #32]
			break;
20000424:	4770      	bx	lr
			
		case k_user_osc_param_id4:  		// User parameter 4
			// Set the frequency ratio for filters
			p.f_ratio = 1.f + (value * 1.f);
20000426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000042a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000042e:	ee77 7a87 	vadd.f32	s15, s15, s14
20000432:	4b04      	ldr	r3, [pc, #16]	; (20000444 <_hook_param+0xba>)
20000434:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
20000438:	4770      	bx	lr
2000043a:	bf00      	nop
2000043c:	3ba3d70a 	.word	0x3ba3d70a
20000440:	00000000 	.word	0x00000000
20000444:	20000580 	.word	0x20000580
20000448:	3db851ec 	.word	0x3db851ec

2000044c <_ZN5VPSFI11PhaseShaperEfffPf>:
	
	inline float PhaseShaper(float phi, float d, float v, float *last_sig) {
		
		float ps;
		
		if(phi < d) {
2000044c:	eeb4 0ae0 	vcmpe.f32	s0, s1
20000450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			ps = phi / d;
			ps *= v;
		} else {
			ps = phi - d;
			ps /= (1.f - d);
20000454:	bf5d      	ittte	pl
20000456:	eef7 7a00 	vmovpl.f32	s15, #112	; 0x3f800000  1.0
		
		if(phi < d) {
			ps = phi / d;
			ps *= v;
		} else {
			ps = phi - d;
2000045a:	ee70 6a60 	vsubpl.f32	s13, s0, s1
			ps /= (1.f - d);
2000045e:	ee77 0ae0 	vsubpl.f32	s1, s15, s1
	inline float PhaseShaper(float phi, float d, float v, float *last_sig) {
		
		float ps;
		
		if(phi < d) {
			ps = phi / d;
20000462:	eec0 7a20 	vdivmi.f32	s15, s0, s1
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float PhaseShaper(float phi, float d, float v, float *last_sig) {
20000466:	b530      	push	{r4, r5, lr}
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000468:	4a30      	ldr	r2, [pc, #192]	; (2000052c <_ZN5VPSFI11PhaseShaperEfffPf+0xe0>)
		if(phi < d) {
			ps = phi / d;
			ps *= v;
		} else {
			ps = phi - d;
			ps /= (1.f - d);
2000046a:	bf5b      	ittet	pl
2000046c:	ee86 7aa0 	vdivpl.f32	s14, s13, s1
			ps *= (1.f - v);
			ps += v;
20000470:	ee77 7ac1 	vsubpl.f32	s15, s15, s2
		
		float ps;
		
		if(phi < d) {
			ps = phi / d;
			ps *= v;
20000474:	ee27 1a81 	vmulmi.f32	s2, s15, s2
		} else {
			ps = phi - d;
			ps /= (1.f - d);
			ps *= (1.f - v);
			ps += v;
20000478:	eea7 1a27 	vfmapl.f32	s2, s14, s15
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000047c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
20000480:	ee31 1a27 	vadd.f32	s2, s2, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20000484:	edd0 6a0f 	vldr	s13, [r0, #60]	; 0x3c
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20000488:	ed90 6a0b 	vldr	s12, [r0, #44]	; 0x2c
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000048c:	eefc 7ac1 	vcvt.u32.f32	s15, s2
20000490:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000494:	ee31 1a67 	vsub.f32	s2, s2, s15
20000498:	eddf 7a25 	vldr	s15, [pc, #148]	; 20000530 <_ZN5VPSFI11PhaseShaperEfffPf+0xe4>
2000049c:	ee21 1a27 	vmul.f32	s2, s2, s15
    const uint32_t x0p = (uint32_t)x0f;
200004a0:	eefc 7ac1 	vcvt.u32.f32	s15, s2
200004a4:	ee17 4a90 	vmov	r4, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
200004a8:	f004 037f 	and.w	r3, r4, #127	; 0x7f

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200004ac:	ee07 4a10 	vmov	s14, r4
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200004b0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
200004b4:	3301      	adds	r3, #1
200004b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
200004ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200004be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
200004c2:	edd5 7a00 	vldr	s15, [r5]
200004c6:	ee31 1a47 	vsub.f32	s2, s2, s14
200004ca:	ed93 7a00 	vldr	s14, [r3]
200004ce:	ee37 7a67 	vsub.f32	s14, s14, s15
    return (x0p < k_wt_sine_size)?y0:-y0;
200004d2:	2c7f      	cmp	r4, #127	; 0x7f
200004d4:	eee1 7a07 	vfma.f32	s15, s2, s14
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200004d8:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
200004dc:	bf88      	it	hi
200004de:	eef1 7a67 	vneghi.f32	s15, s15
		}
		
		float sig = -osc_cosf(ps);
200004e2:	eef1 7a67 	vneg.f32	s15, s15
200004e6:	eee7 6a87 	vfma.f32	s13, s15, s14
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200004ea:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
200004ee:	ee27 7a66 	vnmul.f32	s14, s14, s13
200004f2:	eea7 7a86 	vfma.f32	s14, s15, s12
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200004f6:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200004fa:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200004fe:	ed90 7a11 	vldr	s14, [r0, #68]	; 0x44
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20000502:	ed90 6a12 	vldr	s12, [r0, #72]	; 0x48
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20000506:	eee7 7a26 	vfma.f32	s15, s14, s13
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
2000050a:	ed90 7a14 	vldr	s14, [r0, #80]	; 0x50
2000050e:	ee27 7a67 	vnmul.f32	s14, s14, s15
20000512:	eea6 7a26 	vfma.f32	s14, s12, s13
20000516:	ed80 7a16 	vstr	s14, [r0, #88]	; 0x58
		sig = LPF.process_fo(sig);
		sig = HPF.process_fo(sig);
		sig = linintf(phi, *last_sig, sig);
2000051a:	ed91 7a00 	vldr	s14, [r1]

		return sig;
2000051e:	ee77 7ac7 	vsub.f32	s15, s15, s14
	}
20000522:	eea0 7a27 	vfma.f32	s14, s0, s15
20000526:	eeb0 0a47 	vmov.f32	s0, s14
2000052a:	bd30      	pop	{r4, r5, pc}
2000052c:	08012bdc 	.word	0x08012bdc
20000530:	43800000 	.word	0x43800000

20000534 <_GLOBAL__sub_I__hook_init>:
		
		Params(void) :
			d(DEFAULT),
			v(DEFAULT),
			v_range(ONEF),
			f_ratio(ONEF)	
20000534:	4b10      	ldr	r3, [pc, #64]	; (20000578 <_GLOBAL__sub_I__hook_init+0x44>)
20000536:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
2000053a:	619a      	str	r2, [r3, #24]
2000053c:	61da      	str	r2, [r3, #28]
2000053e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
20000542:	621a      	str	r2, [r3, #32]
20000544:	625a      	str	r2, [r3, #36]	; 0x24
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20000546:	2200      	movs	r2, #0
20000548:	629a      	str	r2, [r3, #40]	; 0x28
2000054a:	62da      	str	r2, [r3, #44]	; 0x2c
2000054c:	631a      	str	r2, [r3, #48]	; 0x30
2000054e:	635a      	str	r2, [r3, #52]	; 0x34
20000550:	639a      	str	r2, [r3, #56]	; 0x38
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000552:	63da      	str	r2, [r3, #60]	; 0x3c
20000554:	641a      	str	r2, [r3, #64]	; 0x40
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20000556:	645a      	str	r2, [r3, #68]	; 0x44
20000558:	649a      	str	r2, [r3, #72]	; 0x48
2000055a:	64da      	str	r2, [r3, #76]	; 0x4c
2000055c:	651a      	str	r2, [r3, #80]	; 0x50
2000055e:	655a      	str	r2, [r3, #84]	; 0x54
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000560:	659a      	str	r2, [r3, #88]	; 0x58
20000562:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
	};
	
	VPSFI(void) {
		state = State();
20000564:	601a      	str	r2, [r3, #0]
20000566:	605a      	str	r2, [r3, #4]
20000568:	609a      	str	r2, [r3, #8]
2000056a:	60da      	str	r2, [r3, #12]
2000056c:	611a      	str	r2, [r3, #16]
2000056e:	7d1a      	ldrb	r2, [r3, #20]
20000570:	f36f 0200 	bfc	r2, #0, #1
20000574:	751a      	strb	r2, [r3, #20]
20000576:	4770      	bx	lr
20000578:	20000580 	.word	0x20000580
