
build/vps_intpl.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	2000044f 	.word	0x2000044f
20000098:	200004a3 	.word	0x200004a3
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
# include "userosc.h"
# include "vps_intpl.hpp"

static VPS vps;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	
	// Local copy of the state object.
	VPS::State &s = vps.state;
	
	// Get current flag
	const uint32_t flags = s.flags; 
200000a6:	4ba2      	ldr	r3, [pc, #648]	; (20000330 <_hook_cycle+0x28a>)

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000a8:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 20000334 <_hook_cycle+0x28e>
		state = State();
		params = Params();
	}
	
	inline void setFilters(float w0) {
		float limit = params.f_ratio;
200000ac:	edd3 4a06 	vldr	s9, [r3, #24]
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200000b0:	ed9f 5aa1 	vldr	s10, [pc, #644]	; 20000338 <_hook_cycle+0x292>
		LPF.mCoeffs.setFOLP(osc_tanpif(limit * w0));
		HPF.mCoeffs.setFOHP(osc_tanpif((1.f / limit) * w0));
	}
	
	inline float PhaseShaper(float phi) {
		float d = params.d;
200000b4:	edd3 3a04 	vldr	s7, [r3, #16]
		float v = params.v;
200000b8:	edd3 1a05 	vldr	s3, [r3, #20]
200000bc:	ed93 4a0c 	vldr	s8, [r3, #48]	; 0x30
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000c0:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 2000033c <_hook_cycle+0x296>
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000c4:	b570      	push	{r4, r5, r6, lr}
	
	// Local copy of the state object.
	VPS::State &s = vps.state;
	
	// Get current flag
	const uint32_t flags = s.flags; 
200000c6:	7b1c      	ldrb	r4, [r3, #12]
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
	
	// Reset state if note-on trigger
	if(flags & VPS::flag_reset) {
200000c8:	f014 0f01 	tst.w	r4, #1
	
	// Get current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
200000cc:	4625      	mov	r5, r4
	if(flags & VPS::flag_reset) {
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000ce:	8884      	ldrh	r4, [r0, #4]
	
	// Get current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
200000d0:	f36f 0500 	bfc	r5, #0, #1
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000d4:	ed2d 8b06 	vpush	{d8-d10}
	if(flags & VPS::flag_reset) {
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000d8:	ea4f 2024 	mov.w	r0, r4, asr #8
	
	// Get current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
200000dc:	731d      	strb	r5, [r3, #12]
200000de:	f04f 0500 	mov.w	r5, #0
		{
			reset();
		}
		
		inline void reset(void) {
			phi = ZEROF;
200000e2:	bf18      	it	ne
200000e4:	601d      	strne	r5, [r3, #0]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000e6:	2896      	cmp	r0, #150	; 0x96
200000e8:	bfd8      	it	le
200000ea:	4606      	movle	r6, r0
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ec:	b2e4      	uxtb	r4, r4
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000ee:	f100 0001 	add.w	r0, r0, #1
200000f2:	b2c0      	uxtb	r0, r0
200000f4:	ee07 4a90 	vmov	s15, r4
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000f8:	bfc8      	it	gt
200000fa:	2697      	movgt	r6, #151	; 0x97
200000fc:	4c90      	ldr	r4, [pc, #576]	; (20000340 <_hook_cycle+0x29a>)
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
200000fe:	625d      	str	r5, [r3, #36]	; 0x24
20000100:	2896      	cmp	r0, #150	; 0x96
20000102:	bf88      	it	hi
20000104:	2097      	movhi	r0, #151	; 0x97
20000106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000010a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
2000010e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
20000112:	edd6 5a00 	vldr	s11, [r6]
20000116:	62dd      	str	r5, [r3, #44]	; 0x2c
20000118:	ee67 7a87 	vmul.f32	s15, s15, s14
2000011c:	ed90 7a00 	vldr	s14, [r0]
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
20000120:	4888      	ldr	r0, [pc, #544]	; (20000344 <_hook_cycle+0x29e>)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000122:	641d      	str	r5, [r3, #64]	; 0x40
20000124:	ee37 7a65 	vsub.f32	s14, s14, s11
20000128:	649d      	str	r5, [r3, #72]	; 0x48
2000012a:	eee7 5a87 	vfma.f32	s11, s15, s14
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000012e:	4d86      	ldr	r5, [pc, #536]	; (20000348 <_hook_cycle+0x2a2>)

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000130:	eddf 7a86 	vldr	s15, [pc, #536]	; 2000034c <_hook_cycle+0x2a6>
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000134:	ed9f 9a86 	vldr	s18, [pc, #536]	; 20000350 <_hook_cycle+0x2aa>
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000138:	ed9f 8a86 	vldr	s16, [pc, #536]	; 20000354 <_hook_cycle+0x2ae>
2000013c:	eef4 5ae7 	vcmpe.f32	s11, s15
20000140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000144:	bfa8      	it	ge
20000146:	eef0 5a67 	vmovge.f32	s11, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000014a:	eddf 7a83 	vldr	s15, [pc, #524]	; 20000358 <_hook_cycle+0x2b2>
2000014e:	ee65 5aa7 	vmul.f32	s11, s11, s15
	
	// Pointer to start of buffer
	q31_t *__restrict y = (q31_t*)yn; 
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 
20000152:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000156:	ee65 6aa4 	vmul.f32	s13, s11, s9
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
2000015a:	edc3 5a01 	vstr	s11, [r3, #4]
2000015e:	ee66 6a85 	vmul.f32	s13, s13, s10
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000162:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
20000166:	eefc 7ae6 	vcvt.u32.f32	s15, s13
2000016a:	eeff 9a00 	vmov.f32	s19, #240	; 0xbf800000 -1.0
2000016e:	ee17 4a90 	vmov	r4, s15
    const float y0 = tanpi_lut_f[idx];
20000172:	eb00 0684 	add.w	r6, r0, r4, lsl #2
20000176:	ed96 7a00 	vldr	s14, [r6]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
2000017a:	ed96 6a01 	vldr	s12, [r6, #4]
2000017e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000182:	ee36 6a47 	vsub.f32	s12, s12, s14
20000186:	ee76 6ae7 	vsub.f32	s13, s13, s15
2000018a:	eea6 7a86 	vfma.f32	s14, s13, s12
       *
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
2000018e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
20000192:	ee77 7a26 	vadd.f32	s15, s14, s13

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000196:	eeb0 aa66 	vmov.f32	s20, s13
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
2000019a:	ee87 3a27 	vdiv.f32	s6, s14, s15
        fb1 = km1 / kp1;
2000019e:	ee37 7a66 	vsub.f32	s14, s14, s13
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001a2:	ed83 3a08 	vstr	s6, [r3, #32]
        fb1 = km1 / kp1;
200001a6:	eec7 2a27 	vdiv.f32	s5, s14, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200001aa:	eec6 7aa4 	vdiv.f32	s15, s13, s9
200001ae:	edd3 4a13 	vldr	s9, [r3, #76]	; 0x4c
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001b2:	ed83 3a07 	vstr	s6, [r3, #28]
200001b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
        fb1 = km1 / kp1;
200001ba:	edc3 2a0a 	vstr	s5, [r3, #40]	; 0x28
200001be:	ee67 7a85 	vmul.f32	s15, s15, s10
200001c2:	ed93 5a02 	vldr	s10, [r3, #8]
    const uint32_t idx = (uint32_t)idxf;
200001c6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
200001ca:	ee17 4a10 	vmov	r4, s14

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001ce:	ee06 4a10 	vmov	s12, r4
200001d2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    const float y0 = tanpi_lut_f[idx];
200001d6:	eb00 0684 	add.w	r6, r0, r4, lsl #2
200001da:	ee77 7ac6 	vsub.f32	s15, s15, s12
200001de:	ed96 7a00 	vldr	s14, [r6]
200001e2:	ed96 6a01 	vldr	s12, [r6, #4]
200001e6:	ee36 6a47 	vsub.f32	s12, s12, s14
200001ea:	eea7 7a86 	vfma.f32	s14, s15, s12
	
	// Set pole for filters
	vps.setFilters(w0);
	
	// Local copies of the state object fields.
	float phi = s.phi;
200001ee:	ed93 6a00 	vldr	s12, [r3]
200001f2:	eef0 7a47 	vmov.f32	s15, s14
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
200001f6:	ee37 7a26 	vadd.f32	s14, s14, s13
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
200001fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
200001fe:	ee86 2a87 	vdiv.f32	s4, s13, s14
        ff1 = -ff0;
        fb1 = km1 / kp1;
20000202:	eec7 0a87 	vdiv.f32	s1, s15, s14
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
20000206:	eeb1 1a42 	vneg.f32	s2, s4
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
2000020a:	ed83 2a0e 	vstr	s4, [r3, #56]	; 0x38
        ff1 = -ff0;
2000020e:	ed83 1a0f 	vstr	s2, [r3, #60]	; 0x3c
        fb1 = km1 / kp1;
20000212:	edc3 0a11 	vstr	s1, [r3, #68]	; 0x44
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000216:	4291      	cmp	r1, r2
20000218:	d07e      	beq.n	20000318 <_hook_cycle+0x272>
	inline float PhaseShaper(float phi) {
		float d = params.d;
		float v = params.v;
		
		float ps;
		if(phi < d) {
2000021a:	eeb4 6ae3 	vcmpe.f32	s12, s7
2000021e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000222:	d504      	bpl.n	2000022e <_hook_cycle+0x188>
			ps = phi / d;
20000224:	ee86 7a23 	vdiv.f32	s14, s12, s7
			ps *= v;
20000228:	ee21 7a87 	vmul.f32	s14, s3, s14
2000022c:	e00d      	b.n	2000024a <_hook_cycle+0x1a4>
		} else {
			ps = phi - d;
2000022e:	ee76 7a63 	vsub.f32	s15, s12, s7
			ps /= (1.f - d);
20000232:	ee76 aae3 	vsub.f32	s21, s13, s7
20000236:	ee87 7aaa 	vdiv.f32	s14, s15, s21
			ps *= (1.f - v);
			ps += v;
2000023a:	ee76 7ae1 	vsub.f32	s15, s13, s3
2000023e:	eef0 aa61 	vmov.f32	s21, s3
20000242:	eee7 aa27 	vfma.f32	s21, s14, s15
20000246:	eeb0 7a6a 	vmov.f32	s14, s21
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000024a:	ee37 7a28 	vadd.f32	s14, s14, s17
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
2000024e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
20000252:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000256:	ee77 7a67 	vsub.f32	s15, s14, s15
2000025a:	ee67 7a89 	vmul.f32	s15, s15, s18
    const uint32_t x0p = (uint32_t)x0f;
2000025e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000262:	ee17 4a10 	vmov	r4, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000266:	f004 007f 	and.w	r0, r4, #127	; 0x7f
2000026a:	ee0a 4a90 	vmov	s21, r4
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000026e:	eb05 0680 	add.w	r6, r5, r0, lsl #2
20000272:	3001      	adds	r0, #1
20000274:	eef8 aa6a 	vcvt.f32.u32	s21, s21
20000278:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2000027c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
20000280:	ee77 7aea 	vsub.f32	s15, s15, s21
20000284:	ed96 7a00 	vldr	s14, [r6]
20000288:	edd0 aa00 	vldr	s21, [r0]
2000028c:	ee7a aac7 	vsub.f32	s21, s21, s14
    return (x0p < k_wt_sine_size)?y0:-y0;
20000290:	2c7f      	cmp	r4, #127	; 0x7f
20000292:	eea7 7aaa 	vfma.f32	s14, s15, s21
20000296:	eef0 7a47 	vmov.f32	s15, s14
2000029a:	bf88      	it	hi
2000029c:	eef1 7a47 	vneghi.f32	s15, s14
		}
		
		float sig = -osc_cosf(ps);
200002a0:	eef1 7a67 	vneg.f32	s15, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002a4:	eeb0 7a44 	vmov.f32	s14, s8
200002a8:	eea3 7a27 	vfma.f32	s14, s6, s15
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002ac:	ee27 4a62 	vnmul.f32	s8, s14, s5
200002b0:	eea3 4a27 	vfma.f32	s8, s6, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002b4:	eef0 7a64 	vmov.f32	s15, s9
200002b8:	eee2 7a07 	vfma.f32	s15, s4, s14
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002bc:	ee67 4ae0 	vnmul.f32	s9, s15, s1
200002c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
200002c4:	eee1 4a07 	vfma.f32	s9, s2, s14
200002c8:	eea6 5a27 	vfma.f32	s10, s12, s15

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200002cc:	eeb4 5ae9 	vcmpe.f32	s10, s19
200002d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002d4:	db09      	blt.n	200002ea <_hook_cycle+0x244>
200002d6:	eeb4 5ae6 	vcmpe.f32	s10, s13
200002da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002de:	bfb4      	ite	lt
200002e0:	eef0 7a45 	vmovlt.f32	s15, s10
200002e4:	eef0 7a4a 	vmovge.f32	s15, s20
200002e8:	e001      	b.n	200002ee <_hook_cycle+0x248>
200002ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200002ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
		
		// Update local osc phase
		phi += w0;
200002f2:	ee36 6a25 	vadd.f32	s12, s12, s11
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.0125f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200002f6:	ee27 7ac7 	vnmul.f32	s14, s15, s14
200002fa:	eee7 7a08 	vfma.f32	s15, s14, s16
200002fe:	ee67 7a80 	vmul.f32	s15, s15, s0
20000302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
20000306:	ece1 7a01 	vstmia	r1!, {s15}
		
		// Update local osc phase
		phi += w0;
		phi -= (uint32_t)phi;
2000030a:	eefc 7ac6 	vcvt.u32.f32	s15, s12
2000030e:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000312:	ee36 6a67 	vsub.f32	s12, s12, s15
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000316:	e77e      	b.n	20000216 <_hook_cycle+0x170>
	}
	
	// Update global osc phase
	s.phi = phi;
	
}
20000318:	ecbd 8b06 	vpop	{d8-d10}
2000031c:	ed83 4a0c 	vstr	s8, [r3, #48]	; 0x30
20000320:	edc3 4a13 	vstr	s9, [r3, #76]	; 0x4c
20000324:	ed83 5a02 	vstr	s10, [r3, #8]
		phi += w0;
		phi -= (uint32_t)phi;
	}
	
	// Update global osc phase
	s.phi = phi;
20000328:	ed83 6a00 	vstr	s12, [r3]
	
}
2000032c:	bd70      	pop	{r4, r5, r6, pc}
2000032e:	bf00      	nop
20000330:	20000450 	.word	0x20000450
20000334:	3b808081 	.word	0x3b808081
20000338:	44029cbc 	.word	0x44029cbc
2000033c:	4f000000 	.word	0x4f000000
20000340:	0800f100 	.word	0x0800f100
20000344:	0800f764 	.word	0x0800f764
20000348:	08012bdc 	.word	0x08012bdc
2000034c:	46b8ff49 	.word	0x46b8ff49
20000350:	43800000 	.word	0x43800000
20000354:	3c4ccccd 	.word	0x3c4ccccd
20000358:	37aec33e 	.word	0x37aec33e

2000035c <_hook_on>:

void OSC_NOTEON(const user_osc_param_t *const params) {
	// Reset oscillator phase for new note
	VPS::State &s = vps.state;
	s.flags |= VPS::flag_reset;
2000035c:	4a02      	ldr	r2, [pc, #8]	; (20000368 <_hook_on+0xc>)
2000035e:	7b13      	ldrb	r3, [r2, #12]
20000360:	f043 0301 	orr.w	r3, r3, #1
20000364:	7313      	strb	r3, [r2, #12]
20000366:	4770      	bx	lr
20000368:	20000450 	.word	0x20000450

2000036c <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
2000036c:	4770      	bx	lr

2000036e <_hook_param>:

void OSC_PARAM(uint16_t index, uint16_t value) {
	
	VPS::Params &p = vps.params;
	
	switch (index) {
2000036e:	2801      	cmp	r0, #1
void OSC_NOTEOFF(const user_osc_param_t *const params) {
	// Not used
	(void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value) {
20000370:	ee07 1a90 	vmov	s15, r1
	
	VPS::Params &p = vps.params;
	
	switch (index) {
20000374:	d01e      	beq.n	200003b4 <_hook_param+0x46>
20000376:	d302      	bcc.n	2000037e <_hook_param+0x10>
20000378:	2802      	cmp	r0, #2
2000037a:	d036      	beq.n	200003ea <_hook_param+0x7c>
2000037c:	4770      	bx	lr
		case k_user_osc_param_id1: // User parameter 1
			// Set d value in range [0-1]
			p.d = clip01f(value * 0.01f);
2000037e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000382:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 20000400 <_hook_param+0x92>
20000386:	ee67 7a87 	vmul.f32	s15, s15, s14
2000038a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2000038e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000392:	db09      	blt.n	200003a8 <_hook_param+0x3a>
20000394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000398:	eef4 7ac7 	vcmpe.f32	s15, s14
2000039c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003a0:	bfa8      	it	ge
200003a2:	eef0 7a47 	vmovge.f32	s15, s14
200003a6:	e001      	b.n	200003ac <_hook_param+0x3e>
200003a8:	eddf 7a16 	vldr	s15, [pc, #88]	; 20000404 <_hook_param+0x96>
200003ac:	4b16      	ldr	r3, [pc, #88]	; (20000408 <_hook_param+0x9a>)
200003ae:	edc3 7a04 	vstr	s15, [r3, #16]
			break;
200003b2:	4770      	bx	lr
			
		case k_user_osc_param_id2: // User parameter 2
			// Set v value in range [0-1]
			p.v = clip01f(value * 0.01f);
200003b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200003b8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 20000400 <_hook_param+0x92>
200003bc:	ee67 7a87 	vmul.f32	s15, s15, s14
200003c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003c8:	db09      	blt.n	200003de <_hook_param+0x70>
200003ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003ce:	eef4 7ac7 	vcmpe.f32	s15, s14
200003d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003d6:	bfa8      	it	ge
200003d8:	eef0 7a47 	vmovge.f32	s15, s14
200003dc:	e001      	b.n	200003e2 <_hook_param+0x74>
200003de:	eddf 7a09 	vldr	s15, [pc, #36]	; 20000404 <_hook_param+0x96>
200003e2:	4b09      	ldr	r3, [pc, #36]	; (20000408 <_hook_param+0x9a>)
200003e4:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
200003e8:	4770      	bx	lr
			
		case k_user_osc_param_id3: // User parameter 3
			// Set the frequency ratio for filters
			p.f_ratio = 1.f + (value * 1.f);
200003ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200003ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003f2:	ee77 7a87 	vadd.f32	s15, s15, s14
200003f6:	4b04      	ldr	r3, [pc, #16]	; (20000408 <_hook_param+0x9a>)
200003f8:	edc3 7a06 	vstr	s15, [r3, #24]
200003fc:	4770      	bx	lr
200003fe:	bf00      	nop
20000400:	3c23d70a 	.word	0x3c23d70a
20000404:	00000000 	.word	0x00000000
20000408:	20000450 	.word	0x20000450

2000040c <_GLOBAL__sub_I__hook_init>:
		uint32_t flags: 1;	// Bit field
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			last(ZEROF),
			flags(flags_none)
2000040c:	4b0f      	ldr	r3, [pc, #60]	; (2000044c <_GLOBAL__sub_I__hook_init+0x40>)
2000040e:	7b19      	ldrb	r1, [r3, #12]
20000410:	f36f 0100 	bfc	r1, #0, #1
20000414:	7319      	strb	r1, [r3, #12]
		float	f_ratio; 	// Frequency ratio for filters
		
		Params(void) :
			d(DEFAULT),
			v(DEFAULT),
			f_ratio(ONEF)
20000416:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
		uint32_t flags: 1;	// Bit field
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			last(ZEROF),
			flags(flags_none)
2000041a:	2200      	movs	r2, #0
		float	f_ratio; 	// Frequency ratio for filters
		
		Params(void) :
			d(DEFAULT),
			v(DEFAULT),
			f_ratio(ONEF)
2000041c:	6119      	str	r1, [r3, #16]
2000041e:	6159      	str	r1, [r3, #20]
20000420:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		uint32_t flags: 1;	// Bit field
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			last(ZEROF),
			flags(flags_none)
20000424:	601a      	str	r2, [r3, #0]
20000426:	605a      	str	r2, [r3, #4]
20000428:	609a      	str	r2, [r3, #8]
		float	f_ratio; 	// Frequency ratio for filters
		
		Params(void) :
			d(DEFAULT),
			v(DEFAULT),
			f_ratio(ONEF)
2000042a:	6199      	str	r1, [r3, #24]
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
2000042c:	61da      	str	r2, [r3, #28]
2000042e:	621a      	str	r2, [r3, #32]
20000430:	625a      	str	r2, [r3, #36]	; 0x24
20000432:	629a      	str	r2, [r3, #40]	; 0x28
20000434:	62da      	str	r2, [r3, #44]	; 0x2c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000436:	631a      	str	r2, [r3, #48]	; 0x30
20000438:	635a      	str	r2, [r3, #52]	; 0x34
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
2000043a:	639a      	str	r2, [r3, #56]	; 0x38
2000043c:	63da      	str	r2, [r3, #60]	; 0x3c
2000043e:	641a      	str	r2, [r3, #64]	; 0x40
20000440:	645a      	str	r2, [r3, #68]	; 0x44
20000442:	649a      	str	r2, [r3, #72]	; 0x48
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000444:	64da      	str	r2, [r3, #76]	; 0x4c
20000446:	651a      	str	r2, [r3, #80]	; 0x50
20000448:	4770      	bx	lr
2000044a:	bf00      	nop
2000044c:	20000450 	.word	0x20000450
