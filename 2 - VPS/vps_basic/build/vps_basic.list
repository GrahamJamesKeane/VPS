
build/vps_basic.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	2000042f 	.word	0x2000042f
20000098:	2000047b 	.word	0x2000047b
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
# include "userosc.h"
# include "vps_basic.hpp"

static VPS vps;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	
	// Local copy of the state object.
	VPS::State &s = vps.state;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000a6:	8880      	ldrh	r0, [r0, #4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000a8:	eddf 6a9b 	vldr	s13, [pc, #620]	; 20000318 <_hook_cycle+0x272>

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200000ac:	ed9f 6a9b 	vldr	s12, [pc, #620]	; 2000031c <_hook_cycle+0x276>
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.29f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200000b0:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 20000320 <_hook_cycle+0x27a>
	
	// Local copy of the state object.
	VPS::State &s = vps.state;
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000b4:	1203      	asrs	r3, r0, #8
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000b6:	2b96      	cmp	r3, #150	; 0x96
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000b8:	b570      	push	{r4, r5, r6, lr}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ba:	b2c0      	uxtb	r0, r0
200000bc:	bfd8      	it	le
200000be:	461c      	movle	r4, r3
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000c0:	f103 0301 	add.w	r3, r3, #1
200000c4:	b2db      	uxtb	r3, r3
200000c6:	ee07 0a90 	vmov	s15, r0
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000ca:	bfc8      	it	gt
200000cc:	2497      	movgt	r4, #151	; 0x97
200000ce:	4895      	ldr	r0, [pc, #596]	; (20000324 <_hook_cycle+0x27e>)
200000d0:	2b96      	cmp	r3, #150	; 0x96
200000d2:	bf88      	it	hi
200000d4:	2397      	movhi	r3, #151	; 0x97

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200000da:	eb00 0484 	add.w	r4, r0, r4, lsl #2
200000de:	eb00 0383 	add.w	r3, r0, r3, lsl #2
200000e2:	ed94 7a00 	vldr	s14, [r4]
200000e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
200000ea:	edd3 6a00 	vldr	s13, [r3]
200000ee:	4b8e      	ldr	r3, [pc, #568]	; (20000328 <_hook_cycle+0x282>)
200000f0:	ee76 6ac7 	vsub.f32	s13, s13, s14
	
	// Get current flag
	const uint32_t flags = s.flags; 
200000f4:	7a18      	ldrb	r0, [r3, #8]
		LPF.mCoeffs.setFOLP(osc_tanpif(4.f * w0));
		HPF.mCoeffs.setFOHP(osc_tanpif(0.25f * w0));
	}
	
	inline float PhaseShaper(float phi) {
		float d = params.d;
200000f6:	ed93 4a03 	vldr	s8, [r3, #12]
		float v = params.v;
200000fa:	edd3 1a04 	vldr	s3, [r3, #16]
200000fe:	edd3 4a0a 	vldr	s9, [r3, #40]	; 0x28
20000102:	ed93 5a11 	vldr	s10, [r3, #68]	; 0x44
20000106:	eea7 7aa6 	vfma.f32	s14, s15, s13
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
2000010a:	4604      	mov	r4, r0
2000010c:	f36f 0400 	bfc	r4, #0, #1
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000110:	eddf 7a86 	vldr	s15, [pc, #536]	; 2000032c <_hook_cycle+0x286>
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000114:	eddf 6a86 	vldr	s13, [pc, #536]	; 20000330 <_hook_cycle+0x28a>

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000118:	eeb4 7ac6 	vcmpe.f32	s14, s12
2000011c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000120:	bfb8      	it	lt
20000122:	eeb0 6a47 	vmovlt.f32	s12, s14
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
20000126:	ee26 6a27 	vmul.f32	s12, s12, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
2000012a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
2000012e:	ee26 7a07 	vmul.f32	s14, s12, s14
	
	// Reset state if note-on trigger
	if(flags & VPS::flag_reset) {
20000132:	f010 0f01 	tst.w	r0, #1
20000136:	ee27 7a26 	vmul.f32	s14, s14, s13
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
2000013a:	487e      	ldr	r0, [pc, #504]	; (20000334 <_hook_cycle+0x28e>)
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
2000013c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000140:	eeb5 3a00 	vmov.f32	s6, #80	; 0x3e800000  0.250
    const uint32_t idx = (uint32_t)idxf;
20000144:	ee17 5a90 	vmov	r5, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000148:	ee05 5a90 	vmov	s11, r5
2000014c:	eef8 5a65 	vcvt.f32.u32	s11, s11
    const float y0 = tanpi_lut_f[idx];
20000150:	eb00 0685 	add.w	r6, r0, r5, lsl #2
20000154:	edd6 7a00 	vldr	s15, [r6]
20000158:	ee37 7a65 	vsub.f32	s14, s14, s11
2000015c:	edd6 5a01 	vldr	s11, [r6, #4]
20000160:	ee75 5ae7 	vsub.f32	s11, s11, s15
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
20000164:	ed2d 8b06 	vpush	{d8-d10}
20000168:	eee7 7a25 	vfma.f32	s15, s14, s11
	
	// Get current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = VPS::flags_none; 
2000016c:	721c      	strb	r4, [r3, #8]
2000016e:	f04f 0400 	mov.w	r4, #0
       *
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
20000172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000176:	ee77 5a87 	vadd.f32	s11, s15, s14
		{
			reset();
		}
		
		inline void reset(void) {
			phi = ZEROF;
2000017a:	bf18      	it	ne
2000017c:	601c      	strne	r4, [r3, #0]
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
2000017e:	eec7 3aa5 	vdiv.f32	s7, s15, s11
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000182:	61dc      	str	r4, [r3, #28]
20000184:	625c      	str	r4, [r3, #36]	; 0x24
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000186:	639c      	str	r4, [r3, #56]	; 0x38
20000188:	641c      	str	r4, [r3, #64]	; 0x40
	
	// Pointer to start of buffer
	q31_t *__restrict y = (q31_t*)yn;
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 
2000018a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
        fb1 = km1 / kp1;
2000018e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000192:	eddf 8a69 	vldr	s17, [pc, #420]	; 20000338 <_hook_cycle+0x292>
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.29f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000196:	ed9f 8a69 	vldr	s16, [pc, #420]	; 2000033c <_hook_cycle+0x296>
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
2000019a:	ed83 6a01 	vstr	s12, [r3, #4]
2000019e:	eec7 2aa5 	vdiv.f32	s5, s15, s11
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200001a2:	ee66 7a03 	vmul.f32	s15, s12, s6
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001a6:	edc3 3a06 	vstr	s7, [r3, #24]
200001aa:	ee67 6aa6 	vmul.f32	s13, s15, s13
200001ae:	edc3 3a05 	vstr	s7, [r3, #20]
    const uint32_t idx = (uint32_t)idxf;
200001b2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
        fb1 = km1 / kp1;
200001b6:	edc3 2a08 	vstr	s5, [r3, #32]
200001ba:	ee17 5a90 	vmov	r5, s15
200001be:	ee05 5a90 	vmov	s11, r5
200001c2:	eef8 5a65 	vcvt.f32.u32	s11, s11
    const float y0 = tanpi_lut_f[idx];
200001c6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
200001ca:	ee76 6ae5 	vsub.f32	s13, s13, s11
200001ce:	edd6 7a00 	vldr	s15, [r6]
200001d2:	edd6 5a01 	vldr	s11, [r6, #4]
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200001d6:	4d5a      	ldr	r5, [pc, #360]	; (20000340 <_hook_cycle+0x29a>)
200001d8:	ee75 5ae7 	vsub.f32	s11, s11, s15

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200001dc:	eebf 9a00 	vmov.f32	s18, #240	; 0xbf800000 -1.0

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001e0:	eee6 7aa5 	vfma.f32	s15, s13, s11
	
	// Set pole for filters
	vps.setFilters(w0);
	
	// Local copy of the current phase.
	float phi = s.phi;
200001e4:	edd3 5a00 	vldr	s11, [r3]
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
200001e8:	ee77 6a87 	vadd.f32	s13, s15, s14
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
200001ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
200001f0:	ee87 2a26 	vdiv.f32	s4, s14, s13
        ff1 = -ff0;
        fb1 = km1 / kp1;
200001f4:	eec7 0aa6 	vdiv.f32	s1, s15, s13
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
200001f8:	eeb1 1a42 	vneg.f32	s2, s4
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
200001fc:	ed83 2a0c 	vstr	s4, [r3, #48]	; 0x30
        ff1 = -ff0;
20000200:	ed83 1a0d 	vstr	s2, [r3, #52]	; 0x34
        fb1 = km1 / kp1;
20000204:	edc3 0a0f 	vstr	s1, [r3, #60]	; 0x3c
20000208:	eef0 6a47 	vmov.f32	s13, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
2000020c:	eef0 9a47 	vmov.f32	s19, s14
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000210:	4291      	cmp	r1, r2
20000212:	d078      	beq.n	20000306 <_hook_cycle+0x260>
	inline float PhaseShaper(float phi) {
		float d = params.d;
		float v = params.v;
		
		float ps;
		if(phi < d) {
20000214:	eef4 5ac4 	vcmpe.f32	s11, s8
20000218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000021c:	d504      	bpl.n	20000228 <_hook_cycle+0x182>
			ps = phi / d;
2000021e:	ee85 7a84 	vdiv.f32	s14, s11, s8
			ps *= v;
20000222:	ee21 7a87 	vmul.f32	s14, s3, s14
20000226:	e00d      	b.n	20000244 <_hook_cycle+0x19e>
		} else {
			ps = phi - d;
20000228:	ee75 7ac4 	vsub.f32	s15, s11, s8
			ps /= (1.f - d);
2000022c:	ee36 aac4 	vsub.f32	s20, s13, s8
20000230:	ee87 7a8a 	vdiv.f32	s14, s15, s20
			ps *= (1.f - v);
			ps += v;
20000234:	ee76 7ae1 	vsub.f32	s15, s13, s3
20000238:	eeb0 aa61 	vmov.f32	s20, s3
2000023c:	eea7 aa27 	vfma.f32	s20, s14, s15
20000240:	eeb0 7a4a 	vmov.f32	s14, s20
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000244:	ee37 7a03 	vadd.f32	s14, s14, s6
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000248:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2000024c:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000250:	ee77 7a67 	vsub.f32	s15, s14, s15
20000254:	ee67 7aa8 	vmul.f32	s15, s15, s17
    const uint32_t x0p = (uint32_t)x0f;
20000258:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000025c:	ee17 4a10 	vmov	r4, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000260:	f004 007f 	and.w	r0, r4, #127	; 0x7f

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000264:	ee0a 4a10 	vmov	s20, r4
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000268:	eb05 0680 	add.w	r6, r5, r0, lsl #2
2000026c:	3001      	adds	r0, #1
2000026e:	eeb8 aa4a 	vcvt.f32.u32	s20, s20
20000272:	f000 007f 	and.w	r0, r0, #127	; 0x7f
20000276:	eb05 0080 	add.w	r0, r5, r0, lsl #2
2000027a:	ee77 7aca 	vsub.f32	s15, s15, s20
2000027e:	ed96 7a00 	vldr	s14, [r6]
20000282:	ed90 aa00 	vldr	s20, [r0]
20000286:	ee3a aa47 	vsub.f32	s20, s20, s14
    return (x0p < k_wt_sine_size)?y0:-y0;
2000028a:	2c7f      	cmp	r4, #127	; 0x7f
2000028c:	eea7 7a8a 	vfma.f32	s14, s15, s20
20000290:	eef0 7a47 	vmov.f32	s15, s14
20000294:	bf88      	it	hi
20000296:	eef1 7a47 	vneghi.f32	s15, s14
		}
		float sig = -osc_cosf(ps);
2000029a:	eef1 7a67 	vneg.f32	s15, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
2000029e:	eeb0 7a64 	vmov.f32	s14, s9
200002a2:	eea3 7aa7 	vfma.f32	s14, s7, s15
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002a6:	ee67 4a62 	vnmul.f32	s9, s14, s5
200002aa:	eee3 4aa7 	vfma.f32	s9, s7, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200002ae:	eef0 7a45 	vmov.f32	s15, s10
200002b2:	eee2 7a07 	vfma.f32	s15, s4, s14
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200002b6:	ee27 5ae0 	vnmul.f32	s10, s15, s1

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200002ba:	eef4 7ac9 	vcmpe.f32	s15, s18
200002be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002c2:	eea1 5a07 	vfma.f32	s10, s2, s14
200002c6:	db07      	blt.n	200002d8 <_hook_cycle+0x232>
200002c8:	eef4 7ae6 	vcmpe.f32	s15, s13
200002cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002d0:	bfa8      	it	ge
200002d2:	eef0 7a69 	vmovge.f32	s15, s19
200002d6:	e001      	b.n	200002dc <_hook_cycle+0x236>
200002d8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.29f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200002dc:	ee27 7aa7 	vmul.f32	s14, s15, s15
		
		// Update local osc phase
		phi += w0;
200002e0:	ee75 5a86 	vadd.f32	s11, s11, s12
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.29f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200002e4:	ee27 7ac7 	vnmul.f32	s14, s15, s14
200002e8:	eee7 7a08 	vfma.f32	s15, s14, s16
200002ec:	ee67 7a80 	vmul.f32	s15, s15, s0
200002f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
200002f4:	ece1 7a01 	vstmia	r1!, {s15}
		
		// Update local osc phase
		phi += w0;
		phi -= (uint32_t)phi;
200002f8:	eefc 7ae5 	vcvt.u32.f32	s15, s11
200002fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000300:	ee75 5ae7 	vsub.f32	s11, s11, s15
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000304:	e784      	b.n	20000210 <_hook_cycle+0x16a>
	}
	
	// Update global osc phase
	s.phi = phi;
	
}
20000306:	ecbd 8b06 	vpop	{d8-d10}
2000030a:	edc3 4a0a 	vstr	s9, [r3, #40]	; 0x28
2000030e:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
		phi += w0;
		phi -= (uint32_t)phi;
	}
	
	// Update global osc phase
	s.phi = phi;
20000312:	edc3 5a00 	vstr	s11, [r3]
	
}
20000316:	bd70      	pop	{r4, r5, r6, pc}
20000318:	3b808081 	.word	0x3b808081
2000031c:	46b8ff49 	.word	0x46b8ff49
20000320:	4f000000 	.word	0x4f000000
20000324:	0800f100 	.word	0x0800f100
20000328:	20000430 	.word	0x20000430
2000032c:	37aec33e 	.word	0x37aec33e
20000330:	44029cbc 	.word	0x44029cbc
20000334:	0800f764 	.word	0x0800f764
20000338:	43800000 	.word	0x43800000
2000033c:	3e947ae1 	.word	0x3e947ae1
20000340:	08012bdc 	.word	0x08012bdc

20000344 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t *const params) {
	// Reset oscillator phase for new note
	VPS::State &s = vps.state;
	s.flags |= VPS::flag_reset;
20000344:	4a02      	ldr	r2, [pc, #8]	; (20000350 <_hook_on+0xc>)
20000346:	7a13      	ldrb	r3, [r2, #8]
20000348:	f043 0301 	orr.w	r3, r3, #1
2000034c:	7213      	strb	r3, [r2, #8]
2000034e:	4770      	bx	lr
20000350:	20000430 	.word	0x20000430

20000354 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
20000354:	4770      	bx	lr

20000356 <_hook_param>:

void OSC_PARAM(uint16_t index, uint16_t value) {
	
	VPS::Params &p = vps.params;
	
	const float valf = param_val_to_f32(value);
20000356:	ee07 1a90 	vmov	s15, r1
2000035a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2000035e:	eddf 7a20 	vldr	s15, [pc, #128]	; 200003e0 <_hook_param+0x8a>
20000362:	ee67 7a27 	vmul.f32	s15, s14, s15
	
	switch (index) {
20000366:	2807      	cmp	r0, #7
20000368:	d838      	bhi.n	200003dc <_hook_param+0x86>
2000036a:	e8df f000 	tbb	[pc, r0]
2000036e:	1a04      	.short	0x1a04
20000370:	37373737 	.word	0x37373737
20000374:	3430      	.short	0x3430
		case k_user_osc_param_id1: 		 	// User parameter 1
			// Set d value
			p.d = clip01f(value * 0.01f);
20000376:	eddf 7a1b 	vldr	s15, [pc, #108]	; 200003e4 <_hook_param+0x8e>
2000037a:	ee67 7a27 	vmul.f32	s15, s14, s15
2000037e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000386:	db09      	blt.n	2000039c <_hook_param+0x46>
20000388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000038c:	eef4 7ac7 	vcmpe.f32	s15, s14
20000390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000394:	bfa8      	it	ge
20000396:	eef0 7a47 	vmovge.f32	s15, s14
2000039a:	e018      	b.n	200003ce <_hook_param+0x78>
2000039c:	eddf 7a12 	vldr	s15, [pc, #72]	; 200003e8 <_hook_param+0x92>
200003a0:	e015      	b.n	200003ce <_hook_param+0x78>
			break;
			
		case k_user_osc_param_id2: 			// User parameter 2
			// Set v value
			p.v = clip01f(value * 0.01f);
200003a2:	eddf 7a10 	vldr	s15, [pc, #64]	; 200003e4 <_hook_param+0x8e>
200003a6:	ee67 7a27 	vmul.f32	s15, s14, s15
200003aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200003ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003b2:	db09      	blt.n	200003c8 <_hook_param+0x72>
200003b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200003b8:	eef4 7ac7 	vcmpe.f32	s15, s14
200003bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003c0:	bfa8      	it	ge
200003c2:	eef0 7a47 	vmovge.f32	s15, s14
200003c6:	e006      	b.n	200003d6 <_hook_param+0x80>
200003c8:	eddf 7a07 	vldr	s15, [pc, #28]	; 200003e8 <_hook_param+0x92>
200003cc:	e003      	b.n	200003d6 <_hook_param+0x80>
			
		case k_user_osc_param_id6: break; 	// User parameter 6
			
		case k_user_osc_param_shape: // A knob
			// Set d value
			p.d = valf;
200003ce:	4b07      	ldr	r3, [pc, #28]	; (200003ec <_hook_param+0x96>)
200003d0:	edc3 7a03 	vstr	s15, [r3, #12]
			break;
200003d4:	4770      	bx	lr
			
		case k_user_osc_param_shiftshape: // B knob
			// Set v value
			p.v = valf;
200003d6:	4b05      	ldr	r3, [pc, #20]	; (200003ec <_hook_param+0x96>)
200003d8:	edc3 7a04 	vstr	s15, [r3, #16]
200003dc:	4770      	bx	lr
200003de:	bf00      	nop
200003e0:	3a802008 	.word	0x3a802008
200003e4:	3c23d70a 	.word	0x3c23d70a
200003e8:	00000000 	.word	0x00000000
200003ec:	20000430 	.word	0x20000430

200003f0 <_GLOBAL__sub_I__hook_init>:
		float   	w0;		// Oscillator pitch
		uint32_t 	flags: 1;	// Bit field
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			flags(flags_none)
200003f0:	4b0d      	ldr	r3, [pc, #52]	; (20000428 <_GLOBAL__sub_I__hook_init+0x38>)
200003f2:	7a19      	ldrb	r1, [r3, #8]
200003f4:	f36f 0100 	bfc	r1, #0, #1
200003f8:	2200      	movs	r2, #0
200003fa:	7219      	strb	r1, [r3, #8]
		float   d;
		float   v;
    
		Params(void) :
			d(DEFAULT),
			v(DEFAULT) 
200003fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
		float   	w0;		// Oscillator pitch
		uint32_t 	flags: 1;	// Bit field
		State(void) :
			phi(ZEROF),
			w0(ZEROF),
			flags(flags_none)
20000400:	601a      	str	r2, [r3, #0]
20000402:	605a      	str	r2, [r3, #4]
		float   d;
		float   v;
    
		Params(void) :
			d(DEFAULT),
			v(DEFAULT) 
20000404:	60d9      	str	r1, [r3, #12]
20000406:	6119      	str	r1, [r3, #16]
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20000408:	615a      	str	r2, [r3, #20]
2000040a:	619a      	str	r2, [r3, #24]
2000040c:	61da      	str	r2, [r3, #28]
2000040e:	621a      	str	r2, [r3, #32]
20000410:	625a      	str	r2, [r3, #36]	; 0x24
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000412:	629a      	str	r2, [r3, #40]	; 0x28
20000414:	62da      	str	r2, [r3, #44]	; 0x2c
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20000416:	631a      	str	r2, [r3, #48]	; 0x30
20000418:	635a      	str	r2, [r3, #52]	; 0x34
2000041a:	639a      	str	r2, [r3, #56]	; 0x38
2000041c:	63da      	str	r2, [r3, #60]	; 0x3c
2000041e:	641a      	str	r2, [r3, #64]	; 0x40
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000420:	645a      	str	r2, [r3, #68]	; 0x44
20000422:	649a      	str	r2, [r3, #72]	; 0x48
20000424:	4770      	bx	lr
20000426:	bf00      	nop
20000428:	20000430 	.word	0x20000430
