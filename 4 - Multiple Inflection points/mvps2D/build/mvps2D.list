
build/mvps2D.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	200006af 	.word	0x200006af
20000098:	20000723 	.word	0x20000723
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "mvps2D.hpp"

static MVPS2D mvps2D;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	
	// Local copy of the state object.
	MVPS2D::State &s = mvps2D.state;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000a6:	4bf3      	ldr	r3, [pc, #972]	; (20000474 <_hook_cycle+0x3ce>)
200000a8:	ed9f 5af3 	vldr	s10, [pc, #972]	; 20000478 <_hook_cycle+0x3d2>

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000ac:	ed9f 7af3 	vldr	s14, [pc, #972]	; 2000047c <_hook_cycle+0x3d6>
		/*
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
200000b0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200000b4:	ed9f 4af2 	vldr	s8, [pc, #968]	; 20000480 <_hook_cycle+0x3da>
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	
	// Local copy of the state object.
	MVPS2D::State &s = mvps2D.state;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000ba:	7f1c      	ldrb	r4, [r3, #28]
	
	// Reset s.flags
    s.flags = MVPS2D::flags_none; 
200000bc:	4625      	mov	r5, r4
200000be:	f36f 0500 	bfc	r5, #0, #1
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000c2:	ed2d 8b10 	vpush	{d8-d15}
	
	// Current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = MVPS2D::flags_none; 
200000c6:	771d      	strb	r5, [r3, #28]
	if(flags & MVPS2D::flag_reset) {
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000c8:	8885      	ldrh	r5, [r0, #4]
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
200000ca:	eddf 9aee 	vldr	s19, [pc, #952]	; 20000484 <_hook_cycle+0x3de>
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
200000ce:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	
	// Reset s.flags
    s.flags = MVPS2D::flags_none; 
	
	// Reset state if note-on trigger
	if(flags & MVPS2D::flag_reset) {
200000d2:	f014 0f01 	tst.w	r4, #1
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000d6:	ea4f 2425 	mov.w	r4, r5, asr #8
		{
			reset();
		}
		
		inline void reset(void) {
			phi = ZEROF;
200000da:	bf18      	it	ne
200000dc:	ed83 5a00 	vstrne	s10, [r3]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000e0:	2c96      	cmp	r4, #150	; 0x96
200000e2:	bfd8      	it	le
200000e4:	4626      	movle	r6, r4
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000e6:	b2ed      	uxtb	r5, r5
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000e8:	f104 0401 	add.w	r4, r4, #1
200000ec:	b2e4      	uxtb	r4, r4
200000ee:	ee07 5a90 	vmov	s15, r5
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000f2:	bfc8      	it	gt
200000f4:	2697      	movgt	r6, #151	; 0x97
200000f6:	4de4      	ldr	r5, [pc, #912]	; (20000488 <_hook_cycle+0x3e2>)
200000f8:	ed83 5a13 	vstr	s10, [r3, #76]	; 0x4c
200000fc:	2c96      	cmp	r4, #150	; 0x96
200000fe:	bf88      	it	hi
20000100:	2497      	movhi	r4, #151	; 0x97
20000102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000106:	eb05 0686 	add.w	r6, r5, r6, lsl #2
2000010a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
2000010e:	edd6 5a00 	vldr	s11, [r6]
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000112:	ed83 5a18 	vstr	s10, [r3, #96]	; 0x60
20000116:	ee67 7a87 	vmul.f32	s15, s15, s14
2000011a:	ed94 7a00 	vldr	s14, [r4]
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
2000011e:	4cdb      	ldr	r4, [pc, #876]	; (2000048c <_hook_cycle+0x3e6>)
20000120:	ed83 5a1a 	vstr	s10, [r3, #104]	; 0x68
20000124:	ee37 7a65 	vsub.f32	s14, s14, s11
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
	
	// LFO2
	float w0_lfo2 	= s.w0_lfo2;
20000128:	ed93 ba05 	vldr	s22, [r3, #20]
		ps *= (vb - va);
		return ps + va;
	}
	
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 + lfo1;
2000012c:	edd3 ba08 	vldr	s23, [r3, #32]
		float v0 = params.v0 + lfo2;
20000130:	ed93 ca0b 	vldr	s24, [r3, #44]	; 0x2c
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000134:	ed9f aad6 	vldr	s20, [pc, #856]	; 20000490 <_hook_cycle+0x3ea>
20000138:	eee7 5a87 	vfma.f32	s11, s15, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
2000013c:	eddf 7ad5 	vldr	s15, [pc, #852]	; 20000494 <_hook_cycle+0x3ee>
20000140:	eef4 5ae7 	vcmpe.f32	s11, s15
20000144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000148:	bfa8      	it	ge
2000014a:	eef0 5a67 	vmovge.f32	s11, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000014e:	eddf 7ad2 	vldr	s15, [pc, #840]	; 20000498 <_hook_cycle+0x3f2>
20000152:	ee65 5aa7 	vmul.f32	s11, s11, s15
20000156:	eddf 7ad1 	vldr	s15, [pc, #836]	; 2000049c <_hook_cycle+0x3f6>
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
2000015a:	edc3 5a01 	vstr	s11, [r3, #4]
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
		float lpf 	= clipmaxf(limit * w0, 0.49f);
2000015e:	ee25 7aa6 	vmul.f32	s14, s11, s13
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000162:	eeb5 9a00 	vmov.f32	s18, #80	; 0x3e800000  0.250
20000166:	ee37 6a67 	vsub.f32	s12, s14, s15
2000016a:	eef0 ea49 	vmov.f32	s29, s18
2000016e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
20000172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float hpf 	= clipminf((1.f / limit) * w0, ZEROF);
20000176:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2000017a:	bfb8      	it	lt
2000017c:	eef0 7a47 	vmovlt.f32	s15, s14
20000180:	ee86 7a26 	vdiv.f32	s14, s12, s13
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000184:	ee67 7a84 	vmul.f32	s15, s15, s8
20000188:	ee67 6a25 	vmul.f32	s13, s14, s11
2000018c:	eeb0 fa69 	vmov.f32	s30, s19
20000190:	ee35 7a66 	vsub.f32	s14, s10, s13
20000194:	eeff fa00 	vmov.f32	s31, #240	; 0xbf800000 -1.0
20000198:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
2000019c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 20000478 <_hook_cycle+0x3d2>
200001a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001a4:	bfb8      	it	lt
200001a6:	eeb0 7a66 	vmovlt.f32	s14, s13
    const uint32_t idx = (uint32_t)idxf;
200001aa:	eefc 6ae7 	vcvt.u32.f32	s13, s15
200001ae:	ee16 5a90 	vmov	r5, s13

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001b2:	ee04 5a90 	vmov	s9, r5
200001b6:	eef8 4a64 	vcvt.f32.u32	s9, s9
    const float y0 = tanpi_lut_f[idx];
200001ba:	eb04 0685 	add.w	r6, r4, r5, lsl #2
200001be:	edd6 6a00 	vldr	s13, [r6]
200001c2:	ee77 7ae4 	vsub.f32	s15, s15, s9
200001c6:	edd6 4a01 	vldr	s9, [r6, #4]
200001ca:	ee74 4ae6 	vsub.f32	s9, s9, s13
200001ce:	eee7 6aa4 	vfma.f32	s13, s15, s9
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
	float lfo1_last = s.lfo1_last;
200001d2:	edd3 4a04 	vldr	s9, [r3, #16]
       *
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
200001d6:	ee76 7a86 	vadd.f32	s15, s13, s12
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001da:	ee86 1aa7 	vdiv.f32	s2, s13, s15
        fb1 = km1 / kp1;
200001de:	ee76 6ac6 	vsub.f32	s13, s13, s12
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001e2:	ed83 1a10 	vstr	s2, [r3, #64]	; 0x40
        fb1 = km1 / kp1;
200001e6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200001ea:	ee67 7a04 	vmul.f32	s15, s14, s8
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001ee:	ed83 1a0f 	vstr	s2, [r3, #60]	; 0x3c
    const uint32_t idx = (uint32_t)idxf;
200001f2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
        fb1 = km1 / kp1;
200001f6:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
200001fa:	ee17 5a10 	vmov	r5, s14
200001fe:	ee06 5a90 	vmov	s13, r5
20000202:	eef8 6a66 	vcvt.f32.u32	s13, s13
    const float y0 = tanpi_lut_f[idx];
20000206:	eb04 0685 	add.w	r6, r4, r5, lsl #2
2000020a:	ed96 7a00 	vldr	s14, [r6]
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000020e:	4ca4      	ldr	r4, [pc, #656]	; (200004a0 <_hook_cycle+0x3fa>)
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
	
	// LFO2
	float w0_lfo2 	= s.w0_lfo2;
	float phi_lfo2 	= s.phi_lfo2;
20000210:	ed93 4a06 	vldr	s8, [r3, #24]
20000214:	ee77 7ae6 	vsub.f32	s15, s15, s13
20000218:	edd6 6a01 	vldr	s13, [r6, #4]
2000021c:	ee76 6ac7 	vsub.f32	s13, s13, s14
20000220:	4625      	mov	r5, r4
20000222:	eea7 7aa6 	vfma.f32	s14, s15, s13
	
	// Set pole for filters
	mvps2D.setFilters(w0);
	
	// Local copy of the phase and its pointer.
	float phi 	= s.phi;
20000226:	edd3 6a00 	vldr	s13, [r3]
2000022a:	eef0 7a47 	vmov.f32	s15, s14
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
2000022e:	ee77 7ac6 	vsub.f32	s15, s15, s12
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
20000232:	ee37 7a06 	vadd.f32	s14, s14, s12
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
20000236:	eec7 8a87 	vdiv.f32	s17, s15, s14
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
2000023a:	edd0 7a00 	vldr	s15, [r0]
2000023e:	edc3 8a19 	vstr	s17, [r3, #100]	; 0x64
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
20000242:	eec6 0a07 	vdiv.f32	s1, s12, s14
20000246:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
2000024a:	ee07 2a10 	vmov	s14, r2
	// Local copy of the phase and its pointer.
	float phi 	= s.phi;
	float *Phi 	= &phi;
	
	// LFO1
	float lfo1 		= s.lfo1 = q31_to_f32(params->shape_lfo);
2000024e:	edc3 7a03 	vstr	s15, [r3, #12]
	float lfo1_last = s.lfo1_last;
	float lfo1_inc 	= (lfo1 - lfo1_last) / frames;
20000252:	eeb8 7a47 	vcvt.f32.u32	s14, s14
20000256:	ee77 7ae4 	vsub.f32	s15, s15, s9
        ff1 = -ff0;
2000025a:	eeb1 8a60 	vneg.f32	s16, s1
2000025e:	eec7 aa87 	vdiv.f32	s21, s15, s14
	
	// Start buffer
	q31_t *__restrict y = (q31_t*)yn; 	
	
	// End buffer
	const q31_t *y_e = y + frames; 		
20000262:	eb01 0282 	add.w	r2, r1, r2, lsl #2
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
20000266:	edc3 0a16 	vstr	s1, [r3, #88]	; 0x58
        ff1 = -ff0;
2000026a:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
	}
	
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 + lfo1;
		float v0 = params.v0 + lfo2;
		float d1 = params.d1 + lfo1;
2000026e:	edd3 ca09 	vldr	s25, [r3, #36]	; 0x24
		float v1 = params.v1 + lfo2;
20000272:	ed93 da0c 	vldr	s26, [r3, #48]	; 0x30
		float d2 = params.d2 + lfo1;
20000276:	edd3 da0a 	vldr	s27, [r3, #40]	; 0x28
		float v2 = params.v2 + lfo2;
2000027a:	ed93 ea0d 	vldr	s28, [r3, #52]	; 0x34
2000027e:	ed93 2a14 	vldr	s4, [r3, #80]	; 0x50
20000282:	edd3 2a1b 	vldr	s5, [r3, #108]	; 0x6c
20000286:	edd3 3a02 	vldr	s7, [r3, #8]

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000028a:	4291      	cmp	r1, r2
2000028c:	f000 80e2 	beq.w	20000454 <_hook_cycle+0x3ae>
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000290:	ee74 7a09 	vadd.f32	s15, s8, s18
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000294:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000298:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2000029c:	ee37 7ac7 	vsub.f32	s14, s15, s14
200002a0:	ee27 7a29 	vmul.f32	s14, s14, s19
    const uint32_t x0p = (uint32_t)x0f;
200002a4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
200002a8:	ee17 6a90 	vmov	r6, s15

    const uint32_t x0 = x0p & k_wt_sine_mask;
200002ac:	f006 007f 	and.w	r0, r6, #127	; 0x7f
200002b0:	ee05 6a10 	vmov	s10, r6
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
200002b4:	eb04 0780 	add.w	r7, r4, r0, lsl #2
200002b8:	3001      	adds	r0, #1
200002ba:	eeb8 5a45 	vcvt.f32.u32	s10, s10
200002be:	f000 007f 	and.w	r0, r0, #127	; 0x7f
200002c2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
200002c6:	ee37 7a45 	vsub.f32	s14, s14, s10
200002ca:	edd7 7a00 	vldr	s15, [r7]
200002ce:	ed90 5a00 	vldr	s10, [r0]
200002d2:	ee35 5a67 	vsub.f32	s10, s10, s15
    return (x0p < k_wt_sine_size)?y0:-y0;
200002d6:	2e7f      	cmp	r6, #127	; 0x7f
200002d8:	eee7 7a05 	vfma.f32	s15, s14, s10
200002dc:	eeb0 5a67 	vmov.f32	s10, s15
200002e0:	bf88      	it	hi
200002e2:	eeb1 5a67 	vneghi.f32	s10, s15
		ps *= (vb - va);
		return ps + va;
	}
	
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 + lfo1;
200002e6:	ee74 7aab 	vadd.f32	s15, s9, s23
		float v0 = params.v0 + lfo2;
200002ea:	ee35 7a0c 	vadd.f32	s14, s10, s24
		float v1 = params.v1 + lfo2;
		float d2 = params.d2 + lfo1;
		float v2 = params.v2 + lfo2;
		
		float ps;
		if(phi < d0) {
200002ee:	eef4 6ae7 	vcmpe.f32	s13, s15
200002f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002f6:	d504      	bpl.n	20000302 <_hook_cycle+0x25c>
			ps = v0 * (phi / d0);
200002f8:	eec6 1aa7 	vdiv.f32	s3, s13, s15
200002fc:	ee61 7a87 	vmul.f32	s15, s3, s14
20000300:	e035      	b.n	2000036e <_hook_cycle+0x2c8>
	}
	
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 + lfo1;
		float v0 = params.v0 + lfo2;
		float d1 = params.d1 + lfo1;
20000302:	ee34 3aac 	vadd.f32	s6, s9, s25
		float v1 = params.v1 + lfo2;
20000306:	ee75 1a0d 	vadd.f32	s3, s10, s26
		float v2 = params.v2 + lfo2;
		
		float ps;
		if(phi < d0) {
			ps = v0 * (phi / d0);
		} else if(phi < d1){
2000030a:	eef4 6ac3 	vcmpe.f32	s13, s6
2000030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000312:	d50c      	bpl.n	2000032e <_hook_cycle+0x288>
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
20000314:	ee36 5ae7 	vsub.f32	s10, s13, s15
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
20000318:	ee33 3a67 	vsub.f32	s6, s6, s15
2000031c:	ee71 1ac7 	vsub.f32	s3, s3, s14
20000320:	eec5 7a03 	vdiv.f32	s15, s10, s6
20000324:	eea7 7aa1 	vfma.f32	s14, s15, s3
20000328:	eef0 7a47 	vmov.f32	s15, s14
2000032c:	e01f      	b.n	2000036e <_hook_cycle+0x2c8>
	inline float MultiPhaseShaper(float phi, float lfo1, float lfo2) {
		float d0 = params.d0 + lfo1;
		float v0 = params.v0 + lfo2;
		float d1 = params.d1 + lfo1;
		float v1 = params.v1 + lfo2;
		float d2 = params.d2 + lfo1;
2000032e:	ee34 7aad 	vadd.f32	s14, s9, s27
		float v2 = params.v2 + lfo2;
20000332:	ee75 7a0e 	vadd.f32	s15, s10, s28
		float ps;
		if(phi < d0) {
			ps = v0 * (phi / d0);
		} else if(phi < d1){
			ps = getPS(phi, d0, d1, v0, v1);
		} else if(phi < d2) {
20000336:	eef4 6ac7 	vcmpe.f32	s13, s14
2000033a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000033e:	d50c      	bpl.n	2000035a <_hook_cycle+0x2b4>
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
20000340:	ee36 5ac3 	vsub.f32	s10, s13, s6
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
20000344:	ee37 3a43 	vsub.f32	s6, s14, s6
20000348:	ee77 7ae1 	vsub.f32	s15, s15, s3
2000034c:	ee85 7a03 	vdiv.f32	s14, s10, s6
20000350:	eee7 1a27 	vfma.f32	s3, s14, s15
20000354:	eef0 7a61 	vmov.f32	s15, s3
20000358:	e009      	b.n	2000036e <_hook_cycle+0x2c8>
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
2000035a:	ee36 5ac7 	vsub.f32	s10, s13, s14
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
2000035e:	ee36 7a47 	vsub.f32	s14, s12, s14
20000362:	ee85 3a07 	vdiv.f32	s6, s10, s14
20000366:	ee36 7a67 	vsub.f32	s14, s12, s15
2000036a:	eee3 7a07 	vfma.f32	s15, s6, s14
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
2000036e:	ee77 7aae 	vadd.f32	s15, s15, s29
		LPF.mCoeffs.setFOLP(osc_tanpif(lpf));
		HPF.mCoeffs.setFOHP(osc_tanpif(hpf));
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000372:	ee3b 4a04 	vadd.f32	s8, s22, s8
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000376:	eefc 1ae7 	vcvt.u32.f32	s3, s15
		// Update local phases
		mvps2D.updatePhase(Phi, w0);
		mvps2D.updatePhase(ptrLFO2, w0_lfo2);
		
		// Update LFO1
		lfo1_last += lfo1_inc;
2000037a:	ee74 4aaa 	vadd.f32	s9, s9, s21
2000037e:	eef8 1a61 	vcvt.f32.u32	s3, s3
20000382:	ee77 7ae1 	vsub.f32	s15, s15, s3
20000386:	ee67 7a8f 	vmul.f32	s15, s15, s30
    const uint32_t x0p = (uint32_t)x0f;
2000038a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2000038e:	ee17 6a10 	vmov	r6, s14

    const uint32_t x0 = x0p & k_wt_sine_mask;
20000392:	f006 007f 	and.w	r0, r6, #127	; 0x7f
20000396:	ee05 6a10 	vmov	s10, r6
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
2000039a:	eb05 0780 	add.w	r7, r5, r0, lsl #2
2000039e:	3001      	adds	r0, #1
200003a0:	eeb8 5a45 	vcvt.f32.u32	s10, s10
200003a4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
200003a8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
200003ac:	ee77 7ac5 	vsub.f32	s15, s15, s10
200003b0:	ed97 7a00 	vldr	s14, [r7]
200003b4:	ed90 5a00 	vldr	s10, [r0]
200003b8:	ee35 5a47 	vsub.f32	s10, s10, s14
    return (x0p < k_wt_sine_size)?y0:-y0;
200003bc:	2e7f      	cmp	r6, #127	; 0x7f
200003be:	eea7 7a85 	vfma.f32	s14, s15, s10
200003c2:	eef0 7a47 	vmov.f32	s15, s14
200003c6:	bf88      	it	hi
200003c8:	eef1 7a47 	vneghi.f32	s15, s14
			ps = getPS(phi, d1, d2, v1, v2);
		} else {
			ps = getPS(phi, d2, 1.f, v2, 1.f);
		}
		
		float sig = -osc_cosf(ps);
200003cc:	eef1 7a67 	vneg.f32	s15, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200003d0:	eeb0 7a42 	vmov.f32	s14, s4
200003d4:	eea1 7a27 	vfma.f32	s14, s2, s15
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200003d8:	ee27 2a40 	vnmul.f32	s4, s14, s0
200003dc:	eea1 2a27 	vfma.f32	s4, s2, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200003e0:	eef0 7a62 	vmov.f32	s15, s5
200003e4:	eee0 7a87 	vfma.f32	s15, s1, s14
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200003e8:	ee67 2ae8 	vnmul.f32	s5, s15, s17
200003ec:	ee77 7ae3 	vsub.f32	s15, s15, s7
200003f0:	eee8 2a07 	vfma.f32	s5, s16, s14
200003f4:	eee6 3aa7 	vfma.f32	s7, s13, s15
		LPF.mCoeffs.setFOLP(osc_tanpif(lpf));
		HPF.mCoeffs.setFOHP(osc_tanpif(hpf));
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
200003f8:	ee76 6aa5 	vadd.f32	s13, s13, s11

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200003fc:	eef4 3aef 	vcmpe.f32	s7, s31
		*phi -= (uint32_t)*phi;
20000400:	eefc 7ae6 	vcvt.u32.f32	s15, s13
20000404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000408:	eef8 7a67 	vcvt.f32.u32	s15, s15
2000040c:	ee76 6ae7 	vsub.f32	s13, s13, s15
20000410:	eefc 7ac4 	vcvt.u32.f32	s15, s8
20000414:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000418:	ee34 4a67 	vsub.f32	s8, s8, s15
2000041c:	db09      	blt.n	20000432 <_hook_cycle+0x38c>
2000041e:	eef4 3ac6 	vcmpe.f32	s7, s12
20000422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000426:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2000042a:	bfb8      	it	lt
2000042c:	eef0 7a63 	vmovlt.f32	s15, s7
20000430:	e001      	b.n	20000436 <_hook_cycle+0x390>
20000432:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
20000436:	ee27 7aa7 	vmul.f32	s14, s15, s15
2000043a:	ee27 7ac7 	vnmul.f32	s14, s15, s14
2000043e:	eee7 7a0a 	vfma.f32	s15, s14, s20
20000442:	ed9f 7a18 	vldr	s14, [pc, #96]	; 200004a4 <_hook_cycle+0x3fe>
20000446:	ee67 7a87 	vmul.f32	s15, s15, s14
2000044a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2000044e:	ece1 7a01 	vstmia	r1!, {s15}
	
	// End buffer
	const q31_t *y_e = y + frames; 		

	// Fill buffer with samples
	for (; y != y_e; ) { 
20000452:	e71a      	b.n	2000028a <_hook_cycle+0x1e4>
	
	// Update global values
	s.phi 		= phi;
	s.phi_lfo2 	= phi_lfo2;
	s.lfo1_last = lfo1_last;
}
20000454:	ecbd 8b10 	vpop	{d8-d15}
20000458:	ed83 2a14 	vstr	s4, [r3, #80]	; 0x50
2000045c:	edc3 2a1b 	vstr	s5, [r3, #108]	; 0x6c
20000460:	edc3 3a02 	vstr	s7, [r3, #8]
		*(y++) = f32_to_q31(sig); 
	
	}
	
	// Update global values
	s.phi 		= phi;
20000464:	edc3 6a00 	vstr	s13, [r3]
	s.phi_lfo2 	= phi_lfo2;
20000468:	ed83 4a06 	vstr	s8, [r3, #24]
	s.lfo1_last = lfo1_last;
2000046c:	edc3 4a04 	vstr	s9, [r3, #16]
}
20000470:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000472:	bf00      	nop
20000474:	200006b0 	.word	0x200006b0
20000478:	00000000 	.word	0x00000000
2000047c:	3b808081 	.word	0x3b808081
20000480:	44029cbc 	.word	0x44029cbc
20000484:	43800000 	.word	0x43800000
20000488:	0800f100 	.word	0x0800f100
2000048c:	0800f764 	.word	0x0800f764
20000490:	3d4ccccd 	.word	0x3d4ccccd
20000494:	46b8ff49 	.word	0x46b8ff49
20000498:	37aec33e 	.word	0x37aec33e
2000049c:	3efae148 	.word	0x3efae148
200004a0:	08012bdc 	.word	0x08012bdc
200004a4:	4f000000 	.word	0x4f000000

200004a8 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t *const params) {
	// Reset oscillator phase for new note
	MVPS2D::State &s = mvps2D.state;
	s.flags |= MVPS2D::flag_reset;
200004a8:	4a02      	ldr	r2, [pc, #8]	; (200004b4 <_hook_on+0xc>)
200004aa:	7f13      	ldrb	r3, [r2, #28]
200004ac:	f043 0301 	orr.w	r3, r3, #1
200004b0:	7713      	strb	r3, [r2, #28]
200004b2:	4770      	bx	lr
200004b4:	200006b0 	.word	0x200006b0

200004b8 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
200004b8:	4770      	bx	lr

200004ba <_hook_param>:
void OSC_PARAM(uint16_t index, uint16_t value) { 

	MVPS2D::Params &p = mvps2D.params;
	MVPS2D::State &s = mvps2D.state;
	
	const float valf = param_val_to_f32(value);
200004ba:	ee07 1a90 	vmov	s15, r1
200004be:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 20000634 <_hook_param+0x17a>
200004c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200004c6:	ee27 7a87 	vmul.f32	s14, s15, s14
	
	switch (index) {
200004ca:	2807      	cmp	r0, #7
200004cc:	f200 80b1 	bhi.w	20000632 <_hook_param+0x178>
200004d0:	e8df f000 	tbb	[pc, r0]
200004d4:	4f361d04 	.word	0x4f361d04
200004d8:	a49a8168 	.word	0xa49a8168
		case k_user_osc_param_id1: // User parameter 1
			// Set Values for Inflection Point 1: d0
			p.d0 = clip01f(value * 0.01f); 		
200004dc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 20000638 <_hook_param+0x17e>
200004e0:	ee67 7a87 	vmul.f32	s15, s15, s14
200004e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200004e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004ec:	db09      	blt.n	20000502 <_hook_param+0x48>
200004ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200004f2:	eef4 7ac7 	vcmpe.f32	s15, s14
200004f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004fa:	bfa8      	it	ge
200004fc:	eef0 7a47 	vmovge.f32	s15, s14
20000500:	e001      	b.n	20000506 <_hook_param+0x4c>
20000502:	eddf 7a4e 	vldr	s15, [pc, #312]	; 2000063c <_hook_param+0x182>
20000506:	4b4e      	ldr	r3, [pc, #312]	; (20000640 <_hook_param+0x186>)
20000508:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
2000050c:	4770      	bx	lr
			
		case k_user_osc_param_id2: // User parameter 2
			// Set Values for Inflection Point 1: v0
			p.v0 = clip01f(value * 0.01f); 
2000050e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 20000638 <_hook_param+0x17e>
20000512:	ee67 7a87 	vmul.f32	s15, s15, s14
20000516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2000051a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000051e:	db09      	blt.n	20000534 <_hook_param+0x7a>
20000520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000524:	eef4 7ac7 	vcmpe.f32	s15, s14
20000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000052c:	bfa8      	it	ge
2000052e:	eef0 7a47 	vmovge.f32	s15, s14
20000532:	e001      	b.n	20000538 <_hook_param+0x7e>
20000534:	eddf 7a41 	vldr	s15, [pc, #260]	; 2000063c <_hook_param+0x182>
20000538:	4b41      	ldr	r3, [pc, #260]	; (20000640 <_hook_param+0x186>)
2000053a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			break;
2000053e:	4770      	bx	lr
			
		case k_user_osc_param_id3: // User parameter 3
			// Set Values for Inflection Point 2: d1
			p.d1 = clip01f(value * 0.01f); 
20000540:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 20000638 <_hook_param+0x17e>
20000544:	ee67 7a87 	vmul.f32	s15, s15, s14
20000548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2000054c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000550:	db09      	blt.n	20000566 <_hook_param+0xac>
20000552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000556:	eef4 7ac7 	vcmpe.f32	s15, s14
2000055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000055e:	bfa8      	it	ge
20000560:	eef0 7a47 	vmovge.f32	s15, s14
20000564:	e001      	b.n	2000056a <_hook_param+0xb0>
20000566:	eddf 7a35 	vldr	s15, [pc, #212]	; 2000063c <_hook_param+0x182>
2000056a:	4b35      	ldr	r3, [pc, #212]	; (20000640 <_hook_param+0x186>)
2000056c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			break;
20000570:	4770      	bx	lr
			
		case k_user_osc_param_id4: // User parameter 4
			// Set Values for Inflection Point 2: v1
			p.v1 = clip01f(value * 0.01f); 
20000572:	ed9f 7a31 	vldr	s14, [pc, #196]	; 20000638 <_hook_param+0x17e>
20000576:	ee67 7a87 	vmul.f32	s15, s15, s14
2000057a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2000057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000582:	db09      	blt.n	20000598 <_hook_param+0xde>
20000584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000588:	eef4 7ac7 	vcmpe.f32	s15, s14
2000058c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000590:	bfa8      	it	ge
20000592:	eef0 7a47 	vmovge.f32	s15, s14
20000596:	e001      	b.n	2000059c <_hook_param+0xe2>
20000598:	eddf 7a28 	vldr	s15, [pc, #160]	; 2000063c <_hook_param+0x182>
2000059c:	4b28      	ldr	r3, [pc, #160]	; (20000640 <_hook_param+0x186>)
2000059e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			break;
200005a2:	4770      	bx	lr
			
		case k_user_osc_param_id5: // User parameter 5
			// Set Values for Inflection Point 3: d2
			p.d2 = clip01f(value * 0.01f);			
200005a4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 20000638 <_hook_param+0x17e>
200005a8:	ee67 7a87 	vmul.f32	s15, s15, s14
200005ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200005b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200005b4:	db09      	blt.n	200005ca <_hook_param+0x110>
200005b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200005ba:	eef4 7ac7 	vcmpe.f32	s15, s14
200005be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200005c2:	bfa8      	it	ge
200005c4:	eef0 7a47 	vmovge.f32	s15, s14
200005c8:	e001      	b.n	200005ce <_hook_param+0x114>
200005ca:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2000063c <_hook_param+0x182>
200005ce:	4b1c      	ldr	r3, [pc, #112]	; (20000640 <_hook_param+0x186>)
200005d0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			break;
200005d4:	4770      	bx	lr
			
		case k_user_osc_param_id6: // User parameter 6
			// Set Values for Inflection Point 3: v2
			p.v2 = clip01f(value * 0.01f); 
200005d6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 20000638 <_hook_param+0x17e>
200005da:	ee67 7a87 	vmul.f32	s15, s15, s14
200005de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200005e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200005e6:	db09      	blt.n	200005fc <_hook_param+0x142>
200005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200005ec:	eef4 7ac7 	vcmpe.f32	s15, s14
200005f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200005f4:	bfa8      	it	ge
200005f6:	eef0 7a47 	vmovge.f32	s15, s14
200005fa:	e001      	b.n	20000600 <_hook_param+0x146>
200005fc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2000063c <_hook_param+0x182>
20000600:	4b0f      	ldr	r3, [pc, #60]	; (20000640 <_hook_param+0x186>)
20000602:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			break;
20000606:	4770      	bx	lr
			
		case k_user_osc_param_shape: // A knob
			// Set the frequency ratio for filters
			p.f_ratio = 1.f + (valf * 100.f);
20000608:	eddf 6a0e 	vldr	s13, [pc, #56]	; 20000644 <_hook_param+0x18a>
2000060c:	4b0c      	ldr	r3, [pc, #48]	; (20000640 <_hook_param+0x186>)
2000060e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
20000612:	eee7 7a26 	vfma.f32	s15, s14, s13
20000616:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			break;
2000061a:	4770      	bx	lr
			
		case k_user_osc_param_shiftshape: // B knob	
			// Frequency of LFO2
			s.w0_lfo2 = (valf * 30.f) * k_samplerate_recipf;
2000061c:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
20000620:	ee27 7a27 	vmul.f32	s14, s14, s15
20000624:	eddf 7a08 	vldr	s15, [pc, #32]	; 20000648 <_hook_param+0x18e>
20000628:	4b05      	ldr	r3, [pc, #20]	; (20000640 <_hook_param+0x186>)
2000062a:	ee27 7a27 	vmul.f32	s14, s14, s15
2000062e:	ed83 7a05 	vstr	s14, [r3, #20]
20000632:	4770      	bx	lr
20000634:	3a802008 	.word	0x3a802008
20000638:	3c23d70a 	.word	0x3c23d70a
2000063c:	00000000 	.word	0x00000000
20000640:	200006b0 	.word	0x200006b0
20000644:	42c80000 	.word	0x42c80000
20000648:	37aec33e 	.word	0x37aec33e

2000064c <_ZN6MVPS2DC1Ev>:
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
2000064c:	2200      	movs	r2, #0
			phi = ZEROF;
		}
	};

	MVPS2D(void) {
		state = State();
2000064e:	4611      	mov	r1, r2
20000650:	63c2      	str	r2, [r0, #60]	; 0x3c
20000652:	6402      	str	r2, [r0, #64]	; 0x40
20000654:	6442      	str	r2, [r0, #68]	; 0x44
20000656:	6482      	str	r2, [r0, #72]	; 0x48
20000658:	64c2      	str	r2, [r0, #76]	; 0x4c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
2000065a:	6502      	str	r2, [r0, #80]	; 0x50
2000065c:	6542      	str	r2, [r0, #84]	; 0x54
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
2000065e:	6582      	str	r2, [r0, #88]	; 0x58
20000660:	65c2      	str	r2, [r0, #92]	; 0x5c
20000662:	6602      	str	r2, [r0, #96]	; 0x60
20000664:	6642      	str	r2, [r0, #100]	; 0x64
20000666:	6682      	str	r2, [r0, #104]	; 0x68
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20000668:	66c2      	str	r2, [r0, #108]	; 0x6c
2000066a:	6702      	str	r2, [r0, #112]	; 0x70
2000066c:	6002      	str	r2, [r0, #0]
2000066e:	6042      	str	r2, [r0, #4]
20000670:	6082      	str	r2, [r0, #8]
20000672:	60c2      	str	r2, [r0, #12]
20000674:	6102      	str	r2, [r0, #16]
20000676:	6142      	str	r2, [r0, #20]
20000678:	6182      	str	r2, [r0, #24]
		inline void reset(void) {
			phi = ZEROF;
		}
	};

	MVPS2D(void) {
2000067a:	b510      	push	{r4, lr}
		state = State();
2000067c:	7f02      	ldrb	r2, [r0, #28]
2000067e:	f361 0200 	bfi	r2, r1, #0, #1
20000682:	7702      	strb	r2, [r0, #28]
		params = Params();
20000684:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
20000688:	6202      	str	r2, [r0, #32]
2000068a:	6242      	str	r2, [r0, #36]	; 0x24
2000068c:	6282      	str	r2, [r0, #40]	; 0x28
2000068e:	62c2      	str	r2, [r0, #44]	; 0x2c
20000690:	6302      	str	r2, [r0, #48]	; 0x30
20000692:	6342      	str	r2, [r0, #52]	; 0x34
20000694:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
20000698:	6382      	str	r2, [r0, #56]	; 0x38
	}
2000069a:	bd10      	pop	{r4, pc}

2000069c <_GLOBAL__sub_I__hook_init>:
			break;
			
		default: break;
	}
}
2000069c:	b508      	push	{r3, lr}
 */

#include "userosc.h"
#include "mvps2D.hpp"

static MVPS2D mvps2D;
2000069e:	4802      	ldr	r0, [pc, #8]	; (200006a8 <_GLOBAL__sub_I__hook_init+0xc>)
200006a0:	f7ff ffd4 	bl	2000064c <_ZN6MVPS2DC1Ev>
200006a4:	bd08      	pop	{r3, pc}
200006a6:	bf00      	nop
200006a8:	200006b0 	.word	0x200006b0
