
build/mvps1D.elf:     file format elf32-littlearm


Disassembly of section .text:

20000044 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000044:	4770      	bx	lr

20000046 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000046:	4770      	bx	lr

20000048 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000048:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
2000004a:	4770      	bx	lr
2000004c:	4770      	bx	lr
2000004e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20000050:	4770      	bx	lr

20000052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20000052:	4b10      	ldr	r3, [pc, #64]	; (20000094 <_entry+0x42>)
20000054:	4a10      	ldr	r2, [pc, #64]	; (20000098 <_entry+0x46>)
20000056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000005a:	4688      	mov	r8, r1
2000005c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20000060:	4293      	cmp	r3, r2
20000062:	d002      	beq.n	2000006a <_entry+0x18>
    *(bss_p++) = 0;
20000064:	f803 1f01 	strb.w	r1, [r3, #1]!
20000068:	e7fa      	b.n	20000060 <_entry+0xe>
2000006a:	4b0c      	ldr	r3, [pc, #48]	; (2000009c <_entry+0x4a>)
2000006c:	4c0c      	ldr	r4, [pc, #48]	; (200000a0 <_entry+0x4e>)
2000006e:	1ae4      	subs	r4, r4, r3
20000070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000072:	2500      	movs	r5, #0
20000074:	461e      	mov	r6, r3
20000076:	42a5      	cmp	r5, r4
20000078:	d005      	beq.n	20000086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2000007a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007e:	b103      	cbz	r3, 20000082 <_entry+0x30>
      init_p();
20000080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20000082:	3501      	adds	r5, #1
20000084:	e7f7      	b.n	20000076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000086:	4641      	mov	r1, r8
20000088:	4638      	mov	r0, r7
2000008a:	f000 f80b 	bl	200000a4 <_hook_init>
2000008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20000092:	bf00      	nop
20000094:	20000617 	.word	0x20000617
20000098:	2000067f 	.word	0x2000067f
2000009c:	20000040 	.word	0x20000040
200000a0:	20000044 	.word	0x20000044

200000a4 <_hook_init>:
#include "userosc.h"
#include "mvps1D.hpp"

static MVPS1D mvps1D;

void OSC_INIT(uint32_t platform, uint32_t api) {
200000a4:	4770      	bx	lr

200000a6 <_hook_cycle>:
	
	// Local copy of the state object.
	MVPS1D::State &s = mvps1D.state;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000a6:	4bcf      	ldr	r3, [pc, #828]	; (200003e4 <_hook_cycle+0x33e>)
200000a8:	ed9f 5acf 	vldr	s10, [pc, #828]	; 200003e8 <_hook_cycle+0x342>

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200000ac:	ed9f 7acf 	vldr	s14, [pc, #828]	; 200003ec <_hook_cycle+0x346>
		/*
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
200000b0:	edd3 5a0b 	vldr	s11, [r3, #44]	; 0x2c
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200000b4:	ed9f 4ace 	vldr	s8, [pc, #824]	; 200003f0 <_hook_cycle+0x34a>
		return ps + va;
	}
	
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 + lfo;
		float v0 = params.v0;
200000b8:	edd3 2a08 	vldr	s5, [r3, #32]
		float d1 = params.d1 + lfo;
		float v1 = params.v1;
200000bc:	ed93 2a09 	vldr	s4, [r3, #36]	; 0x24
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000c0:	b570      	push	{r4, r5, r6, lr}
	
	// Local copy of the state object.
	MVPS1D::State &s = mvps1D.state;
	
	// Current flag
	const uint32_t flags = s.flags; 
200000c2:	7c1c      	ldrb	r4, [r3, #16]
	
	// Reset s.flags
    s.flags = MVPS1D::flags_none; 
200000c4:	4625      	mov	r5, r4
200000c6:	f36f 0500 	bfc	r5, #0, #1
void OSC_INIT(uint32_t platform, uint32_t api) {
	(void)platform;
	(void)api;
}

void OSC_CYCLE(const user_osc_param_t *const params, int32_t *yn, const uint32_t frames){
200000ca:	ed2d 8b0c 	vpush	{d8-d13}
	
	// Current flag
	const uint32_t flags = s.flags; 
	
	// Reset s.flags
    s.flags = MVPS1D::flags_none; 
200000ce:	741d      	strb	r5, [r3, #16]
	if(flags & MVPS1D::flag_reset) {
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000d0:	8885      	ldrh	r5, [r0, #4]
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
200000d2:	ed83 5a0e 	vstr	s10, [r3, #56]	; 0x38
	
	// Reset s.flags
    s.flags = MVPS1D::flags_none; 
	
	// Reset state if note-on trigger
	if(flags & MVPS1D::flag_reset) {
200000d6:	f014 0f01 	tst.w	r4, #1
		s.reset();
	}
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
200000da:	ea4f 2425 	mov.w	r4, r5, asr #8
		{
			reset();
		}
		
		inline void reset(void) {
			phi = ZEROF;
200000de:	bf18      	it	ne
200000e0:	ed83 5a00 	vstrne	s10, [r3]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000e4:	2c96      	cmp	r4, #150	; 0x96
200000e6:	bfd8      	it	le
200000e8:	4626      	movle	r6, r4
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
200000ea:	b2ed      	uxtb	r5, r5
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
200000ec:	f104 0401 	add.w	r4, r4, #1
200000f0:	b2e4      	uxtb	r4, r4
200000f2:	ee07 5a90 	vmov	s15, r5
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000f6:	bfc8      	it	gt
200000f8:	2697      	movgt	r6, #151	; 0x97
200000fa:	4dbe      	ldr	r5, [pc, #760]	; (200003f4 <_hook_cycle+0x34e>)
200000fc:	ed83 5a10 	vstr	s10, [r3, #64]	; 0x40
20000100:	2c96      	cmp	r4, #150	; 0x96
20000102:	bf88      	it	hi
20000104:	2497      	movhi	r4, #151	; 0x97
20000106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000010a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
2000010e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
20000112:	ed96 6a00 	vldr	s12, [r6]
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
        fb2 = ff2 = 0.f;
20000116:	ed83 5a15 	vstr	s10, [r3, #84]	; 0x54
2000011a:	ee67 7a87 	vmul.f32	s15, s15, s14
2000011e:	ed94 7a00 	vldr	s14, [r4]
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
20000122:	4cb5      	ldr	r4, [pc, #724]	; (200003f8 <_hook_cycle+0x352>)
20000124:	ed83 5a17 	vstr	s10, [r3, #92]	; 0x5c
20000128:	ee37 7a46 	vsub.f32	s14, s14, s12
		ps *= (vb - va);
		return ps + va;
	}
	
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 + lfo;
2000012c:	ed93 9a05 	vldr	s18, [r3, #20]
		float v0 = params.v0;
		float d1 = params.d1 + lfo;
20000130:	edd3 9a06 	vldr	s19, [r3, #24]
		float v1 = params.v1;
		float d2 = params.d2 + lfo;
20000134:	ed93 aa07 	vldr	s20, [r3, #28]
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000138:	ed9f bab0 	vldr	s22, [pc, #704]	; 200003fc <_hook_cycle+0x356>
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
2000013c:	eddf 8ab0 	vldr	s17, [pc, #704]	; 20000400 <_hook_cycle+0x35a>
20000140:	ed9f 8ab0 	vldr	s16, [pc, #704]	; 20000404 <_hook_cycle+0x35e>
20000144:	eea7 6a87 	vfma.f32	s12, s15, s14
	
	// Pointer to start of buffer
	q31_t *__restrict y = (q31_t*)yn; 
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 
20000148:	eb01 0282 	add.w	r2, r1, r2, lsl #2

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
2000014c:	eddf 7aae 	vldr	s15, [pc, #696]	; 20000408 <_hook_cycle+0x362>
20000150:	eeb4 6ae7 	vcmpe.f32	s12, s15
20000154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000158:	bfa8      	it	ge
2000015a:	eeb0 6a67 	vmovge.f32	s12, s15
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
    
    const float f = clipmaxf(linintf(mod * k_note_mod_fscale, f0, f1), k_note_max_hz);

    return f * k_samplerate_recipf;
2000015e:	eddf 7aab 	vldr	s15, [pc, #684]	; 2000040c <_hook_cycle+0x366>
20000162:	ee26 6a27 	vmul.f32	s12, s12, s15
20000166:	eddf 7aaa 	vldr	s15, [pc, #680]	; 20000410 <_hook_cycle+0x36a>
	
	// Current note being played.
	uint8_t note = params->pitch>>8;
	
	// Floating point phase increment for given note and fine modulation
	float w0 = s.w0 = osc_w0f_for_note(note, params->pitch & 0xFF);
2000016a:	ed83 6a01 	vstr	s12, [r3, #4]
		* We need to ensure we don't go over the
		* nyquist frequency
		*/  
		
		float limit = params.f_ratio;
		float lpf 	= clipmaxf(limit * w0, 0.49f);
2000016e:	ee26 7a25 	vmul.f32	s14, s12, s11
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
20000172:	eef5 aa00 	vmov.f32	s21, #80	; 0x3e800000  0.250
20000176:	ee77 6a67 	vsub.f32	s13, s14, s15
2000017a:	eeff ba00 	vmov.f32	s23, #240	; 0xbf800000 -1.0
2000017e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
20000182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float hpf 	= clipminf((1.f / limit) * w0, ZEROF);
20000186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2000018a:	bfb8      	it	lt
2000018c:	eef0 7a47 	vmovlt.f32	s15, s14
20000190:	ee86 7aa5 	vdiv.f32	s14, s13, s11
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20000194:	ee67 7a84 	vmul.f32	s15, s15, s8
20000198:	ee67 5a06 	vmul.f32	s11, s14, s12
2000019c:	eeb0 ca66 	vmov.f32	s24, s13
200001a0:	ee35 7a65 	vsub.f32	s14, s10, s11
	// Local copy of the phase and its pointer.
	float phi = s.phi;
	float *Phi = &phi;
	
	// Get LFO value
	float lfo = s.lfo = q31_to_f32(params->shape_lfo);
200001a4:	ed90 5a00 	vldr	s10, [r0]
200001a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
200001ac:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 200003e8 <_hook_cycle+0x342>
200001b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001b4:	bfb8      	it	lt
200001b6:	eeb0 7a65 	vmovlt.f32	s14, s11
    const uint32_t idx = (uint32_t)idxf;
200001ba:	eefc 5ae7 	vcvt.u32.f32	s11, s15
200001be:	eeba 5ae0 	vcvt.f32.s32	s10, s10, #31
200001c2:	ee15 5a90 	vmov	r5, s11

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200001c6:	ee04 5a90 	vmov	s9, r5
200001ca:	eef8 4a64 	vcvt.f32.u32	s9, s9
    const float y0 = tanpi_lut_f[idx];
200001ce:	eb04 0685 	add.w	r6, r4, r5, lsl #2
200001d2:	edd6 5a00 	vldr	s11, [r6]
200001d6:	ed83 5a03 	vstr	s10, [r3, #12]
200001da:	ee77 7ae4 	vsub.f32	s15, s15, s9
200001de:	edd6 4a01 	vldr	s9, [r6, #4]
200001e2:	ee74 4ae5 	vsub.f32	s9, s9, s11
200001e6:	eee7 5aa4 	vfma.f32	s11, s15, s9
       *
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
200001ea:	ee75 7aa6 	vadd.f32	s15, s11, s13
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001ee:	eec5 3aa7 	vdiv.f32	s7, s11, s15
        fb1 = km1 / kp1;
200001f2:	ee75 5ae6 	vsub.f32	s11, s11, s13
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
200001f6:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
        fb1 = km1 / kp1;
200001fa:	ee85 1aa7 	vdiv.f32	s2, s11, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float osc_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200001fe:	ee67 7a04 	vmul.f32	s15, s14, s8
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOLP(const float k) {
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = ff1 = k / kp1;
20000202:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    const uint32_t idx = (uint32_t)idxf;
20000206:	eebc 7ae7 	vcvt.u32.f32	s14, s15
        fb1 = km1 / kp1;
2000020a:	ed83 1a0f 	vstr	s2, [r3, #60]	; 0x3c
2000020e:	ee17 5a10 	vmov	r5, s14
20000212:	ee05 5a90 	vmov	s11, r5
20000216:	eef8 5a65 	vcvt.f32.u32	s11, s11
    const float y0 = tanpi_lut_f[idx];
2000021a:	eb04 0685 	add.w	r6, r4, r5, lsl #2
2000021e:	ed96 7a00 	vldr	s14, [r6]
    const uint32_t x0p = (uint32_t)x0f;

    const uint32_t x0 = x0p & k_wt_sine_mask;
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000222:	4d7c      	ldr	r5, [pc, #496]	; (20000414 <_hook_cycle+0x36e>)
20000224:	ee77 7ae5 	vsub.f32	s15, s15, s11
20000228:	edd6 5a01 	vldr	s11, [r6, #4]
2000022c:	ee75 5ac7 	vsub.f32	s11, s11, s14
20000230:	eea7 7aa5 	vfma.f32	s14, s15, s11
20000234:	eef0 7a47 	vmov.f32	s15, s14
       * @param   k Tangent of PI x cutoff frequency in radians: tan(pi*wc)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
20000238:	ee37 7a26 	vadd.f32	s14, s14, s13
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
        fb1 = km1 / kp1;
2000023c:	ee77 7ae6 	vsub.f32	s15, s15, s13
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
20000240:	ee86 3a87 	vdiv.f32	s6, s13, s14
        ff1 = -ff0;
        fb1 = km1 / kp1;
20000244:	ee87 0a87 	vdiv.f32	s0, s15, s14
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
        ff1 = -ff0;
20000248:	eef1 0a43 	vneg.f32	s1, s6
      inline __attribute__((optimize("Ofast"),always_inline))
      void setFOHP(const float k) {
        // k = tan(pi*wc)
        const float kp1 = k+1.f;
        const float km1 = k-1.f;
        ff0 = 1.f / kp1;
2000024c:	ed83 3a13 	vstr	s6, [r3, #76]	; 0x4c
        ff1 = -ff0;
20000250:	edc3 0a14 	vstr	s1, [r3, #80]	; 0x50
        fb1 = km1 / kp1;
20000254:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
	
	// Set pole for filters
	mvps1D.setFilters(w0);
	
	// Local copy of the phase and its pointer.
	float phi = s.phi;
20000258:	ed93 7a00 	vldr	s14, [r3]
		float d0 = params.d0 + lfo;
		float v0 = params.v0;
		float d1 = params.d1 + lfo;
		float v1 = params.v1;
		float d2 = params.d2 + lfo;
		float v2 = params.v2;
2000025c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
20000260:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
20000264:	edd3 4a18 	vldr	s9, [r3, #96]	; 0x60
20000268:	edd3 5a02 	vldr	s11, [r3, #8]
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
2000026c:	4291      	cmp	r1, r2
2000026e:	f000 80ad 	beq.w	200003cc <_hook_cycle+0x326>
		ps *= (vb - va);
		return ps + va;
	}
	
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 + lfo;
20000272:	ee35 da09 	vadd.f32	s26, s10, s18
		float v1 = params.v1;
		float d2 = params.d2 + lfo;
		float v2 = params.v2;
		
		float ps;
		if(phi < d0) {
20000276:	eeb4 7acd 	vcmpe.f32	s14, s26
2000027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000027e:	d504      	bpl.n	2000028a <_hook_cycle+0x1e4>
			ps = phi / d0;
20000280:	eec7 7a0d 	vdiv.f32	s15, s14, s26
			ps *= v0;
20000284:	ee62 7aa7 	vmul.f32	s15, s5, s15
20000288:	e039      	b.n	200002fe <_hook_cycle+0x258>
	}
	
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 + lfo;
		float v0 = params.v0;
		float d1 = params.d1 + lfo;
2000028a:	ee75 ca29 	vadd.f32	s25, s10, s19
		
		float ps;
		if(phi < d0) {
			ps = phi / d0;
			ps *= v0;
		} else if(phi < d1){
2000028e:	eeb4 7aec 	vcmpe.f32	s14, s25
20000292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000296:	d50e      	bpl.n	200002b6 <_hook_cycle+0x210>
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
20000298:	ee7c 7acd 	vsub.f32	s15, s25, s26
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
2000029c:	ee77 da4d 	vsub.f32	s27, s14, s26
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
200002a0:	eeb0 da62 	vmov.f32	s26, s5
200002a4:	eecd caa7 	vdiv.f32	s25, s27, s15
200002a8:	ee72 7a62 	vsub.f32	s15, s4, s5
200002ac:	eeac daa7 	vfma.f32	s26, s25, s15
200002b0:	eef0 7a4d 	vmov.f32	s15, s26
200002b4:	e023      	b.n	200002fe <_hook_cycle+0x258>
	inline float MultiPhaseShaper(float phi, float lfo) {
		float d0 = params.d0 + lfo;
		float v0 = params.v0;
		float d1 = params.d1 + lfo;
		float v1 = params.v1;
		float d2 = params.d2 + lfo;
200002b6:	ee75 7a0a 	vadd.f32	s15, s10, s20
		if(phi < d0) {
			ps = phi / d0;
			ps *= v0;
		} else if(phi < d1){
			ps = getPS(phi, d0, d1, v0, v1);
		} else if(phi < d2) {
200002ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
200002be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002c2:	d50e      	bpl.n	200002e2 <_hook_cycle+0x23c>
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
200002c4:	ee37 da6c 	vsub.f32	s26, s14, s25
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
200002c8:	ee77 7aec 	vsub.f32	s15, s15, s25
200002cc:	eecd ca27 	vdiv.f32	s25, s26, s15
200002d0:	ee71 7ac2 	vsub.f32	s15, s3, s4
200002d4:	eeb0 da42 	vmov.f32	s26, s4
200002d8:	eeac daa7 	vfma.f32	s26, s25, s15
200002dc:	eef0 7a4d 	vmov.f32	s15, s26
200002e0:	e00d      	b.n	200002fe <_hook_cycle+0x258>
		*phi += w0;
		*phi -= (uint32_t)*phi;
	}
	
	inline float getPS(float phi, float da, float db, float va, float vb) {
		float ps = phi - da;
200002e2:	ee37 da67 	vsub.f32	s26, s14, s15
		ps /= (db - da);
		ps *= (vb - va);
		return ps + va;
200002e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
200002ea:	eecd ca27 	vdiv.f32	s25, s26, s15
200002ee:	ee76 7ae1 	vsub.f32	s15, s13, s3
200002f2:	eeb0 da61 	vmov.f32	s26, s3
200002f6:	eeac daa7 	vfma.f32	s26, s25, s15
200002fa:	eef0 7a4d 	vmov.f32	s15, s26
   *
   * @param   x  Value in [0, 1.0].
   * @return     Result of cos(2*pi*x).
   */
  __fast_inline float osc_cosf(float x) {
    return osc_sinf(x+0.25f);
200002fe:	ee77 7aaa 	vadd.f32	s15, s15, s21
   */
  __fast_inline float osc_sinf(float x) {
    const float p = x - (uint32_t)x;
    
    // half period stored -- wrap around and invert
    const float x0f = 2.f * p * k_wt_sine_size;
20000302:	eefc cae7 	vcvt.u32.f32	s25, s15
20000306:	eef8 ca6c 	vcvt.f32.u32	s25, s25
2000030a:	ee77 7aec 	vsub.f32	s15, s15, s25
2000030e:	ee67 7a8b 	vmul.f32	s15, s15, s22
    const uint32_t x0p = (uint32_t)x0f;
20000312:	eefc cae7 	vcvt.u32.f32	s25, s15
20000316:	ee1c 4a90 	vmov	r4, s25

    const uint32_t x0 = x0p & k_wt_sine_mask;
2000031a:	f004 007f 	and.w	r0, r4, #127	; 0x7f
2000031e:	ee0d 4a10 	vmov	s26, r4
    const uint32_t x1 = (x0 + 1) & k_wt_sine_mask;
    
    const float y0 = linintf(x0f - x0p, wt_sine_lut_f[x0], wt_sine_lut_f[x1]);
20000322:	eb05 0680 	add.w	r6, r5, r0, lsl #2
20000326:	3001      	adds	r0, #1
20000328:	eeb8 da4d 	vcvt.f32.u32	s26, s26
2000032c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
20000330:	eb05 0080 	add.w	r0, r5, r0, lsl #2
20000334:	ee77 7acd 	vsub.f32	s15, s15, s26
20000338:	edd6 ca00 	vldr	s25, [r6]
2000033c:	ed90 da00 	vldr	s26, [r0]
20000340:	ee3d da6c 	vsub.f32	s26, s26, s25
    return (x0p < k_wt_sine_size)?y0:-y0;
20000344:	2c7f      	cmp	r4, #127	; 0x7f
20000346:	eee7 ca8d 	vfma.f32	s25, s15, s26
2000034a:	eef0 7a6c 	vmov.f32	s15, s25
2000034e:	bf88      	it	hi
20000350:	eef1 7a6c 	vneghi.f32	s15, s25
			ps = getPS(phi, d1, d2, v1, v2);
		} else {
			ps = getPS(phi, d2, 1.f, v2, 1.f);
		}
		
		float sig = -osc_cosf(ps);
20000354:	eef1 7a67 	vneg.f32	s15, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20000358:	eea3 4aa7 	vfma.f32	s8, s7, s15
2000035c:	eef0 ca44 	vmov.f32	s25, s8
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20000360:	ee24 4a41 	vnmul.f32	s8, s8, s2
20000364:	eea3 4aa7 	vfma.f32	s8, s7, s15
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_fo(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20000368:	eef0 7a64 	vmov.f32	s15, s9
2000036c:	eee3 7a2c 	vfma.f32	s15, s6, s25
      mZ1 = mCoeffs.ff1 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20000370:	ee67 4ac0 	vnmul.f32	s9, s15, s0
20000374:	ee77 7ae5 	vsub.f32	s15, s15, s11
20000378:	eee0 4aac 	vfma.f32	s9, s1, s25
2000037c:	eee7 5a27 	vfma.f32	s11, s14, s15
		LPF.mCoeffs.setFOLP(osc_tanpif(lpf));
		HPF.mCoeffs.setFOHP(osc_tanpif(hpf));
	}
	
	inline float updatePhase(float *phi, float w0) {
		*phi += w0;
20000380:	ee37 7a06 	vadd.f32	s14, s14, s12

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20000384:	eef4 5aeb 	vcmpe.f32	s11, s23
		*phi -= (uint32_t)*phi;
20000388:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2000038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000390:	eef8 7a67 	vcvt.f32.u32	s15, s15
20000394:	ee37 7a67 	vsub.f32	s14, s14, s15
20000398:	db09      	blt.n	200003ae <_hook_cycle+0x308>
2000039a:	eef4 5ae6 	vcmpe.f32	s11, s13
2000039e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200003a2:	bfb4      	ite	lt
200003a4:	eef0 7a65 	vmovlt.f32	s15, s11
200003a8:	eef0 7a4c 	vmovge.f32	s15, s24
200003ac:	e001      	b.n	200003b2 <_hook_cycle+0x30c>
200003ae:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
		
		// Softclip signal before sending to buffer
		sig = osc_softclipf(0.05f, sig);
		
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
200003b2:	ee67 caa7 	vmul.f32	s25, s15, s15
200003b6:	ee67 caec 	vnmul.f32	s25, s15, s25
200003ba:	eeec 7aa8 	vfma.f32	s15, s25, s17
200003be:	ee67 7a88 	vmul.f32	s15, s15, s16
200003c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
200003c6:	ece1 7a01 	vstmia	r1!, {s15}
	
	// Pointer to end of buffer
	const q31_t *y_e = y + frames; 

	// Fill buffer with samples
	for (; y != y_e; ) { 
200003ca:	e74f      	b.n	2000026c <_hook_cycle+0x1c6>
	}
	
	// Update global osc phase
	s.phi = phi;
	
}
200003cc:	ecbd 8b0c 	vpop	{d8-d13}
200003d0:	ed83 4a11 	vstr	s8, [r3, #68]	; 0x44
200003d4:	edc3 4a18 	vstr	s9, [r3, #96]	; 0x60
200003d8:	edc3 5a02 	vstr	s11, [r3, #8]
		// Format in Q31 binary fixed-point representation and add to buffer
		*(y++) = f32_to_q31(sig); 
	}
	
	// Update global osc phase
	s.phi = phi;
200003dc:	ed83 7a00 	vstr	s14, [r3]
	
}
200003e0:	bd70      	pop	{r4, r5, r6, pc}
200003e2:	bf00      	nop
200003e4:	20000618 	.word	0x20000618
200003e8:	00000000 	.word	0x00000000
200003ec:	3b808081 	.word	0x3b808081
200003f0:	44029cbc 	.word	0x44029cbc
200003f4:	0800f100 	.word	0x0800f100
200003f8:	0800f764 	.word	0x0800f764
200003fc:	43800000 	.word	0x43800000
20000400:	3d4ccccd 	.word	0x3d4ccccd
20000404:	4f000000 	.word	0x4f000000
20000408:	46b8ff49 	.word	0x46b8ff49
2000040c:	37aec33e 	.word	0x37aec33e
20000410:	3efae148 	.word	0x3efae148
20000414:	08012bdc 	.word	0x08012bdc

20000418 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t *const params) {
	// Reset oscillator phase for new note
	MVPS1D::State &s = mvps1D.state;
	s.flags |= MVPS1D::flag_reset;
20000418:	4a02      	ldr	r2, [pc, #8]	; (20000424 <_hook_on+0xc>)
2000041a:	7c13      	ldrb	r3, [r2, #16]
2000041c:	f043 0301 	orr.w	r3, r3, #1
20000420:	7413      	strb	r3, [r2, #16]
20000422:	4770      	bx	lr
20000424:	20000618 	.word	0x20000618

20000428 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t *const params) {
20000428:	4770      	bx	lr

2000042a <_hook_param>:
	// Not used	
	(void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value) { 
2000042a:	ee07 1a90 	vmov	s15, r1

	MVPS1D::Params &p = mvps1D.params;
	
	switch (index) {
2000042e:	2806      	cmp	r0, #6
20000430:	f200 80b7 	bhi.w	200005a2 <_hook_param+0x178>
20000434:	e8df f000 	tbb	[pc, r0]
20000438:	553a1f04 	.word	0x553a1f04
2000043c:	8b70      	.short	0x8b70
2000043e:	a6          	.byte	0xa6
2000043f:	00          	.byte	0x00
		case k_user_osc_param_id1: // User parameter 1
			// Set Values for Inflection Point 1: d0 (Bipolar)
			p.d0 = clip01f(value * 0.005f); 		
20000440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000444:	ed9f 7a57 	vldr	s14, [pc, #348]	; 200005a4 <_hook_param+0x17a>
20000448:	ee67 7a87 	vmul.f32	s15, s15, s14
2000044c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000454:	db09      	blt.n	2000046a <_hook_param+0x40>
20000456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000045a:	eef4 7ac7 	vcmpe.f32	s15, s14
2000045e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000462:	bfa8      	it	ge
20000464:	eef0 7a47 	vmovge.f32	s15, s14
20000468:	e001      	b.n	2000046e <_hook_param+0x44>
2000046a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 200005a8 <_hook_param+0x17e>
2000046e:	4b4f      	ldr	r3, [pc, #316]	; (200005ac <_hook_param+0x182>)
20000470:	edc3 7a05 	vstr	s15, [r3, #20]
			break;
20000474:	4770      	bx	lr
			
		case k_user_osc_param_id2: // User parameter 2
			// Set Values for Inflection Point 1: v0 (Bipolar)
			p.v0 = clip01f(value * 0.005f); 
20000476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000047a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 200005a4 <_hook_param+0x17a>
2000047e:	ee67 7a87 	vmul.f32	s15, s15, s14
20000482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000048a:	db09      	blt.n	200004a0 <_hook_param+0x76>
2000048c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000490:	eef4 7ac7 	vcmpe.f32	s15, s14
20000494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000498:	bfa8      	it	ge
2000049a:	eef0 7a47 	vmovge.f32	s15, s14
2000049e:	e001      	b.n	200004a4 <_hook_param+0x7a>
200004a0:	eddf 7a41 	vldr	s15, [pc, #260]	; 200005a8 <_hook_param+0x17e>
200004a4:	4b41      	ldr	r3, [pc, #260]	; (200005ac <_hook_param+0x182>)
200004a6:	edc3 7a08 	vstr	s15, [r3, #32]
			break;
200004aa:	4770      	bx	lr
			
		case k_user_osc_param_id3: // User parameter 3
			// Set Values for Inflection Point 2: d1 (Bipolar)
			p.d1 = clip01f(value * 0.005f); 
200004ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200004b0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 200005a4 <_hook_param+0x17a>
200004b4:	ee67 7a87 	vmul.f32	s15, s15, s14
200004b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200004bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004c0:	db09      	blt.n	200004d6 <_hook_param+0xac>
200004c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200004c6:	eef4 7ac7 	vcmpe.f32	s15, s14
200004ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004ce:	bfa8      	it	ge
200004d0:	eef0 7a47 	vmovge.f32	s15, s14
200004d4:	e001      	b.n	200004da <_hook_param+0xb0>
200004d6:	eddf 7a34 	vldr	s15, [pc, #208]	; 200005a8 <_hook_param+0x17e>
200004da:	4b34      	ldr	r3, [pc, #208]	; (200005ac <_hook_param+0x182>)
200004dc:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
200004e0:	4770      	bx	lr
			
		case k_user_osc_param_id4: // User parameter 4
			// Set Values for Inflection Point 2: v1 (Bipolar)
			p.v1 = clip01f(value * 0.005f); 
200004e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200004e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 200005a4 <_hook_param+0x17a>
200004ea:	ee67 7a87 	vmul.f32	s15, s15, s14
200004ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
200004f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200004f6:	db09      	blt.n	2000050c <_hook_param+0xe2>
200004f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
200004fc:	eef4 7ac7 	vcmpe.f32	s15, s14
20000500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000504:	bfa8      	it	ge
20000506:	eef0 7a47 	vmovge.f32	s15, s14
2000050a:	e001      	b.n	20000510 <_hook_param+0xe6>
2000050c:	eddf 7a26 	vldr	s15, [pc, #152]	; 200005a8 <_hook_param+0x17e>
20000510:	4b26      	ldr	r3, [pc, #152]	; (200005ac <_hook_param+0x182>)
20000512:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			break;
20000516:	4770      	bx	lr
			
		case k_user_osc_param_id5: // User parameter 5
			// Set Values for Inflection Point 3: d2 (Bipolar)
			p.d2 = clip01f(value * 0.005f); 		
20000518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000051c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 200005a4 <_hook_param+0x17a>
20000520:	ee67 7a87 	vmul.f32	s15, s15, s14
20000524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
20000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000052c:	db09      	blt.n	20000542 <_hook_param+0x118>
2000052e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000532:	eef4 7ac7 	vcmpe.f32	s15, s14
20000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000053a:	bfa8      	it	ge
2000053c:	eef0 7a47 	vmovge.f32	s15, s14
20000540:	e001      	b.n	20000546 <_hook_param+0x11c>
20000542:	eddf 7a19 	vldr	s15, [pc, #100]	; 200005a8 <_hook_param+0x17e>
20000546:	4b19      	ldr	r3, [pc, #100]	; (200005ac <_hook_param+0x182>)
20000548:	edc3 7a07 	vstr	s15, [r3, #28]
			break;
2000054c:	4770      	bx	lr
			
		case k_user_osc_param_id6: // User parameter 6
			// Set Values for Inflection Point 3: v2 (Bipolar)
			p.v2 = clip01f(value * 0.005f);  
2000054e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000552:	ed9f 7a14 	vldr	s14, [pc, #80]	; 200005a4 <_hook_param+0x17a>
20000556:	ee67 7a87 	vmul.f32	s15, s15, s14
2000055a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2000055e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000562:	db09      	blt.n	20000578 <_hook_param+0x14e>
20000564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20000568:	eef4 7ac7 	vcmpe.f32	s15, s14
2000056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000570:	bfa8      	it	ge
20000572:	eef0 7a47 	vmovge.f32	s15, s14
20000576:	e001      	b.n	2000057c <_hook_param+0x152>
20000578:	eddf 7a0b 	vldr	s15, [pc, #44]	; 200005a8 <_hook_param+0x17e>
2000057c:	4b0b      	ldr	r3, [pc, #44]	; (200005ac <_hook_param+0x182>)
2000057e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			break;
20000582:	4770      	bx	lr
			
		case k_user_osc_param_shape: // A knob
			// Set the frequency ratio for filters
			p.f_ratio = 1.f + param_val_to_f32(value) * 100.f;
20000584:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 200005b0 <_hook_param+0x186>
20000588:	eddf 6a0a 	vldr	s13, [pc, #40]	; 200005b4 <_hook_param+0x18a>
2000058c:	4b07      	ldr	r3, [pc, #28]	; (200005ac <_hook_param+0x182>)
2000058e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20000592:	ee67 7a87 	vmul.f32	s15, s15, s14
20000596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2000059a:	eea7 7aa6 	vfma.f32	s14, s15, s13
2000059e:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
200005a2:	4770      	bx	lr
200005a4:	3ba3d70a 	.word	0x3ba3d70a
200005a8:	00000000 	.word	0x00000000
200005ac:	20000618 	.word	0x20000618
200005b0:	3a802008 	.word	0x3a802008
200005b4:	42c80000 	.word	0x42c80000

200005b8 <_ZN6MVPS1DC1Ev>:
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
200005b8:	2200      	movs	r2, #0
			phi = ZEROF;
		}
	};

	MVPS1D(void) {
		state = State();
200005ba:	4611      	mov	r1, r2
200005bc:	6302      	str	r2, [r0, #48]	; 0x30
200005be:	6342      	str	r2, [r0, #52]	; 0x34
200005c0:	6382      	str	r2, [r0, #56]	; 0x38
200005c2:	63c2      	str	r2, [r0, #60]	; 0x3c
200005c4:	6402      	str	r2, [r0, #64]	; 0x40
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
200005c6:	6442      	str	r2, [r0, #68]	; 0x44
200005c8:	6482      	str	r2, [r0, #72]	; 0x48
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
200005ca:	64c2      	str	r2, [r0, #76]	; 0x4c
200005cc:	6502      	str	r2, [r0, #80]	; 0x50
200005ce:	6542      	str	r2, [r0, #84]	; 0x54
200005d0:	6582      	str	r2, [r0, #88]	; 0x58
200005d2:	65c2      	str	r2, [r0, #92]	; 0x5c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
200005d4:	6602      	str	r2, [r0, #96]	; 0x60
200005d6:	6642      	str	r2, [r0, #100]	; 0x64
200005d8:	6002      	str	r2, [r0, #0]
200005da:	6042      	str	r2, [r0, #4]
200005dc:	6082      	str	r2, [r0, #8]
200005de:	60c2      	str	r2, [r0, #12]
		inline void reset(void) {
			phi = ZEROF;
		}
	};

	MVPS1D(void) {
200005e0:	b510      	push	{r4, lr}
		state = State();
200005e2:	7c02      	ldrb	r2, [r0, #16]
200005e4:	f361 0200 	bfi	r2, r1, #0, #1
200005e8:	7402      	strb	r2, [r0, #16]
		params = Params();
200005ea:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
200005ee:	6142      	str	r2, [r0, #20]
200005f0:	6182      	str	r2, [r0, #24]
200005f2:	61c2      	str	r2, [r0, #28]
200005f4:	6202      	str	r2, [r0, #32]
200005f6:	6242      	str	r2, [r0, #36]	; 0x24
200005f8:	6282      	str	r2, [r0, #40]	; 0x28
200005fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
200005fe:	62c2      	str	r2, [r0, #44]	; 0x2c
	}
20000600:	bd10      	pop	{r4, pc}
	...

20000604 <_GLOBAL__sub_I__hook_init>:
		case k_user_osc_param_shiftshape: // B knob	
			break;
			
		default: break;
	}
}
20000604:	b508      	push	{r3, lr}
 */

#include "userosc.h"
#include "mvps1D.hpp"

static MVPS1D mvps1D;
20000606:	4802      	ldr	r0, [pc, #8]	; (20000610 <_GLOBAL__sub_I__hook_init+0xc>)
20000608:	f7ff ffd6 	bl	200005b8 <_ZN6MVPS1DC1Ev>
2000060c:	bd08      	pop	{r3, pc}
2000060e:	bf00      	nop
20000610:	20000618 	.word	0x20000618
